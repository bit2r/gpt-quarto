[
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "\n1  저작환경 설정\n",
    "section": "",
    "text": "1.1 쿼토 설치\n쿼토(Quarto) 웹사이트에서 Quarto CLI 엔진과 통합개발도구(IDE)를 설치한다. 쿼토 CLI를 지원하는 IDE는 VS Code, RStudio, Jupyter, VIM/Emacs 와 같은 텍스트 편집기가 포함된다. IDE까지 설치를 했다면 문학적 프로그래밍(literate programming)을 통해 사람이 저작하는 마크다운(Markdown)과 기계가 저작하는 프로그래밍 언어(R/Python/SQL/줄리아/자바스크립트)를 결합한 다양한 문서저작을 시작할 수 있다.",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>저작환경 설정</span>"
    ]
  },
  {
    "objectID": "setup.html#쿼토-설치",
    "href": "setup.html#쿼토-설치",
    "title": "\n1  저작환경 설정\n",
    "section": "",
    "text": "그림 1.2: 쿼토 도구모음\n\n\n\n1.1.1 윈도우 설치\n쿼토(Quarto)는 윈도우를 비롯하여 맥, 리눅스도 지원한다. 다른 운영체제에 쿼토를 설치하는 방법도 유사하기 때문에 윈도우를 기준으로 설치방법을 살펴보자. 윈도우 운영체제에 설치하기 위해서는 몇 가지 단계를 거쳐야 한다.\n\n1.1.2 쿼토 다운로드\n먼저 Quarto 공식 웹사이트에서 윈도우용 설치 파일을 다운로드한다. 웹사이트 “Download Quarto CLI” 윈도우 버전을 선택하여 다운로드한다.\n\n\n\n\n\n그림 1.3: 쿼토 다운로드 화면\n\n\n\n1.1.3 쿼토 설치\n다운로드한 파일을 더블클릭 실행하여 설치를 진행한다. 설치 마법사가 나타나면 지시에 따라 설치를 완료하면 된다. 설치가 완료되면 환경 변수에 쿼토 설치 경로를 등록해야 한다. ‘제어판’을 열고 ’시스템과 보안’으로 이동한 다음 ’시스템’을 선택한다. ’고급 시스템 설정’을 클릭한 후 ’환경 변수’ 버튼을 누른다. ‘시스템 변수’에서 ’Path’ 변수를 찾아 Quarto의 설치 경로를 추가한다. 일반적인 경로는 C:\\Users\\&lt;사용자계정명&gt;\\AppData\\Local\\Programs\\Quarto\\bin과 같을 수 있다.\n\n\n\n\n\n그림 1.4: 쿼토 설치완료\n\n\n\n1.1.4 쿼토 CLI\n마지막으로 환경 변수 설정이 올바르게 이루어졌는지 확인하기 위해 명령 프롬프트나 터미널을 열어 quarto --version 혹은 quarto --help 명령을 입력한다. 올바른 버전 번호가 출력되면 설치가 성공적으로 완료된 것이다.\n\n\n\n\n\n그림 1.5: 쿼토 CLI 실행화면\n\n\n\n\n\n\n\n\n윈도우 시스템의 경우 초기 윈도우에서 쿼토 실행명령이 quarto.cmd 이였으나 quarto.exe도 지원된다. 즉, 제어판 → 환경 변수 설정 … 에서 \"C:\\Users\\사용자명\\AppData\\Local\\Programs\\Quarto\\bin 디렉토리를 등록한 후 quarto 명령어를 사용한다.\n\nSys.which(\"quarto\")\n                                                                  quarto \n\"C:\\\\Users\\\\사용자명\\\\AppData\\\\Local\\\\Programs\\\\Quarto\\\\bin\\\\quarto.exe\"",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>저작환경 설정</span>"
    ]
  },
  {
    "objectID": "setup.html#부조종사",
    "href": "setup.html#부조종사",
    "title": "\n1  저작환경 설정\n",
    "section": "\n1.2 부조종사",
    "text": "1.2 부조종사\nRStudio에서 GitHub 부조종사(Copilot) 기능을 활용할 수 있도록 저자를 포함하여 수많은 개발자들이 요청하여 2021년 11월 28일 최초 등록된 이슈(#10148)가 2023년 7월 18일 베타버전으로 Rstudio 일일 빌드 (Daily Builds)를 통해 첫 공개되었다. GitHub 부조종사(Copilot)를 Rstudio에서 사용하기 위해서는 특별한 버전 Rstudio, 즉 일일 빌드 (Daily Builds)가 필요하였으나 현재는 각자 운영체제에 맞는 RStudio Desktop 버전을 다운로드한 후 설치하게 되면 기본적으로 부조종사 기능을 사용할 수 있다. 기본적으로 GitHub 부조종사 기능은 구독서비스로 매월 일정액($10)을 지불해야 사용할 수 있다.\n\nTools -&gt; Global Options -&gt; Copilot -&gt; Enable Github Copilot\n\n설치가 완료되면 Rstudio를 실행하고 상단 메뉴에서 ‘Tools’를 선택한 다음 ’Global Options’을 클릭하면, 왼쪽 사이드바에서 ’Copilot’을 선택하고 ’Enable GitHub Copilot’ 체크박스를 선택한 다음 ’Sign In’을 클릭하고 나타나는 링크에서 인증 코드를 입력한다. ’Authorize Github Copilot Plugin’을 클릭하여 인증 과정을 완료하면 설정이 완료된다.\n\n\n\n\n\n그림 1.6: GitHub 부주종사 설치과정\n\n\nGitHub Copilot를 Rstudio에서 사용해보면, 작성하려는 코드(Ghost Text)가 회색으로 예측되어 나타난다. ‘Tab’ 키를 눌러 탭완성(Tab Completion) 기능으로 제시한 코드를 수락하여 개발을 이어간다.",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>저작환경 설정</span>"
    ]
  },
  {
    "objectID": "setup.html#rstudio-ide",
    "href": "setup.html#rstudio-ide",
    "title": "\n1  저작환경 설정\n",
    "section": "\n1.3 RStudio IDE",
    "text": "1.3 RStudio IDE\nRStudio IDE는 처음 데이터 과학 R 프로그래밍 언어를 위한 통합개발환경으로 시작하였으나 이제는 파이썬을 비롯하여 SQL, Observable JS 등 데이터 과학 전분야를 담당하고 있다. 특히, 데이터 분석, 시각화 및 문서 작업을 간편하게 할 수 있도록 다양한 도구와 기능을 제공할 뿐만 아니라, Shiny 웹 애플리케이션 개발, Plumber를 통한 API 개발, 쿼토(Quarto)/R 마크다운을 활용해 다양한 데이터 과학 산출물을 제작할 수 있다. 또한, Git 버전 관리 시스템과 통합되어 코드 이력을 쉽게 추적하고 관리할 수 있고 GitHub과 연결하여 협업기능도 지원한다. 앞서 살펴본 GitHub 부조종사(Copilot) 유료구독을 한 경우 Rstudio와 연결하여 챗GPT로 유명한 생성형 AI를 통해 텍스트 및 다양한 프로그래밍 언어로 코드를 생성할 수 있다.\n그림 1.7 에 RStudio IDE 설치과정이 나와 있다. 먼저, R 프로그래밍 언어 공식 웹사이트인 CRAN에서 R을 다운로드하여 설치한다. 그 다음, RStudio 공식 웹사이트에서 사용자의 운영 체제에 맞는 RStudio IDE 버전을 다운로드한다. 다운로드한 설치 파일을 실행하여 설치 과정을 진행하며, 일반적으로 기본 설정으로 설치하는 것이 좋다. 설치가 완료되면 RStudio를 실행하여 R과 함께 사용한다.\n\n\n\n\n\n그림 1.7: RStudio IDE 설치과정\n\n\nRStudio 코드 편집기는 자동 완성, 구문 강조, 맞춤법 검사 등 기능을 제공하여 개발자 편의를 향상시켰고, GUI 데이터 뷰어를 통해 데이터프레임과 데이터 객체를 직접적으로 시각적으로 살펴볼 수 있으며, 내장 패키지 관리 시스템을 통해 R 패키지도 손쉽게 설치하고 관리할 수 있다.\n웹앱 Shiny 애플리케이션 개발과 테스트도 가능하고, 문서화 프로그래밍을 차세대 R 마크다운 쿼토(Quarto)를 이용하여 코드, 데이터, 그래프를 하나의 문서로 통합하여 구현할 수 있을 뿐만 아니라 팬독(Pandoc)을 통해 다양한 형태 문서를 자동으로 생성할 수 있다.\n\n\n\n\n\n그림 1.8: RStudio 문서화 프로그래밍 사례\n\n\n\n1.3.1 비주얼 마크다운 편집기\n비주얼(visual) 마크다운 기능을 사용하게 되면 과학/기술 문서 작성의 용이성 뿐만 아니라 인용(Citation), 문학적 프로그래밍(literate programming) 을 통한 재현가능한 과학문서 구현, 팬독(Pandoc)을 사용하여 텍스트와 코드로 PDF, HTML, 워드 등 다양한 문서 동시 생성이 가능하다.\n\n\n\n\n\n그림 1.9: RStudio 비주얼 마크다운 편집기능\n\n\n\n1.3.2 단축키\n데이터 과학에서 통합개발환경(Integrated Development Environment, IDE)은 코드 기반의 제품과 서비스 개발 효율성과 효과성을 극대화에 매우 큰 기여를 한다. IDE는 코딩, 디버깅, 컴파일, 배포 등 프로그램 개발에 필요한 다양한 작업을 한 곳에서 수행할 수 있게 통합함으로써 개발자가 보다 집중하고 효율적으로 작업할 수 있는 환경을 제공한다. 단축키를 통해 개발자는 반복적인 작업을 빠르고 효율적으로 수행함으로써 전체적인 작업 속도와 생산성을 크게 높일 수 있다.\n특히, RStudio는 데이터 과학 분야에서 널리 사용되는 프로그래밍 언어인 R을 위한 특화된 통합 개발환경을 제공한다. RStudio는 R 언어 특성에 맞춰진 다양한 기능과 도구를 통합하여, 데이터 과학자와 연구자들이 데이터 분석, 시각화, 모형개발 작업을 보다 효율적으로 수행할 수 있도록 돕는다. RStudio에서 코드 작성, 편집 및 실행을 보다 빠르고 효율적으로 수행하기 위해 많이 사용되는 단축키는 다음과 같다.\n\n\n표 1.1: RStudio에서 자주 사용되는 단축키\n\n\n\n단축키\n윈도우\n맥\n\n\n\n마지막 명령어\n↑\n↑\n\n\n마지막 매칭 명령어\n^ + ↑\n⌘ + ↑\n\n\n자동 탭완성\n↹\n↹\n\n\n\n—- 실행 —-\n\n\n\n선택영역 실행\n^ + ⏎\n⌘ + ⏎\n\n\nSource\n^ + ⇧ + S\n⌘ + ⇧ + S\n\n\nSource + 메아리(Echo)\n^ + ⇧ + ⏎\n⌘ + ⇧ + ⏎\n\n\n\n—- 화면 전환 —-\n\n\n\n코딩 패널창 전환\n^ + 1\n^ + 1\n\n\n콘솔 패널창 전환\n^ + 2\n^ + 2\n\n\n\n—- 코딩 단축키 —-\n\n\n\n&lt;-\n⎇ + -\n⌥ + -\n\n\n%&gt;%\n^ + ⇧ + M\n⌘ + ⌥ + M\n\n\n주석처리\n^ + ⇧ + C\n^ + ⌥ + C\n\n\n주석제거\n^ + ⇧ + /\n^ + ⌥ + /\n\n\n실행취소\n^ + Z\n⌘ + Z\n\n\n다시 실행\n^ + ⇧ + Z\n⌘ + ⇧ + Z\n\n\n단축키 참조\n⎇ + ⇧ + Z\n⌥ + ⇧ + Z\n\n\n다중커서\n^ +⎇ + ↑\n^ + ⌥ + ↑\n\n\n\n^ +⎇ + ↓\n^ + ⌥ + ↓\n\n\n\n^ +⎇ + 클릭\n^ + ⌥ + 클릭\n\n\n\n—- 찾기 및 바꾸기 —-\n\n\n\n줄 찾아가기\n⇧ + ⎇ + G\n⌘ + ⇧ + ⌥ + G\n\n\n찾기 바꾸기\n^ + F\n⌘ + F\n\n\n파일에서 찾기\n^ + ⇧ + F\n⌘ + ⇧ + F\n\n\n모두 접기\n⎇ + O\n⌘ + ⌥ + O\n\n\n모두 펴기\n⎇ + ⇧ + O\n⌘ + ⌥ + ⇧ + O",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>저작환경 설정</span>"
    ]
  },
  {
    "objectID": "setup.html#출판-플랫폼",
    "href": "setup.html#출판-플랫폼",
    "title": "\n1  저작환경 설정\n",
    "section": "\n1.4 출판 플랫폼",
    "text": "1.4 출판 플랫폼\n데이터 과학 분야에서 산출물을 공유하고 출판하는 것은 매우 중요한 단계로 효과적인 출판과 비용적인 면을 고려하여 최적 플랫폼과 도구를 선정한다. 데이터 과학 분야를 개척한 RStudio IDE로 과거 R 마크다운 산출물을 RPubs에 출판한 경험이 있다면, Quarto Pub은 그와 유사한 경험을 제공한다. 다른 대안으로는 netlify, GitHub Pages, RStudio Connect 등이 있다.\n\n\n\n\n\n그림 1.10: 쿼토 출판",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>저작환경 설정</span>"
    ]
  }
]