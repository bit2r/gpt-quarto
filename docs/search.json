[
  {
    "objectID": "part_components.html",
    "href": "part_components.html",
    "title": "3  문서 구성요소",
    "section": "",
    "text": "3.1 웹 문서\n웹 문서 구성요소는 크게 HTML, CSS, 자바스크립트로 구분된다. HTML(HyperText Markup Language)은 웹 페이지의 기본 구조와 내용을 정의하고, 다양한 태그를 사용하여 텍스트, 이미지, 링크, 리스트, 테이블 등을 웹 페이지에 배치한다. 주요 HTML 태그로 &lt;head&gt;, &lt;body&gt;, &lt;h1&gt;, &lt;p&gt;, &lt;a&gt;, &lt;img&gt; 등을 들 수 있다. CSS(Cascading Style Sheets)는 웹 페이지 레이아웃과 디자인을 담당한다. 색상, 폰트, 여백, 정렬 등을 지정하여 웹 페이지의 외관을 꾸미는 역할을 한다. CSS는 HTML 문서 내에 &lt;style&gt; 태그를 사용하여 삽입할 수 있고, 외부 저장된 CSS 파일을 연결하여 사용할 수도 있다. 자바스크립트는 웹 페이지에 동적인 기능을 부여한다. 사용자와 상호작용, 데이터 처리, 동적인 요소 변경 등을 담당하고, HTML 문서 내에 &lt;script&gt; 태그를 사용하여 삽입할 수 있다.\n웹 문서는 HTML, CSS, 자바스크립트를 사용하여 복잡한 구조와 디자인, 인터랙티브한 요소를 제공하기 위해서 개발이 필요한 반면에 아래한글과 워드 같은 워드 프로세서는 GUI 기반 문서 편집기로 사용자가 메뉴와 버튼을 통해 쉽게 문서를 서식을 지정하여 작성한다. 마크다운은 두가지 문서 저작방식의 장점을 취해 가장 단순한 형태 텍스트 기반 마크업 언어로 특수 문자를 사용하여 서식을 지정한다.",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>문서 구성요소</span>"
    ]
  },
  {
    "objectID": "part_components.html#그림",
    "href": "part_components.html#그림",
    "title": "3  문서 구성요소",
    "section": "3.2 그림",
    "text": "3.2 그림\n그림은 책 내용을 이해하는 데 도움을 주는 중요한 요소이다. 그림은 과거 실제 사물을 촬영한 사진과 사물이나 생각을 그려서 표현한 것이 전부였다면, 이제는 데이터를 기반으로 다양한 그래프도 만들어낼 수 있고 생성형 AI 기술을 사용해서 시각적 표현을 만들어낼 수도 있다.\n그림은 문서에서 텍스트만으로 설명이 어려운 개념이나 데이터를 시각적으로 표현함으로써 이해를 돕고 문서구조를 논리적으로 구성하는 데도 기여한다. 그림 위치는 그림이 설명하려는 내용과 얼마나 밀접하게 연관되어 있는지에 따라 달라지는데 일반적으로 그림은 관련된 텍스트 바로 다음이나 전에 위치하는 것이 일반적이고, 그림에 대한 참조를 본문에서 명확히 하는 것이다.\n그림과 같은 시각적 객체가 준비되면 문서와 조화를 이룰 수 있도록 그림 크기, 정렬, 레이아웃, 캡션, 상호참조 등을 고려해야 한다. 특히, 문서의 최종 출력 형태를 고려해야 하는데 많이 사용되는 대표적으로 HTML, PDF, 아래한글에 각각 그림이 문서에 포함되면 다음과 같다.\n\n\n\n\n\n\n\n\n아래한글\nHTML\nPDF\n\n\n\n\n\n\n\n\n\n\n그림을 문서에 삽입할 때 그림이 문서의 전체 흐름과 내용에 잘 맞춰 물흐르듯 자연스럽게 구성한다. 그림을 단순히 장식적인 목적으로 넣어서는 안 되며, 본문의 내용을 보충하거나 설명하는 데 도움이 되어야 한다. 그림 크기가 너무 크거나 작으면 읽기 어렵고, 해상도가 낮으면 조약해 보여 글의 품격도 떨어뜨린다. 그림 번호(레이블)는 문서 내에서 그림을 참조할 때 사용되고 그림 설명글(캡션)은 그림 내용을 간략하게 설명하는 기능을 한다. 저작권 관련하여 그림 출처나 저작권 정보도 명기해야 하고, 그림 색상과 스타일이 문서 전체 디자인과 잘 어울리게 조화를 이루어야 한다.\n\nlibrary(tidyverse)\nlibrary(openai)\n\nextrafont::loadfonts()\n\nSys.setenv(OPENAI_API_KEY = Sys.getenv(\"OPENAI_API_KEY\"))\n\nx &lt;- create_image(\"강원도 설악산 멋진 풍경\")\n\ndownload.file(url = x$data$url, destfile = \"images/dalle_mountain.png\", mode = \"wb\")\n\n생성형 AI 기술의 발전으로 사람이 그린 듯한 정교한 이미지를 문서에 삽입하는 것이 비용 부담 없이 간편해졌다. 이제 텍스트 문단 사이에 적절한 ’프롬프트’를 넣어 이미지를 쉽게 추가할 수 있다. 예시로, OpenAI의 달리3(DALL·E 3) 모델을 사용하여 ’강원도 설악산의 멋진 풍경’이라는 프롬프트로 생성한 이미지는 이 기술의 진보를 잘 보여준다.\n\n\n\nAI 생성 이미지",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>문서 구성요소</span>"
    ]
  },
  {
    "objectID": "part_components.html#지도",
    "href": "part_components.html#지도",
    "title": "3  문서 구성요소",
    "section": "3.3 지도",
    "text": "3.3 지도\n지리학(Geography)은 가장 오래된 과학 중 하나로 꼽히며, 학생때부터 교실 여기저기에서 볼 수 있는 지도가 아마도 처음 접한 데이터 시각화 산출물일 것이다. 지리학은 지구의 곡률을 정확히 파악하여 지구의 크기와 모양, 중력에 대한 이해를 높이는 데 중요한 역할을 수행했을 뿐만 아니라 대항해 시대 지도가 매우 큰 기여를 했고, 현대에 와서 지리학 데이터 응용 범위는 더욱 확장되어, 민간과 국방 범위를 가리지 않고 상업적으로 입점위치 선정, 우주 탐사, 군사 작전, 인구이동 패턴 분석 등 다방면에서 요긴한 역할을 수행하고 있다.\n지도는 글쓰기에서 중요한 구성요소 중 하나로, 특히 학술 논문, 보고서, 여행기, 지리나 역사 분야에서 지도는 필수적이다. 지도는 텍스트로만 설명하기 어려운 공간적 관계나 지리적 배치를 명확하게 시각화함으로써 저자의 주장이나 설명을 더 쉽고 정확하게 이해시킬 수 있고 문서의 전문성과 신뢰성을 높힘으로서 효과적인 커뮤니케이션을 가능하게 한다.\n한가지 사례를 들어 보자. 2023년 7월 기준 대한민국 시도별 인구수를 문서의 한 구성요로서 글쓰기를 할 때, 텍스트로 설명하거나 표로 정리하는 방법, 막대그래프로 시각화하는 방법이 경우에 따라 유용할 수 있지만, 시도라는 지리적인 정보를 지도에 녹여 표현하는 것이 가장 효과적이다.\n예를 들어, 서울과 부산 인구수가 얼마나 차이가 나는지 텍스트나 표, 그래프로만 보면 그 차이를 알 수는 있지만, 두 도시가 어디에 위치해 있는지, 주변 지역과 어떤 공간적 관계를 가지고 있는지 쉽게 파악하기 어렵다. 반면 지도를 사용하면, 서울과 부산이 어디에 위치해 있는지, 각 지역 인구수가 어떻게 분포되어 있는지를 한눈에 볼 수 있다. 지도를 통해 제공되는 공간적 맥락은 텍스트나 표, 그래프만으로는 얻을 수 없는 근본적인 이해와 통찰력을 제공한다는 점에서 지도를 통한 시각화는 정보 전달과 이해에 있어서 훨씬 더 우위를 차지한다고 할 수 있다.\n\nlibrary(sf)\nlibrary(tidyverse)\nsf_use_s2(FALSE)\n\n## 지도\nkorea_map &lt;- read_sf(\"data/HangJeongDong_ver20230401.geojson\")\n\nsido_map &lt;- korea_map |&gt; \n  group_by(sidonm) |&gt; \n  summarise(geometry = sf::st_union(geometry))\n\n## 23년 7월 인구수(KOSIS) 행정구역별, 성별 인구수\npop_tbl &lt;- read_csv(\"data/행정구역_시군구_별__성별_인구수_20230831223248.csv\",\n         locale=locale(encoding=\"euc-kr\"), skip = 1) |&gt; \n  set_names(c(\"sidonm\", \"인구수\")) |&gt; \n  mutate(sidonm = if_else(sidonm == \"강원특별자치도\", \"강원도\", sidonm))\n\nsigo_gg &lt;- sido_map |&gt; \n  left_join(pop_tbl) |&gt; \n  ggplot() +\n    geom_sf(aes(geometry = geometry, fill = cut(인구수, 10)), show.legend = FALSE) +\n    ggrepel::geom_label_repel(aes(label = sidonm, geometry = geometry), \n                              size = 20, stat = \"sf_coordinates\") +\n    theme_void() +\n    scale_fill_brewer(palette = \"OrRd\")\n\nragg::agg_jpeg(\"images/GIS_tools.jpeg\",\n               width = 10, height = 7, units = \"in\", res = 600)\nsigo_gg\ndev.off()",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>문서 구성요소</span>"
    ]
  },
  {
    "objectID": "part_components.html#그래프",
    "href": "part_components.html#그래프",
    "title": "3  문서 구성요소",
    "section": "3.4 그래프",
    "text": "3.4 그래프\n데이터를 시각적으로 표현하는 그래프는 증거기반 문서작성에 중요한 역할을 담당한다. 데이터 시각화를 위한 그래프 생성 프로그래밍 언어는 다양한데 “방법(how)”에 초점을 둔 명령형(imperative) Processing, OpenGL, prefuse 언어 계열과 “무엇(what)”에 초점 선언형(declarative) D3, ggplot2, Protovis 등로 나뉜다. R은 통계분석을 위한 프로그래밍 언어로서 데이터 시각화에 강점을 가지고 있다.\n그래프는 복잡한 데이터나 패턴을 빠르고 명확하게 전달할 수 있는 수단이기 때문에 데이터를 시각적으로 표현하는 그래프는 증거기반 문서 작성에서 중요한 역할을 한다. 그래프를 생성하기 위한 프로그래밍 언어나 패키지는 크게 두 가지 접근 방식으로 나뉜다. 하나는 “방법(how)”에 초점을 둔 명령형(imperative) 언어로, Processing, OpenGL, prefuse 등으로 그래프 각 요소를 어떻게 표현할 것인지를 명시적으로 지시한다. 다른 하나는 “무엇(what)”에 초점을 둔 선언형(declarative) 언어로, D3, ggplot2, Protovis 등으로 무엇을 그릴 것인지를 중심으로 설계되어 있어, 사용자가 원하는 결과에 더 집중한다.\nR 언어는 통계 분석뿐만 아니라 데이터 시각화에도 강점이 있고, 크게 3가지 R 언어기반 시각화 시스템이 존재한다. Base 시각화 시스템은 R 기본 패키지에 포함되어 있는 기본적인 그래프 생성 도구다. 래티스(lattice) 시각화 시스템은 클리블랜드(Cleveland)의 격자 그래픽(Trellis Graphics)에서 영감을 받아 개발되어 특히, 다변량 데이터를 효과적으로 시각화할 수 있다. ggplot 시각화 시스템은 SPSS 윌킨스(Wilkinson)의 그래프 문법(Grammar of Graphics)에 기반하여 탄탄한 이론적 토대를 갖고 있으여 파이프 연산자를 +도 ggplot2에 도입되어 의식의 흐름에 맞춰 그래프를 생성할 수 있다는 장점이 있다.\n\n\n\n\n\n\n\n\nBase 시스템\n\n\n\n\n\n\n\nTrellis 시스템\n\n\n\n\n\n\n\nggplot2 시스템\n\n\n\n\n\n\n그림 3.2: R 그래프 시스템\n\n\n\n팔머 관측소 펭귄 데이터를 시각화하는 예제를 통해 일반적인 데이터 시각화 구성요소와 작업흐름을 일별해보자. 데이터 시각화에 필요한 패키지(tidyverse, showtext, palmerpenguins)를 불러온다.\n그래프에 필요한 글꼴(“Nanum Pen Script”, “Jua” 글꼴)을 showtext 패키지를 사용하여 구글 폰트 사이트에서 가져와서 설치하고, 그래프 제목과 부제목 글꼴, 크기, 색상 등을 theme_quarto 테마로 설정하여 R에서 사용할 수 있도록 준비한다.\npalmerpenguins 데이터 패키지에서 팔머 관측소 펭귄 데이터프레임을 불러오고, ggplot을 사용하여 펭귄 물갈퀴 길이(flipper_length_mm)와 체질량(body_mass_g)을 x축과 y축에 각각 매핑하고, 펭귄 종(species)에 따라 색상을 다르게 표시하는 산점도를 생성하고, 그래프 제목, 부제목, x축과 y축 제목도 넣고 theme_quarto 테마도 반영하여 시각화 객체를 완성한다.\n\nlibrary(tidyverse)\nlibrary(showtext)\nlibrary(palmerpenguins)\n\nfont_add_google(\"Nanum Pen Script\", \"nanum_pen_script\")\nfont_add_google(\"Jua\", \"Jua\")\nshowtext_auto()\n\ntheme_quarto &lt;- theme(\n  text = element_text(family = 'Jua', size = 25),\n  plot.title.position = 'plot',\n  plot.title = element_text(\n    family = 'nanum_pen_script', size = 55,\n    face = 'bold', \n    colour = thematic::okabe_ito(8)[3],\n    margin = margin(t = 2, r = 0, b = 3, l = 0, unit = \"mm\")\n  ),\n  plot.subtitle = element_text(\n    family = 'Jua', size = 25,\n    face = 'bold', \n    colour = thematic::okabe_ito(8)[5],\n    margin = margin(t = 0, r = 0, b = 0, l = 0, unit = \"mm\")\n  )\n  \n)\n\ntheme_set(theme_minimal() + theme_quarto)\n\nmass_flipper &lt;- ggplot(data = penguins,\n                       aes(x = flipper_length_mm,\n                           y = body_mass_g,\n                           color = species)) +\n  geom_point(size = 3,\n             alpha = 0.8) +\n  labs(title = \"팔머 관측소 LTER 서식 펭귄 크기\",\n       subtitle = \"Adelie, Chinstrap, Gentoo 펭귄에 대한 물갈퀴 길이와 체질량\",\n       x = \"물갈퀴 길이(Flipper length) (mm)\",\n       y = \"체질량(Body mass) (g)\")\n\nmass_flipper",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>문서 구성요소</span>"
    ]
  },
  {
    "objectID": "part_components.html#표",
    "href": "part_components.html#표",
    "title": "3  문서 구성요소",
    "section": "3.5 표",
    "text": "3.5 표\n문서에 표를 넣게 되면 정보를 효과적으로 요약할 뿐만 아니라 가독성을 높이는 중요한 커뮤니케이션 도구 중 하나다. 마크다운(Markdown), gt 패키지, 라텍는 자료를 표 형식으로 표현할 때 각각의 장점이 있다. 마크다운은 기본적이며 간단한 방법으로, 복잡한 설치나 추가 패키지 없이도 빠르게 내용에 충실한 기본표를 작성할 수 있다. gt 패키지는 그래프 문법을 참고하여 표문법을 충실히 준수하며 데이터에 기반한 표제작에 필요한 거의 모든 기능을 제공한다. 라텍는 가장 전문적인 표를 만들 수 있는 도구로, 논문이나 학술 자료에 적합한 고품질의 표를 제작하는데 유용하다.\n\n\n\n표제작 세가지 방식\n\n\n\n3.5.1 마크다운 표\nmtcars 데이터프레임에서 시연목적으로 관측점 5개와 열 4개를 뽑아내서 kable()함수에 넣고 출력형식을 markdown으로 지정한다. markdown외에도 html, pandoc, latex, rst등으로 출력형식을 지정할 수 있다.\n\n\n\nlibrary(tidyverse)\nlibrary(knitr)\n\nmtcars %&gt;% \n  sample_n(5) %&gt;% \n  select(mpg, cyl, disp) %&gt;% \n  kable(\"markdown\")\n\n\n\n\n\n\n\n\n\n\nmpg\ncyl\ndisp\n\n\n\n\nMerc 450SL\n17.3\n8\n275.8\n\n\nAMC Javelin\n15.2\n8\n304.0\n\n\nMerc 450SE\n16.4\n8\n275.8\n\n\nHornet Sportabout\n18.7\n8\n360.0\n\n\nValiant\n18.1\n6\n225.0\n\n\n\n\n\n\n\n\n\n3.5.2 gt\n그래프 문법(grammar of graphics)처럼 표 문법(grammar of table) gt 팩키지가 등장했다. 표를 분해하면 다음과 같고 이를 tibble 혹은 데이터프레임을 입력받아 GT 객체로 변환시킨 후에 GT 표를 HTML로 출력하는 작업흐름을 갖는다.\n\n\n\n표 해부도\n\n\ngt 팩키지에 내장된 exibble 데이터셋은 \\(8 \\times 9\\) 구조를 갖는 단순한 데이터셋이지만 표와 관련된 다양한 형태를 개발에 사용할 주요한 정보를 담고 있다. 1\n\n\n\nlibrary(gt)\n\nmtcars %&gt;% \n  sample_n(5) %&gt;% \n  select(mpg, cyl, disp) %&gt;% \n  gt() |&gt; \n  tab_header(\n    title = md(\"**mtcars** 데이터셋 표\"),\n    subtitle = md(\"디지털 글쓰기 `gt` 패키지\")\n  ) %&gt;%\n  tab_source_note(\"표제작: 한국 R 사용자회 오픈소스 소프트웨어 개발자\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nmtcars 데이터셋 표\n\n\n디지털 글쓰기 gt 패키지\n\n\nmpg\ncyl\ndisp\n\n\n\n\n10.4\n8\n472.0\n\n\n21.4\n4\n121.0\n\n\n21.4\n6\n258.0\n\n\n18.1\n6\n225.0\n\n\n22.8\n4\n140.8\n\n\n\n표제작: 한국 R 사용자회 오픈소스 소프트웨어 개발자\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.5.3 라텍 표\n라텍은 수식 뿐만 아니라 복잡하고 미려한 표도 코드를 통해 제작할 수 있다. 쿼토에서 라텍 표를 제작하기 위해서는 먼저 표제작을 위한 라텍 표코드를 준비하고, GitHub에서 팬독-필터 tarleb/parse-latex를 다음 명령어로 설치한다.\n$ quarto install extension tarleb/parse-latex\n쿼토 확장팩이 설치되면 YAML에 다음과 같이 parse-latex을 등록하여 사용한다.\n---\nfilters:\n  - parse-latex\n---\n\\(\\LaTeX\\)으로 표를 작성했지만 쿼토 문서로 HTML, PDF, 워드 등 다양한 문서에 적용할 수 있다. 즉, 표를 저자가 편한 언어로 작성하고 나머지 부분은 쿼토가 담당하기 때문에 저자는 표를 작성하는데 집중할 수 있다.\n\n\n\n\\begin{table}[h]\n\\centering\n\\begin{tabular}{|l|c|c|c|}\n\\hline\n자동차 모델 & mpg & cyl & disp \\\\\n\\hline\nLotus Europa & 30.4 & 4 & 95.1 \\\\\nMerc 230 & 22.8 & 4 & 140.8 \\\\\nFiat 128 & 32.4 & 4 & 78.7 \\\\\nPontiac Firebird & 19.2 & 8 & 400.0 \\\\\nMerc 450SL & 17.3 & 8 & 275.8 \\\\\n\\hline\n\\end{tabular}\n\\caption{mtcars 데이터셋}\n\\end{table}\n\n\n\n\n\nmtcars 데이터셋\n\n\n자동차 모델\nmpg\ncyl\ndisp\n\n\n\n\nLotus Europa\n30.4\n4\n95.1\n\n\nMerc 230\n22.8\n4\n140.8\n\n\nFiat 128\n32.4\n4\n78.7\n\n\nPontiac Firebird\n19.2\n8\n400.0\n\n\nMerc 450SL\n17.3\n8\n275.8\n\n\n\n\n\n\n\n3.5.4 표 제작 사례\n펭귄 데이터를 기반으로 gt 패키지를 사용하여 표 제목, 칼럼명, 셀값에 다양한 글꼴, 크기, 색상, 굵기를 적용한 사례가 표 3.1 에 코드로 나와 있다. 미국 웨스 앤더슨 영화 색상(Darjeeling1)을 표에 적용하고, 글꼴로 웹글꼴 구글 글꼴을 활용하여 gt 패키지로 다양한 글꼴을 적용하고, fmt_integer() 함수를 사용해서 숫자 가독성을 높이기 위해 천단위 구분자를 넣고 부가적인 디자인도 표에 적용한다.\n\nlibrary(gt)\n\nbasic_theme &lt;- function(data, ...){\n  data %&gt;% \n    tab_options(\n      column_labels.background.color = \"#F98400\",\n      table.font.size = px(12),\n      column_labels.font.size = px(20),\n      row.striping.background_color = \"#F2AD00\",\n      heading.align = \"left\",\n      heading.title.font.size = px(30)\n  )\n}\n\npalmerpenguins::penguins %&gt;% \n  select( 펭귄종=species, 섬=island, bill_length_mm, body_mass_g) %&gt;% \n  slice_sample(n = 10) %&gt;% \n  gt() %&gt;% \n    tab_header(title = md(\"팔머 펭귄 표본 **10 마리** 측정 정보\")) %&gt;% \n    tab_source_note(source_note = \"데이터: Kristen Gorman 박사와 남국 팔머 관측소(Palmer Station, Antarctica LTER)에서 수집\") %&gt;% \n    cols_label(bill_length_mm = \"부리 길이 (mm)\",\n               body_mass_g    = \"체질량 (g)\") %&gt;% \n  tab_style(\n    style = cell_text(\n      font = c(\n        google_font(name = \"Nanum Pen Script\"),\n        default_fonts()\n      ),\n      size = \"xx-large\",\n      color = \"gray35\",\n      weight = \"bolder\"\n    ),\n    locations = cells_body(columns = bill_length_mm)\n  ) %&gt;% \n  # 체질량 칼럼  ---------------\n  tab_style(\n    style = cell_text(\n      font = c(\n        google_font(name = \"Black Han Sans\"),\n        default_fonts()\n      ),\n      size = \"large\",\n      color = \"#00A08A\",\n      weight = \"bolder\"\n    ),\n    locations = cells_body(columns = body_mass_g)\n  ) %&gt;% \n  fmt_integer(body_mass_g) |&gt; \n  # 표 Header 와 첫번째 칼럼  ---------------\n  tab_style(\n    style = cell_text(\n      font = google_font(\"Do Hyeon\"), \n      size = \"large\"\n    ),\n    locations = list(\n      cells_column_labels(everything()), \n      cells_body(columns = 1)\n    )\n  ) %&gt;%   \n  # 표 제목 ---------------\n  tab_style(\n    style = cell_text(\n      font = google_font(\"Dokdo\"), \n      align = \"left\", \n      size = \"xx-large\",\n      color = \"#FF0000\"\n    ),\n    locations = cells_title(\"title\")\n  ) %&gt;%   \n  basic_theme() \n\n\n\n표 3.1: 글꼴, 색상, 서식을 반영한 표 제작 사례\n\n\n\n\n\n\n\n\n\n\n팔머 펭귄 표본 10 마리 측정 정보\n\n\n펭귄종\n섬\n부리 길이 (mm)\n체질량 (g)\n\n\n\n\nChinstrap\nDream\n50.6\n3,800\n\n\nAdelie\nDream\n40.9\n3,900\n\n\nAdelie\nTorgersen\n41.8\n4,450\n\n\nGentoo\nBiscoe\n53.4\n5,500\n\n\nGentoo\nBiscoe\n51.3\n5,300\n\n\nGentoo\nBiscoe\n46.8\n5,150\n\n\nGentoo\nBiscoe\n40.9\n4,650\n\n\nGentoo\nBiscoe\n45.8\n4,700\n\n\nGentoo\nBiscoe\n46.2\n5,300\n\n\nAdelie\nDream\n36.0\n3,100\n\n\n\n데이터: Kristen Gorman 박사와 남국 팔머 관측소(Palmer Station, Antarctica LTER)에서 수집",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>문서 구성요소</span>"
    ]
  },
  {
    "objectID": "part_components.html#웹문서",
    "href": "part_components.html#웹문서",
    "title": "\n1  문서 구성요소\n",
    "section": "\n1.5 웹문서",
    "text": "1.5 웹문서\n웹 문서 구성요소는 크게 HTML, CSS, 자바스크립트로 구분된다. HTML(HyperText Markup Language)은 웹 페이지의 기본 구조와 내용을 정의하고, 다양한 태그를 사용하여 텍스트, 이미지, 링크, 리스트, 테이블 등을 웹 페이지에 배치한다. 주요 HTML 태그로 &lt;head&gt;, &lt;body&gt;, &lt;h1&gt;, &lt;p&gt;, &lt;a&gt;, &lt;img&gt; 등을 들 수 있다. CSS(Cascading Style Sheets)는 웹 페이지 레이아웃과 디자인을 담당한다. 색상, 폰트, 여백, 정렬 등을 지정하여 웹 페이지의 외관을 꾸미는 역할을 한다. CSS는 HTML 문서 내에 &lt;style&gt; 태그를 사용하여 삽입할 수 있고, 외부 저장된 CSS 파일을 연결하여 사용할 수도 있다. 자바스크립트는 웹 페이지에 동적인 기능을 부여한다. 사용자와 상호작용, 데이터 처리, 동적인 요소 변경 등을 담당하고, HTML 문서 내에 &lt;script&gt; 태그를 사용하여 삽입할 수 있다.\n\n\n\n\n\n\n\n\n\n\n\n\n웹 문서는 HTML, CSS, 자바스크립트를 사용하여 복잡한 구조와 디자인, 인터랙티브한 요소를 제공하기 위해서 개발이 필요한 반면에 아래한글과 워드 같은 워드 프로세서는 GUI 기반 문서 편집기로 사용자가 메뉴와 버튼을 통해 쉽게 문서를 서식을 지정하여 작성한다. 마크다운은 두가지 문서 저작방식의 장점을 취해 가장 단순한 형태 텍스트 기반 마크업 언어로 특수 문자를 사용하여 서식을 지정한다.\n\n\n\n\n\n\n\n\n기능/저작 도구\n웹 문서 (HTML/CSS)\n아래한글/워드\n마크다운\n\n\n\n텍스트 입력\nHTML 태그를 사용\nGUI를 통해 입력\n일반 텍스트 입력\n\n\n서식 지정\nCSS 사용\n메뉴에서 선택\n특수 문자 사용\n\n\n이미지 삽입\n\n&lt;img&gt; 태그 사용\n드래그 앤 드롭\n\n![alt](url) 형식\n\n\n표 작성\n\n&lt;table&gt; 태그 사용\n표 메뉴 사용\n파이프(|), 하이픈(-) 사용\n\n\n하이퍼링크\n\n&lt;a&gt; 태그 사용\n하이퍼링크 메뉴 사용\n\n[text](url) 형식\n\n\n문서 구조\nHTML 태그 사용\n스타일과 목차 사용\n\n# 사용\n\n\n반응형 디자인\n미디어 쿼리 사용\n없음\n없음\n\n\n인터랙티브 요소\n자바스크립트 사용\n매크로 사용\n없음\n\n\n배포\n웹 서버 사용\n\n.hwpx 파일 배포\n\n.md 파일 저장\n\n\n접근성\nARIA 사용\n제한적\n없음",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>문서 구성요소</span>"
    ]
  },
  {
    "objectID": "part_components.html#다이어그램",
    "href": "part_components.html#다이어그램",
    "title": "3  문서 구성요소",
    "section": "3.6 다이어그램",
    "text": "3.6 다이어그램\n다이어그램(diagram, 도표)는 복잡한 정보나 개념을 단순화하고 시각적으로 표현하여 텍스트만으로 설명하기 어려운 복잡한 데이터나 구조, 관계를 명확히 전달할 수 있어 독자가 문서를 빠르고 정확하게 이해하는 데 도움을 준다. 학술 논문, 보고서, 설명서 등에 포함된 다이어그램은 문서 전문성과 신뢰성을 높혀 효과적인 커뮤니케이션을 가능하게 한다.\n다이어그램 저작 방식은 도구를 직접 사용하는 방식과 프로그래밍 언어처럼 다이어그램 전용 언어를 사용하는 방식으로 나뉜다. 잘 알려진 다이어그램 저작 도구로 마이크로소프트 비지오(Microsoft Visio), 루시드차드(Lucidchart), 드로아이오(Draw.io) 등으로 주로 GUI를 통해 다이어그램을 직관적으로 그릴 수 있고 다이어그램 전용 언어로 그래프비즈(Graphviz)와 머메이드(Mermaid)가 대표적이다. Graphviz는 DOT 언어를 사용해 다양한 네트워크 다이어그램, 플로우 차트, 조직도, 의존성 그래프를 제작하는 반면, Mermaid는 마크다운과 유사한 문법으로 웹에서 다이어그램과 차트를 생성하는 자바스크립트 라이브러리로 HTML과 자바스크립트를 사용하는 모든 웹 페이지나 앱과 쉽게 통합된다는 장점이 있다.\n챗GPT를 활용한 디지털 글쓰기 과정을 Mermaid 코드를 이용하여 다이어그램으로 표현하면 다음과 같다. 다이어그램은 글쓰기, 구조와 외양, 배포와 공유 세가지 영역에서 챗GPT가 부기장(Copilot)으로 역할을 수행하는 것을 명확히 보여준다. 디지털 글쓰기가 글감, 표, 그래프, 코드, 그림, 도형 등 다양한 요소로 구성되며, 구조와 외양에서는 문서의 구조, 서식, 레이아웃, 참조 등이 중요하고, 배포와 공유에서는 다양한 대상, 즉 독자, 저자, 기계에게 문서가 전달되는 과정을 빠르고 명확하게 이해할 수 있도록 도와준다.\n비지오 같은 유명 GUI 도구보다 다이어그램 전용 언어를 사용하게 되면 높은 수준 사용자 정의와 자동화가 가능할 뿐만 아니라 복잡한 다이어그램도 정확하게 그릴 수 있고, 코드를 재사용함으로써 시간과 비용도 절약할 수 있다. 특히, 버전 관리 시스템에 쉽게 통합할 수 있어 팀원들과 공유와 협업이 용이하다.\n\ngraph LR\n\n    chatGPT[\"챗GPT\"] --&gt; Contents\n\n    subgraph Contents[\"디지털 글쓰기\"]\n        direction LR\n        Writing[\"글감\"] --&gt; Table[\"표\"]\n        Writing --&gt; Graph[\"그래프\"]\n        Writing --&gt; Code[\"파이썬/R/SQL&lt;br&gt;코드\"]\n        Writing --&gt; Figure[\"그림\"]\n        Writing --&gt; Diagram[\"도형\"]        \n    end\n\n    chatGPT --&gt; Format\n    Contents --&gt; Format\n\n    subgraph Format[\"구조와 외양\"]\n        direction LR\n        Theme[\"구조와 외양\"] --&gt; Title[\"문서 구조\"]\n        Theme               --&gt; Formatting[\"문서 서식\"]\n        Theme               --&gt; Layout[\"문서 레이아웃\"]\n        Theme               --&gt; reference[\"문서 참조\"]\n    end\n\n    chatGPT --&gt; Deployment\n    Format --&gt; Deployment\n\n    subgraph Deployment[\"배포와 공유\"]\n        direction LR\n        Deploy --&gt; Reader[\"독자(사람)\"]\n        Deploy --&gt; Author[\"독자(저작자)\"]\n        Deploy --&gt; Machine[\"독자(기계)\"]\n    end\n\n    style chatGPT fill:#d3d3d3,stroke:#333,stroke-width:3px\n    style Contents fill:#d3d3d3,stroke:#333,stroke-width:1px\n    style Format fill:#d3d3d3,stroke:#333,stroke-width:1px\n    style Deployment fill:#d3d3d3,stroke:#333,stroke-width:1px",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>문서 구성요소</span>"
    ]
  },
  {
    "objectID": "part_components.html#수식",
    "href": "part_components.html#수식",
    "title": "3  문서 구성요소",
    "section": "3.7 수식",
    "text": "3.7 수식\n수학은 공학, 물리학, 컴퓨터 과학, 경제학 등 다양한 분야에서 중심 역할을 하는 학문으로 정확하고 명료한 수학적 표기는 매우 중요하다. 라텍은 수학적 표현을 깔끔하고 정확하게 표현할 수 있는 도구 중 하나로 라텍를 이용해 다양한 수학적 표현법을 살펴보자.\n\\(\\LaTeX\\)은 기본적인 사칙연산에서부터 지수, 삼각함수, 적분, 행렬, 그리스 문자, 무한대 등 광범위한 수학적 표현이 가능하여 전문가 느낌의 문서나 논문, 프레젠테이션에 즉시 적용할 수 있는 고급스럽고 미련한 수식표현이 가능하다.\n기본적인 덧셈과 뺄셈은 a + b = c처럼 표현할 수 있고, 복잡한 적분도 \\int_{0}^{\\infty} e^{-x^2} dx = \\frac{\\sqrt{\\pi}}{2}와 같이 명료하게 표현할 수 있을 뿐만 아니라, 행렬이나 그리스 문자도 \\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix}와 \\alpha, \\beta, \\gamma, \\Gamma, \\pi, \\Pi, \\phi, \\Phi, \\mu 등의 명령어를 통해 표현할 수 있다.\n\n기본 연산자와 수\n\n\na^2 + b^2 = c^2\n\n\\[\na^2 + b^2 = c^2\n\\]\n\n\n\n\n제곱근과 지수\n\n\n\\sqrt{a^2 + b^2} = c\n\n\\[\n\\sqrt{a^2 + b^2} = c\n\\]\n\n\n\n\n삼각함수\n\n\n\\sin^2 \\theta + \\cos^2 \\theta = 1\n\n\\[\n\\sin^2 \\theta + \\cos^2 \\theta = 1\n\\]\n\n\n\n\n적분\n\n\n\\int_{0}^{\\infty} e^{-x^2} dx = \\frac{\\sqrt{\\pi}}{2}\n\n\\[\n\\int_{0}^{\\infty} e^{-x^2} dx = \\frac{\\sqrt{\\pi}}{2}\n\\]\n\n\n\n\n행렬\n\n\n\\begin{pmatrix}\na & b \\\\\nc & d\n\\end{pmatrix}\n\n\\[\n\\begin{pmatrix}\na & b \\\\\nc & d\n\\end{pmatrix}\n\\]\n\n\n\n\n그리스 문자\n\n\n\\alpha, \\beta, \\gamma, \\Gamma, \\pi, \\Pi, \\phi, \\Phi, \\mu\n\n\\[\n\\alpha, \\beta, \\gamma, \\Gamma, \\pi, \\Pi, \\phi, \\Phi, \\mu\n\\]\n\n\n\n\n무한대\n\n\n\\lim_{{n \\to \\infty}} \\frac{1}{n} = 0\n\n\\[\n\\lim_{{n \\to \\infty}} \\frac{1}{n} = 0\n\\]\n\n\n\n\n합과 곱\nMathJax에서 줄바꿈(\\\\)이 반영되지 않아 aligned를 사용했지만,\nMathJax v4 에서 기능이 구현되어 구문이 훨씬 간결해질 것으로 보인다.\n\n\n\\begin{aligned}[t]\n\\sum_{n=1}^{\\infty} \\frac{1}{n^2} = \\frac{\\pi^2}{6} \\\\\n\\prod_{i=1}^{n} a_i = a_1 \\times a_2 \\times \\cdots \\times a_n\n\\end{aligned}\n\n\\[\n\\sum_{n=1}^{\\infty} \\frac{1}{n^2} = \\frac{\\pi^2}{6}\n\\]\n\\[\n\\prod_{i=1}^{n} a_i = a_1 \\times a_2 \\times \\cdots \\times a_n\n\\]\n\n\n이 외에도 라텍으로 더 복잡한 수식표현도 얼마든지 가능하다.",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>문서 구성요소</span>"
    ]
  },
  {
    "objectID": "part_components.html#참고문헌",
    "href": "part_components.html#참고문헌",
    "title": "3  문서 구성요소",
    "section": "3.9 참고문헌",
    "text": "3.9 참고문헌\n라텍 문서 컴파일 과정은 몇 단계에 걸쳐 이뤄진다. 먼저 xelatex 명령을 사용하여 원본 라텍 코드를 컴파일하면 .aux와 .log 파일이 생성되고, biber 또는 bibtex 명령을 실행하여 참고문헌 정보를 처리하면서 .bbl 및 .blg 파일이 생성된다. 그 다음 다시 xelatex을 두 번 실행하여 참고문헌과 인용 정보를 최종적으로 처리하고 완성된 PDF 파일이 생성된다.\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.9.1 .bib 파일\n.bib 파일은 BibTeX “서지 데이터베이스”로 쿼토, R마크다운, 주피터 노트북, 라텍 문서에서 참고문헌을 관리하는 데 사용된다. .bib 파일은 다양한 참고문헌(예: 논문, 책, 인터넷 자료 등)에 대한 메타데이터를 담고 있는데 제목, 저자, 출판일 등의 정보가 담겨있다.\n라텍으로 작성한 .tex 소스파일을 references.bib 서지 파일과 연결시켜 컴파일하여 .pdf 파일로 작업한다. 한가지 여기서 다루지 않는 사항으로 .csl 파일이 있다. .cls는 인용 스타일 언어(Citation Style Language) 파일로 XML 형식으로 작성되며, 참고문헌 서식규칙을 정의한다. 학술지, 출판사마다 각기 다른 참고문헌 스타일을 요구하기 때문에, .csl 파일에 다양한 스타일을 표현하다. 따라서, 참고문헌 콘텐츠가 담긴 .bib 파일과 참고문헌 스타일이 담긴 .cls 두파일이 멋진 참고문헌 출력을 위해 짝꿍처럼 함께 다닌다.\n다음 라텍 저작 파일은 서지 데이터가 담긴 references.bib 파일에 Kim2017과 xie2020r 두 개의 참고문헌이 들어있다.\n라텍 문서는 biblatex 패키지를 사용하여 이 references.bib 파일을 불러오고, \\cite 명령어로 특정된 참고문헌을 인용한다. 참고문헌 목록은 \\printbibliography[title=참고문헌] 명령어 출력되는데 title 옵션으로 참고문헌목록 제목을 “References”에서 “참고문헌”으로 변경하고 라텍 문서에서 인용된 참고문헌을 기본설정 .csl에 맞춰 출력한다. 만약, 특정 참고문헌 스타일을 반영하고자 한다면 라텍 파일에 .csl 파일을 지정하면 된다.\n\n\n\n.tex 소스파일\n\\documentclass{oblivoir}\n\n% 한글 글꼴 적용 ---------------------------\n\\usepackage{fontspec}\n\\setmainfont{NanumGothic} % NanumGothic 글꼴이 설치되어야 함\n\n% 참고문헌 설정 ----------------------------\n\\usepackage[backend=biber, style=numeric]{biblatex} % bibtex을 백엔드로 설정\n\\addbibresource{references.bib}\n\n\\begin{document}\n    \n    \\section{서론}\n    텍과 관련된 교육 현장에서의 활용에 대한 연구가 있습니다~\\cite{Kim2017}. \n    또한, R markdown에 대한 다양한 정보와 사용법이 소개된 책도 있습니다~\\cite{xie2020r}.\n    \n    \\printbibliography[title=참고문헌]\n    \n\\end{document}\n\n\n\n\n\n.bib 서지 파일\n@article{Kim2017,  \n    author = {김영록},  \n    title = {교육 현장에서의 텍의 활용},  \n    journal = {TeX: 조판, 그 이상의 가능성},  \n    year = {2017}\n}\n\n@book{xie2020r,  \n    title={R markdown cookbook},  \n    author={Xie, Yihui and Dervieux, Christophe and Riederer, Emily},  \n    year={2020},  \n    publisher={CRC Press}\n}\n\n\n\n\n\n\n\n\n\n그림 3.3: 서식파일 참고문헌\n\n\n\n\n\n3.9.2 영문 참고문헌\n한글이 포함된 PDF 문서를 작성할 때 디버깅은 생각보다 복잡할 수 있다. 따라서 대개는 문서 기본 구조를 영어로 먼저 정확히 작동하는지 확인한 후, 한글로 전환하여 개발을 진행한다. 아래 라텍 문서 예시에서 전체적인 내용을 파악하기 쉽도록 lipsum 패키지로 텍스트를 채웠으며, 2단 편집과 참고문헌 관리 기능을 구현했다. biblatex 패키지와 \\addbibresource{references.bib} 명령어를 사용하여 참고문헌파일을 지정하고, 본문에서 \\cite 명령어를 통해 참고문헌을 인용했다. 마지막으로 \\printbibliography 명령어로 참고문헌 목록을 출력했다.\n\n\n\\documentclass[twocolumn]{article}\n\\usepackage{lipsum} % lipsum 패키지 불러오기\n\n% 참고문헌\n\\usepackage[backend=biber]{biblatex}\n\\addbibresource{references.bib}\n\n% 문서 전문\n\\title{Two-Sided Lipsum Example}\n\\author{John Lee}\n\\date{\\today}\n\n\n\\begin{document}    \n    \n  \\maketitle\n  \n  \\section{Introduction}\n  \n  This is a citation~\\cite{dummy2023}.\n  \\lipsum[11] % 첫 번째 로렘 입숨 문단 생성  \n  \n  \\section{Main Body}\n  \\lipsum[2-3] % 2~3 번째 로렘 입숨 문단 생성\n  \n  \\section{Conclusion}\n  This is a book citation~\\cite{ipsum2021}.\n  \\lipsum[4] % 4번째 로렘 입숨 문단 생성\n\n\\printbibliography\n    \n\\end{document}\n\n\n\n\n\n\n\n\n\n그림 3.4: 영문 참고문헌 사례\n\n\n\n\n\n\n\n3.9.3 국문 참고문헌\n영문으로 작성한 작업 흐름을 그대로 이용할 수 있지만, 몇 가지 수정이 필요하다. 첫째, 영문 채우기 텍스트 패키지 ipsum을 jiwonlipsum으로 변경하여 한글 텍스트로 국문 문서임을 명확히 구성한다. 둘째, 라텍에서 한글 글꼴을 적용하지 않으면 한글 표현이 깨지거나 전혀 출력되지 않을 수 있으므로, 한글 글꼴 적용 절차를 포함한다. 참고문헌 부제목이 영문 ’Reference’에서 ’참고문헌’으로 변경하여 기본적인 한글문서 외양을 확인한다.\n\n\n\\documentclass[twocolumn]{oblivoir}\n\n% 한글 글꼴 적용 ---------------------------\n\\usepackage{fontspec}\n\\setmainfont{NanumGothic} % NanumGothic 글꼴이 설치되어야 함\n\n% 채우기 텍스트 입숨 적용 ------------------\n\\usepackage{jiwonlipsum}\n\n% 참고문헌 설정 ----------------------------\n\\usepackage[backend=biber, style=numeric]{biblatex} % biber 백엔드로 설정\n\\addbibresource{references.bib}\n\n\n% 문서의 제목, 저자, 날짜 설정\n\\title{한글 입숨 예제}\n\\author{홍길동}\n\\date{\\today}\n\n\\begin{document}    \n    \n  \\maketitle\n  \n  \\section{서론}\n  \n  참고문헌을 연구를 했습니다.~\\cite{kim2023}\n  \\jiwon[11] % 첫 번째 로렘 입숨 문단을 생성한다.\n  \n  \\section{본문}\n  또 영문 참고문헌 보고서를 연구했습니다.~\\cite{ipsum2021}\n  \\jiwon[1] % 두 번째와 세 번째 로렘 입숨 문단을 생성한다.\n  \n  \\section{결론}\n  마지막 연구했습니다.~\\cite{lee2021}\n  \\jiwon[25] % 네 번째 로렘 입숨 문단을 생성한다.\n  \n  \\printbibliography[title=참고문헌]\n    \n\\end{document}\n\n\n\n\n\n\n\n\n\n그림 3.5: 한글 참고문헌 사례",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>문서 구성요소</span>"
    ]
  },
  {
    "objectID": "part_components.html#footnotes",
    "href": "part_components.html#footnotes",
    "title": "3  문서 구성요소",
    "section": "",
    "text": "Richard Iannone (2020-04-08), “Great Looking Tables: gt (v0.2)”↩︎",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>문서 구성요소</span>"
    ]
  },
  {
    "objectID": "part_components.html#웹-문서",
    "href": "part_components.html#웹-문서",
    "title": "3  문서 구성요소",
    "section": "",
    "text": "웹문서, 워드프로세서, 마크다운 문서 기능별 비교\n\n\n\n\n\n\n\n\n기능/저작 도구\n웹 문서 (HTML/CSS)\n아래한글/워드\n마크다운\n\n\n\n\n텍스트 입력\nHTML 태그를 사용\nGUI를 통해 입력\n일반 텍스트 입력\n\n\n서식 지정\nCSS 사용\n메뉴에서 선택\n특수 문자 사용\n\n\n이미지 삽입\n&lt;img&gt; 태그 사용\n드래그 앤 드롭\n![alt](url) 형식\n\n\n표 작성\n&lt;table&gt; 태그 사용\n표 메뉴 사용\n파이프(|), 하이픈(-) 사용\n\n\n하이퍼링크\n&lt;a&gt; 태그 사용\n하이퍼링크 메뉴 사용\n[text](url) 형식\n\n\n문서 구조\nHTML 태그 사용\n스타일과 목차 사용\n# 사용\n\n\n반응형 디자인\n미디어 쿼리 사용\n없음\n없음\n\n\n인터랙티브 요소\n자바스크립트 사용\n매크로 사용\n없음\n\n\n배포\n웹 서버 사용\n.hwpx/.docx 파일 배포\n.md 파일 저장\n\n\n접근성\nARIA 사용\n제한적\n없음",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>문서 구성요소</span>"
    ]
  },
  {
    "objectID": "part_components.html#프로그래밍-코드",
    "href": "part_components.html#프로그래밍-코드",
    "title": "3  문서 구성요소",
    "section": "3.8 프로그래밍 코드",
    "text": "3.8 프로그래밍 코드\n엑셀은 워드, 파워포인트와 함께 마이크로소프트 오피스에서 중요한 역할을 담당한다. 엑셀은 데이터 관리와 분석을 위한 강력한 도구로, 복잡한 수치 데이터를 정리하고 분석하는 데 주로 사용되는데, 워드 문서와 통합되어 엑셀은 표, 차트, 그래프 형태로 데이터를 시각적으로 표현하여 문서 정보 전달력을 높인다. 하지만, 워드 문서에 엑셀에서 나온 산출물을 매번 사람이 직접 복사하여 붙여넣어야 하기 때문에 번거럽고 사람이 개입되기 때문에 오류의 가능성이 상존한다.\n쿼토의 장점은 지난 10년간 R마크다운을 통해 입증되었다. 즉, 쿼토는 차세대 R마크다운이라는 별명이 붙어있는데 쿼토가 R마크다운의 장점을 계승하면서도 더 많은 기능을 추가했을 뿐만 아니라 R마크다운의 경험을 바탕으로 더 나은 사용자 경험을 제공한다. R마크다운이 R언어 지원에 방점을 뒀다면 쿼토는 R언어를 넘어서 파이썬, SQL, 줄리아, 자바스크립트 등 다양한 언어를 지원한다.\n사인 곡선을 그리는 파이썬 코드를 작성해보자. 먼저 그래프 그리는 역할을 담당하는 matplotlib 패키지를 로드하고, 사인 함수를 구현하기 위해 numpy 패키지를 이용하여 x축 데이터, sin 함수를 이용하여 y축 데이터를 생성한다. 마지막으로 plot 함수를 이용하여 그래프를 그린다. 그래프 제목과 축 제목에 한글이 들어가 한글 글꼴 설정을 추가로 해준다.\n\n\n\n파이썬 코드\n```{python}\n# 패키지\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# 한글 폰트 설정\nplt.rcParams['font.family'] = 'NanumGothic'\nplt.rcParams['axes.unicode_minus'] = False\n\n# 데이터\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# 그래프\nplt.plot(x, y)\nplt.xlabel('x 축')\nplt.ylabel('sin(x)')\nplt.title('사인 그래프')\nplt.show()\n```\n\n\n\n그래프\n\n\n\n\n\n\n\n\n\n\n\n\n동일한 기능을 파이썬 대신 R 코드로 작성한다. R 은 데이터 분석과 시각화를 위한 강력한 도구로 R을 설치하면 상당히 많은 기능이 내장함수로 포함되어 있어 별도 패키지 설치는 필요없고 바로 그래프 생성이 가능하다. R 설치할 때 포함된 seq(), sin(), plot() 함수를 이용하여 사인 곡선을 그린다.\n\n\n\nR 코드\n```{r}\n# 데이터 생성\nx &lt;- seq(0, 10, length.out = 100)\ny &lt;- sin(x)\n\n# 그래프 그리기\nplot(x, y, type = \"l\", xlab = \"x 축\", \n     ylab = \"sin(x)\", main = \"사인 그래프\")\n```\n\n\n\n그래프",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>문서 구성요소</span>"
    ]
  },
  {
    "objectID": "setup_quarto.html",
    "href": "setup_quarto.html",
    "title": "1  쿼토(Quarto)",
    "section": "",
    "text": "1.1 싱글 소싱 출판저작\n데이터 과학을 비롯한 과학기술 분야 출판저작이 다른 분야와 약간 다를 수 있지만, 출판의 기본적인 접근 방식은 대체로 유사하다고 볼 수 있다. 특히, 싱글 소싱(Single Sourcing)1 방식을 통해 콘텐츠 저작부터 디자인, 협업, 검수, 최종 출판물 관리까지 일원화하고 자동화한다면, 중복작업과 낭비를 줄이는 동시에 재현 가능성을 높일 수 있어 과학기술 출판저작물에 있어 가장 이상적인 방법으로 평가받고 있다.\n싱글 소싱 저작 방식은 데이터, 코드, 수식, 다이어그램, 텍스트 등 다양한 저작물 구성요소를 하나의 소스에서 관리함으로써, 수정이나 업데이트가 필요할 때 일관성을 유지하면서 효율적으로 저작작업을 수행할 수 있어 연구 결과의 정확성과 신뢰성을 높이기 위한 재현가능한 글쓰기를 중시하는 과학기술 분야에서 특히 강조되고 있으며, 싱글 소싱을 통한 자동화 생산성을 중시하는 비즈니스 글쓰기에서도 점차 글로벌 표준으로 자리를 잡아가고 있다.\ngraph LR;\n    style A fill:#f9d71c,stroke:#333,stroke-width:2px;\n    style B fill:#f9d71c,stroke:#333,stroke-width:2px;\n    style C fill:#ff6b6b,stroke:#333,stroke-width:2px;\n    style J fill:#c4e17f,stroke:#333,stroke-width:2px;\n    style K fill:#c4e17f,stroke:#333,stroke-width:2px;\n    style L fill:#c4e17f,stroke:#333,stroke-width:2px;\n\n    classDef officeStyle fill:#f9d71c,stroke:#333,stroke-width:2px;\n    class AA,AB officeStyle;\n\n    A[콘텐츠 저작] --&gt; B[디자인]\n    B --&gt; C[출판]\n    \n    C --&gt; J[PDF]\n    C --&gt; K[HTML]\n    C --&gt; L[워드/한글/PPT]\n  \n   \n    J --&gt; W[논문/보고서]\n    J --&gt; X[\"(전자)책\"]\n    \n    K --&gt; Y[웹사이트/블로그]\n    K --&gt; Z[대쉬보드]\n    \n    L --&gt; AA[비즈니스 문서]\n    L --&gt; AB[과학기술 문서]",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>쿼토(Quarto)</span>"
    ]
  },
  {
    "objectID": "setup_quarto.html#작업흐름",
    "href": "setup_quarto.html#작업흐름",
    "title": "1  쿼토(Quarto)",
    "section": "1.2 작업흐름",
    "text": "1.2 작업흐름\n기존 R .Rmd 파일과 파이썬 .ipynb 파일을 .qmd 파일로 통일시킨 것은 쿼토의 주요 특징 중 하나이다. 이러한 통합은 다양한 프로그래밍 언어를 사용하는 복잡한 작업 흐름을 단순화시킬 수 있고 협업을 촉진한다. 저작자는 마크다운을 사용하여 콘텐츠를 작성하고, 프로그래밍 코드는 R, 파이썬, 자바스크립트, 줄리아 등 프로그래밍 언어로 작성한다. 텍스트와 프로그래밍 코드는 팬독(pandoc)을 통해 마크다운 변환이 자동으로 이루어지기 때문에 후속 작업에 대해 걱정할 필요가 없다. 싱글 소싱 개념이 팬독을 통해 자동화되어 원하는 저작 결과물을 효율적이고 빠르게 얻을 수 있어 저작작업 생산성을 크게 향상시키는 장점이 있다.\n\nR파이썬\n\n\n\n\n\n\n\n\n그림 1.2: 쿼토 - R\n\n\n\n\n\n\n\n\n\n\n\n그림 1.3: 쿼토 - 파이썬",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>쿼토(Quarto)</span>"
    ]
  },
  {
    "objectID": "setup_quarto.html#쿼토-해부",
    "href": "setup_quarto.html#쿼토-해부",
    "title": "1  쿼토(Quarto)",
    "section": "1.3 쿼토 해부",
    "text": "1.3 쿼토 해부\n쿼토는 데이터 과학 문서 작성의 새로운 패러다임을 제시하며, R마크다운의 후속임을 자처하고 있다. 10년 이상의 knitr 경험을 바탕으로 개발되었고, 최근에는 RStudio Visual 편집 기능을 통해 위지위그(What You See Is What You Get) 패러다임도 적극 수용함으로써 저작자는 복잡한 코드 작성 없이도 직관적으로 문서를 작성할 수 있게 되었다.\n쿼토는 다양한 통합개발환경(IDE)과 호환성을 지원하고 있다. R 사용자는 RStudio IDE를, 파이썬 경험이 풍부한 사용자는 파이참, 범용 소프트웨어 개발 경험을 가지신 분은 VS코드, 이맥스/VIM 등과 통합하여 사용할 수 있고, 쿼토 CLI를 통해 IDE에서 쉽게 저작물을 다양한 형태로 출판할 수 있다.\n쿼토는 다양한 프로그래밍 언어를 지원하여 문서 내에 계산(Computation) 기능을 쉽게 통합할 수 있는 현존하는 얼마 안되는 문학적 프로그래밍 저작도구다. R, 파이썬, SQL, 자바스크립트 등을 활용해 그래프, 표, 다이어그램, 인터랙티브 산출물을 문서에 반영하여 한층 진화된 디지털 문서 저작을 지원한다.\n쿼토는 데이터 과학자, 개발자, 과학기술 연구원, 사무노동자 등 다양한 분야의 종사자분들로부터 챗GPT 인공지능 시대 자동화를 통한 사무업무 생산성 도구로 자리매김하고 있다.\n\n\n\n\n\n\n그림 1.4: 쿼토 작업흐름\n\n\n\n쿼토 저작은 메타데이터(전문, front matter), 텍스트, 코드라는 세 가지 주요 구성요소로 이뤄진다. 쿼토는 문학적 프로그래밍과 자동화 패러다임을 적극 반영하여 데이터 과학 프로그래밍과 과학기술 문서 작성을 더 효율적이고 일관된 방식으로 저작하고 출판할 수 있도록 지원한다.\n\n메타데이터 (YAML): YAML은 “YAML Ain’t Markup Language”의 약자로, 데이터를 구조화하는 언어이다. 쿼토에서 이를 활용하여 문서 전문(Front Matter)을 구성한다. 문서 상단에 위치하며 문서 제목, 작성자, 날짜, 문서 형식 등을 포함하며 문서의 전반적인 설정과 구성을 담당한다.\n텍스트 (마크다운): 마크다운은 2004년에 아론 스워츠와 존 그루버에 의해 개발된 언어로, HTML과 같은 복잡한 마크업 언어 대신 사용되는 간단한 형식의 문서 작성 도구다. 복잡한 디자인보다 콘텐츠 구조와 의미에 중점을 두기 때문에, 문서 저작자는 외양보다 내용에 더 집중할 수 있다.\n코드 (knitr, jupyter): knitr는 R 코드를 문서에 통합할 수 있는 패키지, jupyter는 파이썬 사용자에게 인기 있는 패키지이다. 쿼토에서는 이 두 패키지를 활용하여 작성된 코드를 문서에 포함시킬 수 있다. 데이터 분석, 통계값, 그래프, 다이어그램, 지도 등 다양한 코딩 결과물을 문서에 반영시킬 수 있다.\n\n\n\n\n\n\n\n그림 1.5: 쿼토 문서 구성요소\n\n\n\n\n1.3.1 YAML\nYAML(발음은 야믈)은 R 마크다운과 쿼토에서 주로 사용되는 경량언어다. YAML은 문서 전문(front matter) 부분에 위치해 코드와 텍스트로 구성된 문서 본문보다 먼저 위치하며, 문서 메타데이터를 설정하는 역할을 수행한다. 쿼토에서 YAML을 이용해 문서 제목, 작성자, 날짜, 문서 형식, 레이아웃 등을 정의한다. YAML은 키와 값이 콜론(:)으로 구분되는 키값(key-value) 쌍을 사용해 각종 문서 설정정보를 표현하여 전반적인 문서 설정과 구성을 쉽게 관리한다.\n\n\n\n\n키값 쌍\n---\nkey: value\n---\n\n\n\n\n\n문서출력형식 PDF 지정\n---\nformat: pdf\n---\n\n\n\nYAML을 이용한 문서 전문 작성은 가독성이 뛰어나 읽고 이해하기 쉽다는 장점이 있다. 특히 복잡한 문서 구조나 설정을 지정할 때 유용하며, 중첩된 선택옵션 같은 복잡한 구조도 들여쓰기를 통해 명확하게 표현할 수 있다. YAML은 재사용성이 뛰어나서 같은 설정 값을 여러 곳에서 사용해야 할 경우, 하나의 YAML 파일만 수정하면 모든 곳에 적용될 수 있어 시간과 노력을 크게 절약할 수 있다. 텍스트 기반인 만큼 Git과 같은 버전 제어 시스템과도 잘 통합되어, 여러 저자가 공동으로 작업할 때 진가를 발휘하지만, 들여쓰기에 민감하여 실수로 공백을 잘못 넣었을 경우 오류가 발생할 수 있어 주의가 필요하다.\nYAML은 기본적으로 KEY: Value 형태로 구성되어 있지만, 이러한 단순한 구조 덕분에 매우 편리하고 유용하다. YAML을 통한 문서 저작을 경험하게 되면 YAML의 편리성과 유용함을 더 깊게 이해하게 된다.\n\n\n\nCLI PDF 지정\n$ quarto render document.qmd --to pdf\n\n\n\n\n\nYAML 문서형식 PDF\n---\nformat: pdf\n---\n\n\n\nquarto render 명령을 사용하여 document.qmd 파일을 HTML 형식으로 제작하는 예시에서 CLI 옵션 -M code fold:true을 사용하여 코드 섹션을 접을 수 있게 만들었다. 이러한 설정을 YAML로 바꾸면, 설정 파일 내에 format 섹션을 생성하고 그 안에 html을 정의한다. 그 후, html 포맷 설정에 목차 생성(toc: true)과 코드 접기 기능(code-fold: true)을 추가한다.\nCLI 옵션을 직접 입력하는 것과 비교하여 YAML 파일에 설정을 담는 것이 훨씬 깔끔하고 우아하다. CLI에서 많은 선택옵션을 직접 입력하면 명령어가 길어져 가독성이 떨어지고, 나중에 어떤 옵션을 사용했는지 확인하기 어렵다. 하지만 YAML 파일을 사용하면, 모든 설정을 한 곳에서 명확하게 관리할 수 있어 유지보수가 쉽고, 공동 저작자들과 공유와 협업에도 유리하다.\n\n\n\nCLI 코드접기\n$ quarto render document.qmd --to html -M code fold:true\n\n\n\n\n\nYAML 코드접기\n---\nformat: \n  html:\n    toc: true\n    code-fold: true\n---\n\n\n\n\n1.3.2 탭 자동완성\nRStudio나 VSCode와 같은 통합개발환경(IDE)에서 제공하는 탭-자동완성(Tab Completion) 기능은 YAML 전문코드를 작성할 때 매우 유용하다. 이 기능을 사용하면, 저작자는 첫 글자나 몇몇 글자를 타이핑한 후에 탭 키를 눌러 가능한 모든 명령어, 변수, 함수 이름 등을 볼 수 있다. 이로 인해 오타의 가능성이 줄어들고 문서 저작 속도가 향상된다. 특히 RStudio에서는 Ctrl + space 단축키를 사용하여 YAML 전문코드를 작성할 때 가능한 키값을 선택할 수 있는 목록을 제공한다. 이러한 기능은 문서 저작 과정을 효율적으로 만들어 준다.\n\n\n\n\n\n\n\n\nYAML 키 설정\n\n\n\n\n \n\n\n\n\n\n탭 자동완성 선택확정\n\n\n\n\n\n\n그림 1.6: RStudio YAML 자동완성",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>쿼토(Quarto)</span>"
    ]
  },
  {
    "objectID": "setup_quarto.html#r-마크다운과-쿼토",
    "href": "setup_quarto.html#r-마크다운과-쿼토",
    "title": "1  쿼토(Quarto)",
    "section": "1.4 R 마크다운과 쿼토",
    "text": "1.4 R 마크다운과 쿼토\nFAQ for R Markdown Users\n쿼토는 “차세대 R 마크다운”이라는 별명에 걸맞게 R 마크다운의 다양한 패키지와 기능을 지원하고 있다. 그러나 쿼토의 개발 기간이 R 마크다운보다 상대적으로 짧기 때문에 아직은 R 마크다운의 모든 기능을 지원하지 않는다. 그럼에도 불구하고, 쿼토는 지속적으로 지원 범위를 확장하고 있으며, 고유한 기능도 추가하고 있다. 이러한 점들은 쿼토가 R 마크다운 생태계에 어떤 새로운 가치를 더하고 있는지를 잘 보여준다. 쿼토 1.4 버전에 대쉬보드(dashboards)가 추가되어 R 마크다운 기능 대부분을 지원하게 되었다. 다음 표 1.1 에서 쿼토와 R 마크다운을 다양한 문서 기능별로 비교하고 있다.\n\n\n\n표 1.1: R 마크다운과 쿼토 비교\n\n\n\n\n\n기능\nR 마크다운\n쿼토(Quarto)\n\n\n\n\n파일형식\nhtml_document / pdf_document / word_document\nhtml / pdf / docx\n\n\n비머(Beamer)\nbeamer_presentation\nbeamer\n\n\n파워포인트(PPT)\npowerpoint_presentation\npptx\n\n\n웹 슬라이드\nxaringan / ioslides / revealjs\nrevealjs\n\n\n고급 레이아웃\ntufte / distill\nQuarto Article Layout\n\n\n상호 참조\nhtml_document2 / pdf_document2 / word_document2\nQuarto Crossrefs\n\n\n웹사이트/블로그\nblogdown / distill\nQuarto Websites / Quarto Blogs\n\n\n책\nbookdown\nQuarto Books\n\n\n인터랙티브 문서\nShiny Documents\nQuarto Interactive Documents\n\n\n페이지 HTML\npagedown\n출시 예정\n\n\n학술 논문\nrticles\nQuarto Journal Articles\n\n\n대쉬보드\nflexdashboard\n\n\n\n인터랙티브 자습서\nlearnr\n계획 없음\n\n\n\n\n\n\n\n\n\n\n\n\n위지위그 vs 위지윔\n\n\n\n위지위그(WYSIWYG: What You See Is What You Get)는 “보는 대로 얻는다”는 의미로, 사용자가 문서를 편집할 때 화면에 보이는 형태가 최종 출력물과 동일하게 나오는 편집 방식이다. 대다수 현대 워드 프로세서에서 위지위그 방식을 사용하고 있다. 사용자에게 직관적이고 쉽게 접근할 수 있는 인터페이스를 제공하기 때문이다.\n그러나 위지위그 방식에도 단점은 있다. 마크다운, TeX 같은 텍스트 기반 편집 방식은 문서 호환성과 범용성을 위해 쓰이는 반면, 위지위그 저작방식은 호환성과 범용성을 다소 희생할 수 밖에 없다. 특히 복잡한 문서나 웹 페이지를 작성하는 경우, 코딩방식으로 전환하여 수작업으로 최적화를 시도하더라도 완벽한 해결이 어렵다. 예를 들어, 위지위그 편집기에서 문서를 작성하면 뒷단에 불필요한 코드나 태그가 자동으로 생성되어 문서 최적화를 방해하며, 시간이 지남에 따라 누적되어 호환성과 재현성에 심각한 문제를 야기한다. 2 3\n위지윔(WYSIWYM: What You See Is What You Mean)은 “당신이 보는 것은 당신이 뜻하는 것이다”라는 의미로, 위지위그(WYSIWYG) 방식의 한계를 극복하기 위해 나온 대안 편집 방식이다. 위지윔 방식에서는 사용자가 무엇을 의미하는지를 중점으로 두어, 본래의 코드 구조를 더 명확하게 알 수 있다. 코드 의미를 직접적으로 반영하여, 불필요한 요소 없이 효율적으로 문서를 작성할 수 있는 장점이 있다.\nRStudio의 Visual 편집 기능은 위지윔 지향점을 잘 반영하고 있다. 사용자는 복잡한 코드나 태그 없이도 의미 있는 문서 구조를 쉽게 생성하고 관리할 수 있어 문서 최적화와 호환성을 높일 수 있으며, 더욱 높은 문서 저작 생산성을 달성할 수 있다.\n오픈 소스 LaTeX 편집기인 LyX는 위지윔 방식을 초기부터 채택하여 사용자에게 코드 본래 구조와 의미를 명확하게 파악할 수 있는 인터페이스를 제공했다. 이러한 접근법은 복잡한 수식이나 과학적인 문서를 작성할 때 특히 유용하며, LaTeX 복잡성을 낮추면서도 강력한 기능을 최대한 활용할 수 함으로써 위지위그 한계를 극복했다는 평가를 받고 있다.\n\n\n\n\n\n\n\n문서 컴파일\n위지위그\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHyde, Adam. 2021. “Single Source Publishing - A investigation of what Single Source Publishing is and how this ‘holy grail’ can be achieved”. https://coko.foundation/articles/single-source-publishing.html.",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>쿼토(Quarto)</span>"
    ]
  },
  {
    "objectID": "setup_quarto.html#footnotes",
    "href": "setup_quarto.html#footnotes",
    "title": "1  쿼토(Quarto)",
    "section": "",
    "text": "“싱글 소싱(Single Sourcing)”은 하나의 원본 콘텐츠를 여러 형식이나 채널에 적용할 수 있도록 하는 문서 작성 및 관리 방법이다. 콘텐츠를 한 번만 작성하고 다양한 출력 형식(예: PDF, 웹 페이지, PPT, 모바일 앱 등)으로 변환하게 되면, 콘텐츠 일관성 유지 및 업데이트와 관리가 훨씬 효율적이다.↩︎\n위키백과, “위지위그”↩︎\n나무위키, “WYSIWYG”↩︎",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>쿼토(Quarto)</span>"
    ]
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "2  저작환경 설정",
    "section": "",
    "text": "2.1 쿼토 설치\n쿼토(Quarto) 웹사이트에서 Quarto CLI 엔진과 통합개발도구(IDE)를 설치한다. 쿼토 CLI를 지원하는 IDE는 VS Code, RStudio, Jupyter, VIM/Emacs 와 같은 텍스트 편집기가 포함된다. IDE까지 설치를 했다면 문학적 프로그래밍(literate programming)을 통해 사람이 저작하는 마크다운(Markdown)과 기계가 저작하는 프로그래밍 언어(R/Python/SQL/줄리아/자바스크립트)를 결합한 다양한 문서저작을 시작할 수 있다.",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>저작환경 설정</span>"
    ]
  },
  {
    "objectID": "setup.html#쿼토-설치",
    "href": "setup.html#쿼토-설치",
    "title": "2  저작환경 설정",
    "section": "",
    "text": "그림 2.2: 쿼토 도구모음\n\n\n\n\n2.1.1 윈도우 설치\n쿼토(Quarto)는 윈도우를 비롯하여 맥, 리눅스도 지원한다. 다른 운영체제에 쿼토를 설치하는 방법도 유사하기 때문에 윈도우를 기준으로 설치방법을 살펴보자. 윈도우 운영체제에 설치하기 위해서는 몇 가지 단계를 거쳐야 한다.\n\n\n2.1.2 쿼토 다운로드\n먼저 Quarto 공식 웹사이트에서 윈도우용 설치 파일을 다운로드한다. 웹사이트 “Download Quarto CLI” 윈도우 버전을 선택하여 다운로드한다.\n\n\n\n\n\n\n그림 2.3: 쿼토 다운로드 화면\n\n\n\n\n\n2.1.3 쿼토 설치\n다운로드한 파일을 더블클릭 실행하여 설치를 진행한다. 설치 마법사가 나타나면 지시에 따라 설치를 완료하면 된다. 설치가 완료되면 환경 변수에 쿼토 설치 경로를 등록해야 한다. ‘제어판’을 열고 ’시스템과 보안’으로 이동한 다음 ’시스템’을 선택한다. ’고급 시스템 설정’을 클릭한 후 ’환경 변수’ 버튼을 누른다. ‘시스템 변수’에서 ’Path’ 변수를 찾아 Quarto의 설치 경로를 추가한다. 일반적인 경로는 C:\\Users\\&lt;사용자계정명&gt;\\AppData\\Local\\Programs\\Quarto\\bin과 같을 수 있다.\n\n\n\n\n\n\n그림 2.4: 쿼토 설치완료\n\n\n\n\n\n2.1.4 쿼토 CLI\n마지막으로 환경 변수 설정이 올바르게 이루어졌는지 확인하기 위해 명령 프롬프트나 터미널을 열어 quarto --version 혹은 quarto --help 명령을 입력한다. 올바른 버전 번호가 출력되면 설치가 성공적으로 완료된 것이다.\n\n\n\n\n\n\n그림 2.5: 쿼토 CLI 실행화면\n\n\n\n\n\n\n\n\n\n윈도우 시스템의 경우 초기 윈도우에서 쿼토 실행명령이 quarto.cmd 이였으나 quarto.exe도 지원된다. 즉, 제어판 → 환경 변수 설정 … 에서 \"C:\\Users\\사용자명\\AppData\\Local\\Programs\\Quarto\\bin 디렉토리를 등록한 후 quarto 명령어를 사용한다.\n\nSys.which(\"quarto\")\n                                                                  quarto \n\"C:\\\\Users\\\\사용자명\\\\AppData\\\\Local\\\\Programs\\\\Quarto\\\\bin\\\\quarto.exe\"",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>저작환경 설정</span>"
    ]
  },
  {
    "objectID": "setup.html#rstudio-ide",
    "href": "setup.html#rstudio-ide",
    "title": "2  저작환경 설정",
    "section": "2.2 RStudio IDE",
    "text": "2.2 RStudio IDE\nRStudio IDE는 처음 데이터 과학 R 프로그래밍 언어를 위한 통합개발환경으로 시작하였으나 이제는 파이썬을 비롯하여 SQL, Observable JS 등 데이터 과학 전분야를 담당하고 있다. 특히, 데이터 분석, 시각화 및 문서 작업을 간편하게 할 수 있도록 다양한 도구와 기능을 제공할 뿐만 아니라, Shiny 웹 애플리케이션 개발, Plumber를 통한 API 개발, 쿼토(Quarto)/R 마크다운을 활용해 다양한 데이터 과학 산출물을 제작할 수 있다. 또한, Git 버전 관리 시스템과 통합되어 코드 이력을 쉽게 추적하고 관리할 수 있고 GitHub과 연결하여 협업기능도 지원한다. 앞서 살펴본 GitHub 부조종사(Copilot) 유료구독을 한 경우 Rstudio와 연결하여 챗GPT로 유명한 생성형 AI를 통해 텍스트 및 다양한 프로그래밍 언어로 코드를 생성할 수 있다.\n그림 2.6 에 RStudio IDE 설치과정이 나와 있다. 먼저, R 프로그래밍 언어 공식 웹사이트인 CRAN에서 R을 다운로드하여 설치한다. 그 다음, RStudio 공식 웹사이트에서 사용자의 운영 체제에 맞는 RStudio IDE 버전을 다운로드한다. 다운로드한 설치 파일을 실행하여 설치 과정을 진행하며, 일반적으로 기본 설정으로 설치하는 것이 좋다. 설치가 완료되면 RStudio를 실행하여 R과 함께 사용한다.\n\n\n\n\n\n\n그림 2.6: RStudio IDE 설치과정\n\n\n\nRStudio 코드 편집기는 자동 완성, 구문 강조, 맞춤법 검사 등 기능을 제공하여 개발자 편의를 향상시켰고, GUI 데이터 뷰어를 통해 데이터프레임과 데이터 객체를 직접적으로 시각적으로 살펴볼 수 있으며, 내장 패키지 관리 시스템을 통해 R 패키지도 손쉽게 설치하고 관리할 수 있다.\n웹앱 Shiny 애플리케이션 개발과 테스트도 가능하고, 문서화 프로그래밍을 차세대 R 마크다운 쿼토(Quarto)를 이용하여 코드, 데이터, 그래프를 하나의 문서로 통합하여 구현할 수 있을 뿐만 아니라 팬독(Pandoc)을 통해 다양한 형태 문서를 자동으로 생성할 수 있다.\n\n\n\n\n\n\n그림 2.7: RStudio 문서화 프로그래밍 사례\n\n\n\n\n2.2.1 비주얼 마크다운 편집기\n비주얼(visual) 마크다운 기능을 사용하게 되면 과학/기술 문서 작성의 용이성 뿐만 아니라 인용(Citation), 문학적 프로그래밍(literate programming) 을 통한 재현가능한 과학문서 구현, 팬독(Pandoc)을 사용하여 텍스트와 코드로 PDF, HTML, 워드 등 다양한 문서 동시 생성이 가능하다.\n\n\n\n\n\n\n그림 2.8: RStudio 비주얼 마크다운 편집기능\n\n\n\n\n\n2.2.2 단축키\n데이터 과학에서 통합개발환경(Integrated Development Environment, IDE)은 코드 기반의 제품과 서비스 개발 효율성과 효과성을 극대화에 매우 큰 기여를 한다. IDE는 코딩, 디버깅, 컴파일, 배포 등 프로그램 개발에 필요한 다양한 작업을 한 곳에서 수행할 수 있게 통합함으로써 개발자가 보다 집중하고 효율적으로 작업할 수 있는 환경을 제공한다. 단축키를 통해 개발자는 반복적인 작업을 빠르고 효율적으로 수행함으로써 전체적인 작업 속도와 생산성을 크게 높일 수 있다.\n특히, RStudio는 데이터 과학 분야에서 널리 사용되는 프로그래밍 언어인 R을 위한 특화된 통합 개발환경을 제공한다. RStudio는 R 언어 특성에 맞춰진 다양한 기능과 도구를 통합하여, 데이터 과학자와 연구자들이 데이터 분석, 시각화, 모형개발 작업을 보다 효율적으로 수행할 수 있도록 돕는다. RStudio에서 코드 작성, 편집 및 실행을 보다 빠르고 효율적으로 수행하기 위해 많이 사용되는 단축키는 다음과 같다.\n\n\n\n표 2.1: RStudio에서 자주 사용되는 단축키\n\n\n\n\n\n단축키\n윈도우\n맥\n\n\n\n\n마지막 명령어\n↑\n↑\n\n\n마지막 매칭 명령어\n^ + ↑\n⌘ + ↑\n\n\n자동 탭완성\n↹\n↹\n\n\n\n—- 실행 —-\n\n\n\n선택영역 실행\n^ + ⏎\n⌘ + ⏎\n\n\nSource\n^ + ⇧ + S\n⌘ + ⇧ + S\n\n\nSource + 메아리(Echo)\n^ + ⇧ + ⏎\n⌘ + ⇧ + ⏎\n\n\n\n—- 화면 전환 —-\n\n\n\n코딩 패널창 전환\n^ + 1\n^ + 1\n\n\n콘솔 패널창 전환\n^ + 2\n^ + 2\n\n\n\n—- 코딩 단축키 —-\n\n\n\n&lt;-\n⎇ + -\n⌥ + -\n\n\n%&gt;%\n^ + ⇧ + M\n⌘ + ⌥ + M\n\n\n주석처리\n^ + ⇧ + C\n^ + ⌥ + C\n\n\n주석제거\n^ + ⇧ + /\n^ + ⌥ + /\n\n\n실행취소\n^ + Z\n⌘ + Z\n\n\n다시 실행\n^ + ⇧ + Z\n⌘ + ⇧ + Z\n\n\n단축키 참조\n⎇ + ⇧ + Z\n⌥ + ⇧ + Z\n\n\n다중커서\n^ +⎇ + ↑\n^ + ⌥ + ↑\n\n\n\n^ +⎇ + ↓\n^ + ⌥ + ↓\n\n\n\n^ +⎇ + 클릭\n^ + ⌥ + 클릭\n\n\n\n—- 찾기 및 바꾸기 —-\n\n\n\n줄 찾아가기\n⇧ + ⎇ + G\n⌘ + ⇧ + ⌥ + G\n\n\n찾기 바꾸기\n^ + F\n⌘ + F\n\n\n파일에서 찾기\n^ + ⇧ + F\n⌘ + ⇧ + F\n\n\n모두 접기\n⎇ + O\n⌘ + ⌥ + O\n\n\n모두 펴기\n⎇ + ⇧ + O\n⌘ + ⌥ + ⇧ + O",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>저작환경 설정</span>"
    ]
  },
  {
    "objectID": "setup.html#출판-플랫폼",
    "href": "setup.html#출판-플랫폼",
    "title": "2  저작환경 설정",
    "section": "2.3 출판 플랫폼",
    "text": "2.3 출판 플랫폼\n데이터 과학 분야에서 산출물을 공유하고 출판하는 것은 매우 중요한 단계로 효과적인 출판과 비용적인 면을 고려하여 최적 플랫폼과 도구를 선정한다. 데이터 과학 분야를 개척한 RStudio IDE로 과거 R 마크다운 산출물을 RPubs에 출판한 경험이 있다면, Quarto Pub은 그와 유사한 경험을 제공한다. 다른 대안으로는 netlify, GitHub Pages, RStudio Connect 등이 있다.\n\n\n\n\n\n\n그림 2.9: 쿼토 출판",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>저작환경 설정</span>"
    ]
  },
  {
    "objectID": "setup.html#프로그래밍-언어",
    "href": "setup.html#프로그래밍-언어",
    "title": "2  저작환경 설정",
    "section": "2.4 프로그래밍 언어",
    "text": "2.4 프로그래밍 언어\n\\(\\LaTeX\\), Sweave, R마크다운을 사용한 경험이 있다면 재현가능하고 추적가능한 과학기술 문서 제작의 장점을 경험했을 것이다. 쿼토는 기존 문서 \\(\\LaTeX\\), 프로그래밍 언어 R 언어 뿐만 아니라 파이썬, 자바스크립트, 줄리아(Julia) 언어도 지원한다.\n\n2.4.1 R 언어\nR 언어를 공식 웹사이트인 CRAN에서 사용하는 운영 체제에 맞는 R 버전을 선택하여 다운로드 받는다. 그림 2.10 처럼 설치과정은 기본 옵션을 따르며, 필요에 따라 추가 옵션을 조정할 수 있다. 설치가 완료되면 R 언어만 사용할 수 있고, R 언어 전용 편집기 RStudio를 설치하고 엔진으로 방금 설치한 R 언어를 선택하면 수월하게 R 프로그래밍을 시작할 수 있다.\n\n\n\n\n\n\n그림 2.10: R 설치 과정\n\n\n\n\n\n2.4.2 파이썬\n파이썬을 설치하는 과정은 먼저 파이썬 공식 웹사이트에 접속해 운영 체제에 맞는 파이썬 설치 파일을 다운로드한다. 파이썬 버전은 RStudio에서 reticulate를 통해 검증된 파이썬 3.11 버전 사용을 권장한다. 다운로드한 설치 파일을 실행한 후, 설치 과정에서 ‘Add Python to PATH’ 옵션을 선택하는 것이 좋다. 안내에 따라 설치를 진행하면 설치를 완료할 수 있다.\n\n\n\n\n\n\n그림 2.11: 파이썬 설치 과정\n\n\n\n파이썬을 설치한 이유는 파이썬 프로그래밍 언어로 작업한 결과물을 문서에 자동으로 넣고 재현가능하고 추적가능한 과학기술 문서를 만들기 위함이다. RStudio에서 파이썬 코드를 사용하려면 코드 덩어리(code chunk)에 파이썬 코드를 넣고 다음과 같이 설치한 파이썬을 Python Interpreter에 지정한다. 바닐라 파이썬 뿐만 아니라 가상환경에서 파이썬, 콘다 환경에서 파이썬을 지정할 수 있다.\n\nTools -&gt; Global Options -&gt; Python -&gt; Python Interpreter\n\n\n\n\n\n\n\n그림 2.12: 파이썬 RStudio 연결\n\n\n\n파이썬 프로그램이 제대로 실행되는지 쿼토 문서(.qmd)를 하나 만들어 다음과 같은 파이썬 코드 덩어리를 넣고 실행해본다.\n\n\n\n\n파이썬 코드 덩어리\n```{python}\nprint(\"Hello, 파이썬!\")\n```\n\n\n\n실행 결과\n\n#&gt; Hello, 파이썬!",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>저작환경 설정</span>"
    ]
  },
  {
    "objectID": "setup.html#latex-설치",
    "href": "setup.html#latex-설치",
    "title": "2  저작환경 설정",
    "section": "2.5 \\(\\LaTeX\\) 설치",
    "text": "2.5 \\(\\LaTeX\\) 설치\n라텍(\\(\\LaTeX\\)) 설치와 사용은 처음에는 다소 복잡하게 느껴질 수 있다. 일반적으로 라텍 배포판(예: TeX Live, MiKTeX)을 설치한 뒤, 텍스트 에디터(예: TeXShop, TeXworks)를 선택하여 작업환경을 구성한다. 설치가 완료되면, .tex 파일을 생성하고 라텍 명령을 통해 PDF를 컴파일한다.\n환경변수 설정, 패키지 관리, 글꼴 설정 등 세부적인 환경설정이 필요하다. 특히 한글 문서를 처리할 경우에는 ko.TeX나 CTeX와 같은 한글을 지원하는 패키지를 별도로 설치하고 한글 글꼴도 설정해야 한다.\nTinyTeX은 TeX Live를 기반으로 한 경량, 이식성 좋고, 사용하기 쉬운 라텍 배포판으로 라텍 설치와 관련된 일반적인 불편함을 해결하기 위해 만들어졌고, 특히 “이휘 쉬에(Yihui Xie)”가 개발하여 R과 R 마크다운 통합이 잘 되어 있다.\n다른 라텍 배포판들이 수 기가바이트(GB)의 크기를 갖지만, TinyTeX은 설치 크기가 작고 간단한 설치 과정을 제공으로 쉽지만 미려한 문서를 원하는 사용자들에게 인기가 많다. 특히, R과의 통합도 잘 이루어져 있어, 라텍 문서를 컴파일할 때 누락된 라텍 패키지도 자동으로 설치해주는 기능이 많은 사랑을 받고 있다.\n보통 TexLive에 기반을 둔 tinytex 를 사용하는데 한글을 사용하는 입장에서는 kotex를 설치하는 방법도 모색이 필요하다. 유니코드 문자를 처리하기 위해서 xelatex을 쿼토 라텍 기본엔진으로 지정하면 xelatex을 통해 CJK 문자가 포함된 PDF 파일 제작이 가능하다.\n쿼토를 설치하면 quarto install tinytex 명령어로 TinyTeX을 쉽게 설치할 수 있고, 설치 정보는 quarto tools info tinytex으로 파악이 가능하다.\n$ quarto install tinytex\nInstalling tinytex\n[✓] Downloading TinyTex v2023.09\n[✓] Unzipping TinyTeX-v2023.09.tar.gz\n[✓] Moving files\n[✓] Verifying tlgpg support\n[✓] Default Repository: https://mirrors.rit.edu/CTAN/systems/texlive/tlnet/\nInstallation successful\n\n$ quarto tools info tinytex\n{\n  \"name\": \"TinyTeX\",\n  \"installed\": true,\n  \"version\": \"v2023.09\",\n  \"directory\": \"/home/statkclee/.TinyTeX\",\n  \"bin-directory\": \"/home/statkclee/.TinyTeX/bin/x86_64-linux\",\n  \"configuration\": {\n    \"status\": \"ok\"\n  }\n}\nkotex 패키지 주요 장점 중 하나는 한글 관련 문제를 해결할 수 있는 다양한 라텍 패키지와 기본 한글 글꼴을 내장하고 있어 한글 문서 작성이 훨씬 편리하다. 하지만, tinytex를 기본 라텍 엔진으로 사용할 경우, 누락된 패키지로 인해 추가 작업이 어려울 수 있다. 이러한 문제를 해결하기 위해 tinytex::parse_install() 함수를 사용하면, 오류가 발생한 텍스트를 붙여넣을 때 자동으로 필요한 패키지를 설치해 준다. 설치과정에서 오류 사항이 담긴 .log 파일을 tinytex::parse_install() 함수에 인자로 넣어주면, 자동으로 필요한 패키지를 설치해 준다.\n\n# log 파일이 hello_world.log\ntinytex::parse_install(\"hello_world.log\")\n\ntinytex::parse_install(\n  text = \"! LaTeX Error: File `titlepic.sty' not found.\"\n)\n\n\n\n\n\n\n\ntinytex 설치\n\n\n\n윈도우 환경에서 쿼토로 PDF 파일 생성할 때 다음과 같은 오류가 발생하여 로그에 기록될 경우 tinytex R 패키지를 설치하고 tinytex::install_tinytex() 명령어로 tinytex를 다시 설치한다.\nrunning xelatex - 1\n\nNo TeX installation was detected.\n\nPlease run 'quarto install tinytex' to install TinyTex.\nIf you prefer, you may install TexLive or another TeX distribution.",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>저작환경 설정</span>"
    ]
  },
  {
    "objectID": "setup.html#부조종사",
    "href": "setup.html#부조종사",
    "title": "2  저작환경 설정",
    "section": "2.6 부조종사",
    "text": "2.6 부조종사\nRStudio에서 GitHub 부조종사(Copilot) 기능을 활용할 수 있도록 저자를 포함하여 수많은 개발자들이 요청하여 2021년 11월 28일 최초 등록된 이슈(#10148)가 2023년 7월 18일 베타버전으로 Rstudio 일일 빌드 (Daily Builds)를 통해 첫 공개되었다. GitHub 부조종사(Copilot)를 Rstudio에서 사용하기 위해서는 특별한 버전 Rstudio, 즉 일일 빌드 (Daily Builds)가 필요하였으나 현재는 각자 운영체제에 맞는 RStudio Desktop 버전을 다운로드한 후 설치하게 되면 기본적으로 부조종사 기능을 사용할 수 있다. 기본적으로 GitHub 부조종사 기능은 구독서비스로 매월 일정액($10)을 지불해야 사용할 수 있다.\n\nTools -&gt; Global Options -&gt; Copilot -&gt; Enable Github Copilot\n\n설치가 완료되면 Rstudio를 실행하고 상단 메뉴에서 ‘Tools’를 선택한 다음 ’Global Options’을 클릭하면, 왼쪽 사이드바에서 ’Copilot’을 선택하고 ’Enable GitHub Copilot’ 체크박스를 선택한 다음 ’Sign In’을 클릭하고 나타나는 링크에서 인증 코드를 입력한다. ’Authorize Github Copilot Plugin’을 클릭하여 인증 과정을 완료하면 설정이 완료된다.\n\n\n\n\n\n\n그림 2.13: GitHub 부주종사 설치과정\n\n\n\nGitHub Copilot를 Rstudio에서 사용해보면, 작성하려는 코드(Ghost Text)가 회색으로 예측되어 나타난다. ‘Tab’ 키를 눌러 탭완성(Tab Completion) 기능으로 제시한 코드를 수락하여 개발을 이어간다.",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>저작환경 설정</span>"
    ]
  },
  {
    "objectID": "part_markdown.html",
    "href": "part_markdown.html",
    "title": "4  마크다운",
    "section": "",
    "text": "4.1 메타데이터(Metadata)\n마크다운으로 문서 메타데이터를 저자가 야믈(YAML) 헤더에 나타낼 수 있다. YAML 은 “Yet Another Markup Language”를 축약한 두문어지만 중요하지는 않다. YAML 헤더는 다음과 같다.\n상기 야믈(YAML) 헤더 요소는 견본(템플릿) 으로 사용되고 해당 문서에 대한 메타데이터가 정의된다.",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>마크다운</span>"
    ]
  },
  {
    "objectID": "part_markdown.html#메타데이터metadata",
    "href": "part_markdown.html#메타데이터metadata",
    "title": "4  마크다운",
    "section": "",
    "text": "---\ntitle: \"마크다운과 팬독(`pandoc`)을 활용한 과학기술문서 저작\"\nshorttitle: \"현대적인 과학기술 문서 저작\"\nauthor: 이광춘\ndate: \"2015년 7월 7일\"\n---",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>마크다운</span>"
    ]
  },
  {
    "objectID": "part_markdown.html#기본-구문",
    "href": "part_markdown.html#기본-구문",
    "title": "4  마크다운",
    "section": "4.2 기본 구문",
    "text": "4.2 기본 구문\n\n4.2.1 제목\n줄에 숫자 기호(#)를 한개부터 여섯개까지 작성해서 텍스트에 작성되는 구분 수준이 결정된다. 예를 들어, 다음 문서는 첫번째 큰 제목 두개(들어가면, 방법론)를 갖고, 방법론 제목에 중첩된 두번째 제목을 갖는다: 동적 인구 모형\n\n\n# 들어가며\n# 방법론\n## 동적 인구 모형\n\n\n\n\n\n\n\n\n\n\n\n\n4.2.2 텍스트 서식\n마크다운으로 쉽게 이탤릭, 굵게, 이탤릭 굵게 글씨체를 지정할 수 있다. (하지만, 모든 마크다운이 마지막 서식구문에 동의하지는 않는다). 글꼴에 서식 적용은 * 혹은 _을 사용해서 적용한다. 따라서 다음 명령어는 모두 동등하다:\n\n\n*이탤릭* 그리고 _이탤릭_\n**굵게** 그리고 __굵게__\n***이탤릭 굵게.*** 그리고 ___이탤릭 굵게.___\n\n\n\n 이탤릭 그리고 이탤릭  굵게 그리고 굵게  이탤릭 굵게. 그리고 이탤릭 굵게.\n\n\n\n\n4.2.3 코드\n코드는 백틱으로 텍스트를 감싸 인라인(inline) 으로 작성하거나,\n\n\n프로그램 실행은 `python helloworld.py`으로 프롬프트를 작성한다.\n\n\n\n프로그램 실행은 python helloworld.py으로 프롬프트를 작성한다.\n\n\n혹은 백틱(`) 3개나 틸드(~) 3개를 한줄씩 코드상하에 넣어 코드블록을 구분한다:\n\n\n```\n이것이\nR, 파이썬\n코드블록 입니다.\n```\n\n\n\n이것이\nR, 파이썬\n코드블록 입니다.\n\n\n코드블록 첫번째 행에, 프로그래밍 언어 를 명세하는 것도 가능하다:\n\n\n`python` 으로 언어를 명세한다:\n\n```python\nfor i in xrange(5):\n  print \"This is line \" + str(i) + \" of this useless loop.\\n\"\n```\n\n훌륭해 보입니다!\n\n\n\npython 으로 언어를 명세한다:\nfor i in xrange(5):\n  print \"This is line \" + str(i) + \" of this useless loop.\\n\"\n훌륭해 보입니다!\n\n\n\n\n4.2.4 링크\n하이퍼링크를 작성하는 방식은 두가지가 있다. 첫번째는 인라인 으로 작성하는 것으로 [텍스트](http://link.tld) 방식을 사용한다. 두번째는 명칭을 지정한 표식을 사용하는 방식이다. 예를 들어:\n\n\n이것은 [첫번째 링크], 다음은 또다른 [두번째 링크][link2] 혹은 [세번째 링크](http://link.1)\n\n[첫번째 링크]: http://link.1\n[link2]: http://link.2\n\n\n\n 이것은 첫번째 링크, 다음은 또다른 두번째 링크 혹은 세번째 링크\n\n\n명칭을 지정한 표식을 사용하는 방식에 대한 구문은 [텍스트][표식] 이 먼저 나오고 나서, [표식]: http://link 표식링크가 문서 다음에 뒤따라 나온다. [표식]이 없는 경우 [텍스트]: link 방식으로 동작하게 된다.",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>마크다운</span>"
    ]
  },
  {
    "objectID": "part_markdown.html#컴파일",
    "href": "part_markdown.html#컴파일",
    "title": "4  마크다운",
    "section": "4.3 컴파일",
    "text": "4.3 컴파일\n지금까지 작성원고는 말그대로 마크다운 자체 파일(확장자가 mkd, .markdown, .pandoc)이다. 마크다운을 뭔가 다른 것으로 변환할 필요가 있다. 대체로 PDF, 혹은 텍스트 프로세서에서 볼 수 있는 문서형식이 된다.\n\n4.3.1 팬독(pandoc) 으로 컴파일\n팬독(pandoc) 프로그램이 이런 작업을 수행하는 나름 최적의 도구다.(물론, jekyll 처럼 웹에 특화된 도구도 존재한다.) 대부분의 명령-라인 도구와 마찬가지로, pandoc은 입력값으로 파일과 일부 선택옵션 플래그를 순차적으로 받는다. pandoc을 호출하는 기본방식은 다음과 같다:\npandoc input.ext -o output.ext\n\n기본 구문\n팬독(pandoc) 아래 숨은 마술 로 입력파일이 출력 파일로 된다. 다음 경우에, 입력파일은 마크다운으로 PDF 파일을 생성하는 마술 명령어는 다음과 같다:\npandoc manuscript.md -o manuscript.pdf\n그리고 MS 워드 문서를 생성하려면 다음과 같다.\npandoc manuscript.md -o manuscript.doc\ndocx, otf는 신규 워드문서와 리브레오피스 확장자다. txt, rtf, html을 시도해보고 산출결과가 어떻게 달라지는지 살펴본다.\n\n\n\n4.3.2 견본 템플릿\n최종문서에 작성한 것을 어디에 넣을지 팬독(pandoc)은 어떻게 알 수 있을까? 다양한 견본 템플릿 이 존재하는데, 견본 템플릿에는 pandoc이 모든 요소를 어디에 넣을지 정리되어 있다. pandoc 웹사이트에서 견본 템플릿을 복사하고 변경할 수 있는 다양한 정보가 담겨있다. 구글로 바로 찾을 수 있는 재사용가능한 견본 템플릿이 상당히 많다.\n\n\n4.3.3 선택옵션 플래그\n선택옵션 플래그를 통해서 pandoc에 추가적인 인자를 전달한다. pandoc 에서 지원하는 인자가 상당히 많은데, 자세한 정보는 쉘를 열고 man pandoc 도움말을 참조하거나, 인터넷 온라인 문서를 참조한다. 본 학습에서는 참고문헌과 관련된 두가지 선택옵션 플래그에 집중한다.",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>마크다운</span>"
    ]
  },
  {
    "objectID": "part_markdown.html#고급-마크다운",
    "href": "part_markdown.html#고급-마크다운",
    "title": "4  마크다운",
    "section": "4.4 고급 마크다운",
    "text": "4.4 고급 마크다운\n학술적 논문은 단순 텍스트보다 많은 정보가 담긴다. 이번 학습에서 참고문헌, 표, 그림, 수식을 추가하는 방법을 다룬다. 기억할 한가지 중요한 점은 LaTeX 명령어가 다른 형식으로 변환할 때 (최소한 pandoc을 사용할 때 그런데, pandoc은 가장 일반적인 프로그램이다), 그대로 먹힌다는 사실이다. 이런 점이 수식 사용을 상당히 단순화시킨다.\n\n4.4.1 수식\n수식을 \\(\\LaTeX\\) 구문으로 작성할 수 있다. 예를 들어, 아래 코드 덩어리는 적법한 마크다운 구문이다:\nThe equation for a polynomial function is $y(x) = ax^2 + bx +c$.\n그리고 다음도 적법하다:\nThe sum of a vector of numbers ($\\mathbf{v}$) is noted\n\n\\begin{equation}\n\\sum_{x=1}^n\\mathbf{v}_i\n\\end{equation}\n\n\n4.4.2 표\n마크다운이 갖는 이슈중 하나는 표에 대한 지원이 미약하다는 점이다. (하지만, LaTeX 구문을 사용하는 것은 가능) 그럼에도 불구하고, 상대적으로 간단한 표를 작성하는 방법은 있다.\n|  교과목  |    담당자 |     선수 교과목 |\n|:---------|:-----------|------------------:|\n| 마크다운 | xwMOOC        | 쉘, Git, Makefiles |\n상기 구문을 적용하면 다음에 나온 표가 작성된다.\n\n\n\n교과목\n담당자\n선수 교과목\n\n\n\n\n마크다운\nxwMOOC\n쉘, Git, Makefiles\n\n\n\n표를 구성하는 요소가 몇개 있다. 첫번째 줄은 헤더 로 표제목, 두번째 줄은 정렬, 그 다음 줄이 표에 기술되는 내용물 이 된다.\n칼럼은 파이프(|) 기호로 구분한다. 파이프를 수직방향으로 정렬할 필요는 없다. (하지만, 원문서를 읽을 때 가독성을 상당히 높힌다 – 편집기 대부분에는 이런 기능을 플러그인으로 지원한다)\n기본디폴트 설정으로 칼럼은 좌측 정렬 된다. 정렬을 명세하려면, 두번째 행에 다음과 같이 : 세미콜론을 사용해서 지정한다.\n|   좌측정렬  |  중앙정렬  |    우측정렬   | 기본 설정 (좌측) |\n|:-------------|:--------:|--------------:|:---------------|\n| `:---`       |  `:--:`  |        `---:` | `----`         |\n상기 구문을 적용하면 다음에 나온 표가 작성된다.\n\n\n\n좌측정렬\n중앙정렬\n우측정렬\n기본 설정 (좌측)\n\n\n\n\n:---\n:--:\n---:\n----\n\n\n\n\n\n4.4.3 그림\n그림은 마크다운에서 잘 지원되고 있다. 표기법은 링크에 사용된 표기법을 따르지만, 느낌표(!)를 앞에 위치시킬 필요가 있다.\n예를 들어,\n![소프트웨어 카펜트리 로고](images/swc-logo-blue.png)\n상기 구문을 적용하면 다음과 같이 그림이 삽입된다.\n\n\n\n소프트웨어 카펜트리 로고\n\n\n다른 방법으로 다음과 같이 그림 삽입 구문을 작성해도 된다.\n![소프트웨어 카펜트리 로고][swc]\n[swc]: (images/swc-logo-blue.png)\nLaTeX 명령어, \\label{f:swc} 라벨을 넣은 것에 주목한다. \\autoref{f:swc}를 사용해서 텍스트에 그림을 참조하게 한다. LaTeX에 autoref 팩키지는 놀랍도록 유용한데, 참조하는 객체 유형을 식별해서, 사람이 관여하지 않고도 Fig. 1, Tab. 2, Eqn. 3, 혹은 기타 필요한 것을 자동으로 완성시킨다.\n\n\n4.4.4 참고문헌\n학술논문에 있는 최종 요건은 참고문헌이다. pandoc과 pandoc-citeproc 확장기능을 통해 마크다운이 참고문헌 기능을 매우 우아하게 처리한다. pandoc 서지관리 모듈은 다양한 형식으로부터 인용을 불러올 수 있다. 최초 CSL JSON 와 CSL YAML로 설계되어, bibtex과 RIS를 수용할 수 있다.\n참고문헌을 참조하는 방식은 인용키, @CitationKey를 이용한다. 예를 들어, (bibtex) 라이브러리에 다음 참고문헌이 담겨 있다면:\n@ARTICLE{thom99,\n    title = {The raw material for coevolution},\n    journal = {Oikos},\n    author = {Thompson, John N},\n    number = {1},\n    volume = {84},\n    year = {1999},\n    pages = {5--16},\n}\n텍스트에 @thom99 을 넣어 참조한다. 모든 참고문헌 관리 소프트웨어를 사용해서 pandoc에서 지원되는 형식 중 하나로 내보내기 한다. 인용키가 보여주는 방식을 사용자 정의에 맞추면 된다.\n참고문헌을 ([@John2012; @Jack2014])와 같이 결합할 수 있고, 인라인 으로 “저자-년도” 스타일을 지정해서 사용하고 있다면 @Doe2013 작성하게 되면 Doe (2013)와 같이 표시되고, 괄호를 사용해서 [@Doe2013]와 같이 사용하면 (Doe, 2013) 산출물을 얻게 된다. 또한, 텍스트를 추가하는 것도 가능하다: [검토를 위해 @Billy2015 참조] 와 같이 작성하면, (검토를 위해 Billy et al., 2015 참조)와 같이 나타난다. 참고문헌이 문서 끝에 자동으로 삽입된다. 저널 요건에 맞춰 서식을 바꾼 수천가지 방법이 있다.",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>마크다운</span>"
    ]
  }
]