[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "챗GPT 쿼토(Quarto)",
    "section": "",
    "text": "서문\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.\n\n1 + 1\n#&gt; [1] 2",
    "crumbs": [
      "서문"
    ]
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "2  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\n\ngraph LR\n    QMD[(\".qmd\")] --&gt;|knitr| MD[(\".md\")]\n    MD --&gt;|pandoc with Lua filters| RPT[Report]\n    MD --&gt;|pandoc with Lua filters| PRES[Presentation]\n    MD --&gt;|pandoc with Lua filters| PROJ[Projects]\n    RPT --&gt; PDF[(\".pdf\")]\n    RPT --&gt; LTX[(\".tex\")]\n    RPT --&gt; WRD[(\".docx\")]\n    PRES --&gt;|revealjs| SLIDES[(\".html\")]\n    PROJ --&gt; OTHER[(\".other\")]\n\n\n\n\n\n\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming”. Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "참고문헌",
    "section": "",
    "text": "AbdulMajedRaja. 2020. “Penguins Dataset Overview - Iris\nAlternative in r Using palmerpenguins.” Programming with\nR. https://www.programmingwithr.com/penguins-dataset-overview-iris-alternative-in-r/.\n\n\nEdwards, Anthony W Fisher. 2000. “The Genetical Theory of Natural\nSelection.” Genetics 154 (4): 1419–26.\n\n\nKB, Gorman, Williams TD, and Fraser WR. 2014. “Ecological Sexual\nDimorphism and Environmental Variability Within a Community of Antarctic\nPenguins (Genus Pygoscelis).” PLoS ONE 9(3) (e90081):\n–13. https://doi.org/10.1371/journal.pone.0090081.\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.\n\n\nLevy, Ido. 2019. “Eugenics and the Ethics of Statistical\nAnalysis.” GEORGETOWN PUBLIC POLICY REVIEW. https://gppreview.com/2019/12/16/eugenics-ethics-statistical-analysis/.",
    "crumbs": [
      "참고문헌"
    ]
  },
  {
    "objectID": "whole_game.html#챗gpt-등장",
    "href": "whole_game.html#챗gpt-등장",
    "title": "\n1  챗GPT 글쓰기 맛보기\n",
    "section": "\n1.1 챗GPT 등장",
    "text": "1.1 챗GPT 등장\n챗GPT 등장은 글쓰기 패러다임을 혁신적으로 바꾸고 있다. 전통적인 글쓰기는 문법, 어휘, 문장 구조 등 언어의 다양한 요소를 활용하여 아이디어나 메시지를 구조화하는 데 주력했고, 전통적인 글쓰기에서 저작은 종이와 펜, 출판은 워드 프로세서 도구로 필요한데, 디지털 도구에 익숙하지 않은 사람들에게는 글쓰기 자체가 큰 부담이 되었다.\n그러나 챗GPT는 뛰어난 자연어 처리 능력 덕분에 저자는 복잡한 문법이나 어휘 없이도 자신의 생각을 쉽게 표현할 수 있을 뿐만 아니라, 챗GPT는 다양한 형태의 콘텐츠, 예를 들어 수식, 표, 그래프, 다이어그램, 코드 등을 쉽게 생성하고 편집할 수 있어, 글쓰기 범위가 전통적인 텍스트를 넘어 다양한 미디어로 확장되고 있다.\n펜과 종이로 저작하여 종이 매체를 중심으로 인쇄출판이 주류를 이뤘던 시대를 워드 프로세서로 저작하여 웹사이트에 디지털 출판하는 시대로 바뀌었던 것에 비견될만큼 챗GPT는 디지털 글쓰기의 패러다임을 혁신적으로 바꾸고 있다. 챗GPT Text-to-X 기능은 글쓰기 가능성을 더욱 확장시켜 저자는 아이디어나 메시지를 표현하고 전달하는데 단순한 텍스트 입력을 넘어 수식, 그래프, 표, 다이어그램, 코드 등 다양한 형태의 콘텐츠를 쉽게 생성할 수 있게 됨에 따라, 글쓰기 경계를 훨씬 넓히게 되었다. 챗GPT 시대 누구나 복잡한 도구나 전문 지식 없이도 자신의 아이디어나 정보를 풍부하게 표현할 수 있게 되었다.",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>챗GPT 글쓰기 맛보기</span>"
    ]
  },
  {
    "objectID": "whole_game.html#글쓰기-진화과정",
    "href": "whole_game.html#글쓰기-진화과정",
    "title": "\n1  챗GPT 글쓰기 맛보기\n",
    "section": "\n1.2 글쓰기 진화과정",
    "text": "1.2 글쓰기 진화과정\n글쓰기 역사는 인류 문명과 밀접하게 연결되어 있다. 고대에는 점토판과 쐐기를 사용하여 기록을 남겼다. 중세에 이르러 필경사가 등장하고, 붓과 머루, 잉크와 깃털펜이 사용되기 시작했다. 근대에 들어서면 타자기가 등장하고, 1868년에 첫 타자기가, 1902년에 전동타자기가 개발되었다.\n컴퓨터 등장은 글쓰기 패러다임을 또 다시 바꾸었다. 1946년에 에니악 컴퓨터가, 1964년에 IBM 워드프로세서 MT/ST가 등장했다. 이후에는 IBM 저장장치 MagCards가 1969년에, TeX가 1978년에, LaTeX이 1984년 등장하면서 디지털 글쓰기 기술적 토대가 탄탄해졌다.\n1983년에 마이크로소프트 워드 1.0의 출시로 개인용 컴퓨터에서도 글쓰기가 가능해지면서 디지털 글쓰기의 새로운 시대가 열렸다. 그 후로 프로그래밍 언어와 글쓰기가 통합되기 시작했고, 마크다운, R, 파이썬 등을 활용한 글쓰기가 일반화되면서 문학적 프로그래밍(Literate Programming)이라는 새로운 형태의 글쓰기를 가능하게 했다. 최근에는 챗GPT의 등장으로 문학적 프로그래밍이 한 단계 더 진화하고 있다. 챗GPT는 자연어 처리 능력을 활용하여 코드와 텍스트, 그리고 다양한 미디어 요소를 통합적으로 다룰 수 있어, 디지털 글쓰기의 패러다임을 혁신적으로 바꾸고 있다.\n\n\n챗GPT 디지털 글쓰기 진화과정",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>챗GPT 글쓰기 맛보기</span>"
    ]
  },
  {
    "objectID": "whole_game.html#글쓰기-작업흐름",
    "href": "whole_game.html#글쓰기-작업흐름",
    "title": "\n1  챗GPT 글쓰기 맛보기\n",
    "section": "\n1.3 글쓰기 작업흐름",
    "text": "1.3 글쓰기 작업흐름\n챗GPT 디지털 글쓰기의 일반적인 작업흐름은 더 세분화할 수 있지만, “디지털 글쓰기”, “구조와 외양”, “배포와 공유”로 구분할 수 있다.\n첫 번째 단계인 “디지털 글쓰기”에서는 글감을 시작점으로 하여 다양한 형태의 콘텐츠를 생성하는데 수식, 표, 그래프, 파이썬/R/SQL 코드, 그림, 도형 등이 포함된다. 자연어로 챗GPT를 통해 다양한 저작물 구성요소를 쉽고 빠르게 생성하고 편집할 수 있다.\n두 번째 단계인 “구조와 외양”에서 문서의 전반적인 구조와 서식을 결정한다. 문서의 구조, 서식, 레이아웃, 그리고 참조 등이 확립되는데 챗GPT 부조종사(Copilot)이 유령 텍스트(Ghost Text) 기능을 통해 자연어로 저자 작업을 더욱 효율적으로 지원한다.\n마지막 단계인 “배포와 공유”에서 작성된 저작물이 독자에게 다양한 매체를 통해 전달한다. 독자가 반듯이 사람일 필요는 없고 독자가 저작자 자신일 수도 있으며, 심지어 기계일 수도 있다. 챗GPT 배포와 공유 과정에서 발생되는 다양한 기술적 문제를 해결해주는 공동 저작자이자 동료로서 디지털 글쓰기 전체적인 흐름을 완성한다.\n\n\n\n\n\ngraph LR\n\n    chatGPT[\"챗GPT\"] --&gt; Contents\n\n    subgraph Contents[\"디지털 글쓰기\"]\n        direction LR\n        Writing[\"글감\"] --&gt; Table[\"표\"]\n        Writing --&gt; Graph[\"그래프\"]\n        Writing --&gt; Code[\"파이썬/R/SQL&lt;br&gt;코드\"]\n        Writing --&gt; Figure[\"그림\"]\n        Writing --&gt; Diagram[\"도형\"]        \n    end\n\n    chatGPT --&gt; Format\n    Contents --&gt; Format\n\n    subgraph Format[\"구조와 외양\"]\n        direction LR\n        Theme[\"구조와 외양\"] --&gt; Title[\"문서 구조\"]\n        Theme               --&gt; Formatting[\"문서 서식\"]\n        Theme               --&gt; Layout[\"문서 레이아웃\"]\n        Theme               --&gt; reference[\"문서 참조\"]\n    end\n\n    chatGPT --&gt; Deployment\n    Format --&gt; Deployment\n\n    subgraph Deployment[\"배포와 공유\"]\n        direction LR\n        Deploy --&gt; Reader[\"독자(사람)\"]\n        Deploy --&gt; Author[\"독자(저작자)\"]\n        Deploy --&gt; Machine[\"독자(기계)\"]\n    end\n\n    style chatGPT fill:#f5f5f5,stroke:#333,stroke-width:3px\n\n    style Contents fill:#059fff,stroke:#333,stroke-width:1px\n    style Format fill:#fc0303,stroke:#333,stroke-width:1px\n    style Deployment fill:#03fc30,stroke:#333,stroke-width:1px",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>챗GPT 글쓰기 맛보기</span>"
    ]
  },
  {
    "objectID": "whole_game.html#챗gpt-디지털-글쓰기-사례",
    "href": "whole_game.html#챗gpt-디지털-글쓰기-사례",
    "title": "\n1  챗GPT 글쓰기 맛보기\n",
    "section": "\n1.4 챗GPT 디지털 글쓰기 사례",
    "text": "1.4 챗GPT 디지털 글쓰기 사례\n사전 자료조사를 통해서 한국영화 10선 중 국제시장과 펭귄 데이터를 통해 흥행과 동시에 현재 당면한 ESG 문제를 다룬 뭉클한 감동을 주는 영화 시놉시스 작성을 목표로 하는 저작물을 작성해보자.\n챗GPT 디지털 글쓰기를 활용하여 영화 시놉시스를 작성하는 과정은 다음과 같다.\n\n디지털 글쓰기 단계: 먼저, “국제시장”과 “펭귄 데이터”를 통해 얻은 글감을 바탕으로 영화의 주제와 구조를 설정한다. 챗GPT를 사용하여 흥행 가능성과 ESG 문제에 대한 데이터를 분석하여 표와 그래프로 시각화한다.\n구조와 외양 단계: 시놉시스 구조를 결정하고, 적절한 서식과 레이아웃을 적용한다. 문서 참조나 인용 등 챗GPT를 활용하여 자연어로 쉽게 추가할 수 있다.\n배포와 공유 단계: 작성된 시놉시스를 다양한 플랫폼과 매체를 통해 공유한다. 디지털 출판 배포과정에서 챗GPT는 기술적 문제를 해결함은 물론 방향도 제시하여 독자가 사람이든 기계든 쉽게 출판저작물에 접근할 수 있도록 지원한다.\n\n목표한 “영화 시놉시스”를 챗GPT 디지털 글쓰기로 작업한 결과물은 다음과 같이 복잡한 데이터 분석부터 감동적인 내러티브까지 한 번에 작업할 수 있다.\n\n영화 제목을 “펭귄의 꿈: ESG로 미래를 바꾸다”로 설정하고, 주인공은 한국에서 ESG 문제에 관심을 가진 젊은 연구원으로 한다. 그는 남극의 펭귄 데이터를 분석하여 지구의 미래를 예측하고, 이를 통해 사람들에게 ESG의 중요성을 알리려고 한다. 영화는 그의 여정과 성장, 그리고 마침내 세계를 바꾸는 뭉클한 결말로 끝난다.\n\n\n\n\n\n\ngraph LR\n\n    chatGPT[\"챗GPT\"] --&gt; Survey\n\n    subgraph Survey[\"자료 조사\"]\n        direction LR\n        Top10[\"한국영화&lt;br&gt;10선\"] --&gt; OpenAI[\"챗GPT\"]\n        Top10                    --&gt; Bard[\"구글 바드\"]\n        Top10                    --&gt; KOBIS[\"역대&lt;br&gt;박스오피스\"]\n    end\n\n    Survey --&gt; Synopsis\n\n    subgraph Synopsis[\"시놉시스\"]\n        direction LR\n        Movie_A[\"명량\"]     -.-&gt; New_Movie[\"새로운 영화&lt;br&gt;시놉시스\"]\n        Movie_B[\"극한직업\"] --&gt; New_Movie\n        Movie_C[\"신과함께\"] -.-&gt; New_Movie\n        Market[\"국제시장\"] --&gt; New_Movie        \n        Movie_E[\"...\"] -.-&gt; New_Movie\n        Penguins[\"펭귄 데이터\"] --&gt; New_Movie\n    end\n\n    Synopsis --&gt; Synopsis_fin[\"최종&lt;br&gt;시놉시스\"]\n\n    style chatGPT fill:#f5f5f5,stroke:#333,stroke-width:3px\n\n    style Survey fill:#059fff,stroke:#333,stroke-width:1px\n    style Synopsis fill:#fc0303,stroke:#333,stroke-width:1px\n    style Synopsis_fin fill:#03fc30,stroke:#333,stroke-width:1px\n\n    style Penguins fill:#03fc30,stroke:#333,stroke-width:3px\n    style Market fill:#03fc30,stroke:#333,stroke-width:3px\n    \n\n\n\n\n\n\n\n1.4.1 챗GPT 글감 작성\n실제 데이터가 필요한 경우 영화진흥위원회에서 매년 발표하는 “한국영화연감”의 영화별 흥행기록 역대 박스오피스 (공식통계 기준)에서 정확한 데이터를 확인할 수 있다. 챗GPT는 프롬프트에 대한 답변을 생성하는 언어 모형으로 챗GPT는 데이터베이스나 실시간 정보에 접근하지 않고 기존에 학습된 데이터를 기반으로 답변을 제공한다. 따라서, 100% 사실은 아니지만 빠르게 답변을 제공받아 시놉시스 제작에 활용하는 경우 대략 8~90% 정확도를 보이는 업무에 챗GPT 활용은 가능하다. 예를 들어, “관람객 기준으로 가장 많은 관람객을 갖는 한국 영화 상위 5개 알려주세요”라는 프롬프트에 대한 답변을 챗GPT로 받아 다음과 같이 마크다운 형태로 가공하여 후속 작업에 활용한다.\n\n\n\n\n\n\n프롬프트\n\n\n\n\n관람객 기준으로 가장 많은 관람객을 갖는 한국 영화 상위 5개 알려주세요 시놉시스는 200자 길이로 작성해주세요. 출력형식은 다음과 같은 형태로 마크다운 소스파일 형태로 출력해 주세요.\n|순위|영화명| 연도|감독|배급사|관객수|시놉시스|\n\n출력결과\n죄송합니다, 제 정보는 2021년 9월까지로 제한되어 있어서 그 이후의 데이터에 대한 정확한 정보를 제공할 수 없습니다. 그러나, 2021년 9월까지 기준으로 가장 많은 관람객을 가진 한국 영화 상위 5개는 다음과 같습니다.\n\n\n\n\n\n\n\n\n\n\n\n순위\n영화명\n연도\n감독\n배급사\n관객수\n시놉시스\n\n\n\n1\n명량\n2014\n김한민\n씨제이이앤엠\n1761만\n1592년 임진왜란, 이때 조선은 거대한 전쟁의 중심에 있었다. 여기에서 조선 최고의 장군 이순신이 일어나 대역적인 전투를 벌인다.\n\n\n2\n극한직업\n2019\n이병헌\n씨제이이앤엠\n1626만\n각종 범죄 현장에서 물리적인 고난과 위험을 감수하며 사건을 해결하는 특수 대원들의 이야기. 그러나 그들의 직업은 상상을 초월하는 극한의 직업, 치킨집 사장이었다.\n\n\n3\n신과함께-인과 연\n2018\n김용화\n롯데엔터테인먼트\n1441만\n살아있는 동안 저지른 죄에 대해 사후세계에서 재판을 받는 과정을 그린 영화. 사망 후 49일 동안 7개의 지옥에서 7번의 재판을 받아야 하는데, 이 과정을 수행하는 천사들의 이야기.\n\n\n4\n국제시장\n2014\n윤제균\n씨제이엔터테인먼트\n1426만\n한국 전쟁을 배경으로 한 영화로, 한 남자가 가족을 지키고, 살아남기 위해 펼쳐나가는 감동적인 사랑과 희망의 이야기를 담고 있다.\n\n\n5\n어벤져스: 엔드게임\n2019\n안소니 루소, 조 루소\n월트 디즈니 코리아\n1393만\n타노스에 의해 절반의 생명이 사라진 채 패배한 어벤져스. 남은 멤버들은 어떻게든 가족과 친구들을 다시 데려오기 위한 모든 것을 걸고 마지막 전투에 나선다.\n\n\n\n\n\n실제 데이터\n챗GPT는 2021년 9월까지 실제 인터넷에 공개된 데이터를 바탕으로 학습한 언어모형이다. 따라서 최신 데이터는 반영하지 못하고 과거 학습한 데이터도 모든 과거를 대표하는 것도 아니다. 잘 작성된 프롬프트를 챗GPT 언어모형과 결합하여 나온 텍스트는 100% 사실이 아니지만 대략적인 흐름을 파악하는 데는 충분하다. 영화진흥위원에서 매년 발표하는 “한국영화연감”의 영화별 흥행기록 역대 박스오피스 (공식통계 기준)에서 통계적으로 정확한 한국 영화 10개를 뽑아보면 대략 일치함을 확인할 수 있다. 시간이 지나면서 챗GPT에 대한 활용이 늘어나고 언어모형이 고도화되면 이러한 통계적인 정확도는 더욱 높아질 것으로 보인다.\n\n\n\n\n\n\n\n순위\n영화명\n개봉일\n매출액\n관객수\n국적\n배급사\n\n\n\n1\n명량\n2014-07-30\n1,357\n1,761\n한국\n(주)씨제이이엔엠\n\n\n2\n극한직업\n2019-01-23\n1,396\n1,626\n한국\n(주)씨제이이엔엠\n\n\n3\n신과함께-죄와 벌\n2017-12-20\n1,157\n1,441\n한국\n롯데쇼핑㈜롯데엔터테인먼트\n\n\n4\n국제시장\n2014-12-17\n1,109\n1,426\n한국\n(주)씨제이이엔엠\n\n\n5\n어벤져스: 엔드게임\n2019-04-24\n1,222\n1,393\n미국\n월트디즈니컴퍼니코리아\n\n\n6\n겨울왕국 2\n2019-11-21\n1,148\n1,375\n미국\n월트디즈니컴퍼니코리아\n\n\n7\n아바타\n2009-12-17\n1,284\n1,362\n미국\n해리슨앤컴퍼니,이십세기폭스코리아(주)\n\n\n8\n베테랑\n2015-08-05\n1,052\n1,341\n한국\n(주)씨제이이엔엠\n\n\n9\n괴물\n2006-07-27\n0\n1,302\n한국\n(주)쇼박스\n\n\n10\n도둑들\n2012-07-25\n937\n1,298\n한국,홍콩\n(주)쇼박스\n\n\n\n\n\n\n\n펭귄 데이터셋\n미국에서 “George Floyd”가 경찰에 의해 살해되면서 촉발된 “Black Lives Matter” 운동은 아프리카계 미국인을 향한 폭력과 제도적 인종주의에 반대하는 사회운동이다. 한국에서도 소수 정당인 정의당에서 기사로 낼 정도로 적극적으로 나서고 있다.1\n데이터 과학에서 최근 R.A. Fisher의 과거 저술한 “The genetical theory of natural selection” (Edwards 2000) 우생학(Eugenics) 대한 관점이 논란이 되면서 R 데이터 과학의 첫 데이터셋으로 그가 만들었다고 하는 붓꽃 iris 데이터를 대안적 데이터, 즉 펭귄 데이터로 대체하는 움직임이 활발히 전개되고 있다. palmerpenguins (KB, TD, 와/과 WR 2014) 데이터셋이 대안으로 많은 호응을 얻고 있다. (AbdulMajedRaja 2020), (Levy 2019) \n시놉시스 생성\n챗GPT를 활용하면 더욱 정교하고 창의적인 답변 및 콘텐츠를 제작할 수 있다. 예시로 “영화의 시놉시스와 펭귄에 관한 데이터를 결합하여 새로운 영화 시놉시스를 구성해 주세요”라는 프롬프트는 챗GPT에게 서로 다른 주제를 통합해 새로운 작품 시놉시스 제작을 지시내린다. 챗GPT는 제공된 프롬프트를 분석하고 이해한 뒤 새로운 시놉시스를 만들어 낸다. 특히 눈에 띄는 점은 챗GPT가 새로운 시놉시스를 대략 10초 이내 빠르게 생성한다는 것이다.\n\n\n\n\n\n\n프롬프트\n\n\n\n\n영화 시놉시스와 펭귄 데이터가 백틱(```)으로 감싸져 있습니다. 다음 영화 시놉시스와 데이터를 하나로 합하여 전혀 새로운 영화 시놉시스를 작성해주세요.\n```  첫번째 영화: 국제시장 \n덕수(황정민)의 가족은 흥남 철수 때 부산 국제시장에 내려온 피난민이다. 전쟁통에 아버지를 잃은 덕수는 졸지에 어머니와 두 동생의 생계를 책임지게 됐다. 동생의 학비와 생활비를 벌기 위해 자신의 꿈을 버린 채 친구 달구(오달수)와 함께 서독의 탄광으로, 베트남전으로 뛰어들어야 했던 덕수. 덕분에 사랑하는 아내 영자(김윤진)를 만날 수 있었고, 토끼 같은 자식들을 대학에 보낼 수 있었지만, 그의 인생에서 ’그’는 한번도 없었다.\n데이터: 펭귄 데이터 \n이 데이터는 미국 장기 생태 연구 네트워크의 일부인 파머 스테이션 장기 생태 연구 프로그램의 크리스틴 고먼 박사가 2007년부터 2009년까지 수집한 것입니다. 이 데이터는 환경 데이터 이니셔티브(EDI) 데이터 포털에서 직접 가져온 것으로, 팔머 스테이션 데이터 정책에 따라 CC0 라이선스(“권리 없음”)로 사용할 수 있습니다. ```\n응답\n새로운 영화 시놉시스: \n\n응답\n새로운 영화: “펭귄의 꿈”\n덕수(황정민)는 부산 국제시장에서 가족을 부양하며 살아가는 평범한 사람이었다. 그러나 그의 가족은 흥남 철수 때 피난민으로 내려온 펭귄들이었다. 덕수는 아버지를 잃은 후, 어머니와 두 동생 펭귄의 생계를 책임지게 되었다.\n덕수는 동생 펭귄들의 학비와 생활비를 벌기 위해 자신의 꿈을 포기하고, 친구 달구(오달수)와 함께 미국 장기 생태 연구 네트워크의 일부인 파머 스테이션으로 떠나게 된다. 그곳에서 그는 크리스틴 고먼 박사와 함께 2007년부터 2009년까지 펭귄 데이터를 수집하는 일을 하게 된다.\n덕수의 노력 덕분에 사랑하는 아내 영자(김윤진)와 펭귄 동생들을 대학에 보낼 수 있었다. 그러나 그의 인생에서 ’그’는 한번도 없었다. 그는 항상 펭귄들을 위해 자신을 희생하며 살아갔다. 그러나 그의 꿈은 언제나 그의 마음속에 살아있었다. 그의 꿈은 펭귄들이 자유롭게 날아다닐 수 있는 세상을 만드는 것이었다. 그의 이야기는 우리에게 희망과 용기, 그리고 사랑에 대한 진정한 의미를 가르쳐준다.\n새로운 영화: “펭귄의 꿈”\n덕수(황정민)는 부산 국제시장에서 가족을 부양하는 평범한 사람이었다. 그는 전쟁으로 아버지를 잃고, 어머니와 두 동생의 생계를 책임지며, 친구 달구(오달수)와 함께 서독의 탄광과 베트남전으로 뛰어들어야 했다. 그럼에도 불구하고 그는 사랑하는 아내 영자(김윤진)를 만나고, 자식들을 대학에 보낼 수 있었다.\n그러던 어느 날, 덕수는 크리스틴 고먼 박사의 펭귄 연구 데이터를 우연히 발견하게 된다. 이 데이터는 2007년부터 2009년까지 미국 장기 생태 연구 네트워크의 일부인 파머 스테이션에서 수집된 것이었다. 덕수는 이 데이터를 통해 펭귄들의 생태와 생활 패턴에 대해 알게 되고, 그들의 삶에 깊은 관심을 갖게 된다.\n덕수는 자신의 삶과 펭귄들의 삶을 비교하며, 그들이 겪는 어려움과 도전에 공감하게 된다. 그는 펭귄들의 삶을 이해하고 보호하려는 새로운 꿈을 갖게 되고, 그 꿈을 이루기 위해 자신의 모든 것을 바치기로 결심한다. 이제 덕수의 새로운 도전이 시작되는데…\n덕수는 펭귄들의 생태를 연구하며 그들이 겪는 환경적 위협에 대해 알게 된다. 특히, 기후 변화와 인간의 활동이 펭귄들의 서식지를 위협하고 있다는 사실에 충격을 받는다. 그는 이 문제를 해결하기 위해 자신의 모든 것을 바치기로 결심한다.\n덕수는 달구와 함께 펭귄 보호 운동을 시작한다. 그들은 펭귄들의 서식지를 보호하고, 인간의 활동이 펭귄들에게 미치는 영향을 줄이기 위한 다양한 활동을 벌인다. 이 과정에서 덕수는 자신의 삶에 새로운 의미와 목표를 찾게 된다.\n덕수의 펭귄 보호 운동은 점차 사람들의 주목을 받게 된다. 그의 노력은 많은 사람들에게 영감을 주고, 점차 많은 사람들이 펭귄 보호 운동에 참여하게 된다. 그러나 동시에, 그의 활동은 기업의 이익을 위협하며, 그에게 많은 도전과 위협을 가져다준다.\n그러나 덕수는 자신의 꿈을 포기하지 않는다. 그는 펭귄들의 삶을 보호하기 위해 끝까지 싸우기로 결심한다. 그의 노력은 결국 성공하게 되고, 펭귄들의 서식지는 보호되게 된다.\n“펭귄의 꿈”은 평범한 사람이 어떻게 자신의 꿈을 이루고, 세상을 바꿀 수 있는지를 보여주는 영화다. 이 영화는 우리에게 꿈을 이루기 위한 도전과 희생, 그리고 그 과정에서 얻는 성취와 만족감에 대해 생각하게 한다.\n영화 제목: “펭귄의 시장”\n미국 장기 생태 연구 네트워크의 일부인 파머 스테이션에서 크리스틴 고먼 박사(김윤진)는 2007년부터 2009년까지 펭귄에 대한 연구를 수행하였다. 그녀의 연구는 펭귄의 생태계와 그들의 생존 전략에 대한 깊은 이해를 제공하였다.\n한편, 부산 국제시장에서 살아가는 덕수(황정민)는 전쟁으로 아버지를 잃고, 어머니와 두 동생의 생계를 책임지게 된다. 그는 동생의 학비와 생활비를 벌기 위해 자신의 꿈을 버리고 친구 달구(오달수)와 함께 미국으로 떠나게 된다. 그의 목적지는 바로 크리스틴 박사가 연구를 수행하는 파머 스테이션이다.\n덕수는 파머 스테이션에서 일하면서 크리스틴 박사와 사랑에 빠지게 되고, 그녀의 연구에도 도움을 주게 된다. 그는 펭귄의 생존 전략을 배우며, 그것이 자신의 삶에 어떻게 적용될 수 있는지를 깨닫게 된다. 그의 인생에서 ’그’는 한번도 없었지만, 펭귄들과의 만남을 통해 그는 새로운 꿈과 희망을 찾게 된다.\n“펭귄의 시장”은 생존과 사랑, 그리고 꿈을 찾아가는 이들의 이야기를 그린다.\n영화 제목: “펭귄의 꿈”\n2007년부터 2009년까지 미국 장기 생태 연구 네트워크의 일부인 파머 스테이션에서 활동한 크리스틴 고먼 박사(김윤진)는 펭귄의 생태계에 대한 깊은 이해를 가지고 있다. 그녀의 연구는 펭귄의 생존 전략과 그들의 환경에 대한 중요한 정보를 제공한다.\n한편, 부산 국제시장에서 살아가는 덕수(황정민)는 전쟁으로 아버지를 잃고, 어머니와 두 동생의 생계를 책임지게 된다. 그는 동생들의 학비와 생활비를 벌기 위해 자신의 꿈을 포기하고, 친구 달구(오달수)와 함께 미국으로 떠나게 된다. 그의 목적지는 바로 크리스틴 박사가 연구를 수행하는 파머 스테이션이다.\n덕수는 파머 스테이션에서 일하면서 크리스틴 박사와 사랑에 빠지게 되고, 그녀의 연구에도 도움을 주게 된다. 그는 펭귄의 생존 전략을 배우며, 그것이 자신의 삶에 어떻게 적용될 수 있는지를 깨닫게 된다. 그의 인생에서 ’그’는 한번도 없었지만, 펭귄들과의 만남을 통해 그는 새로운 꿈과 희망을 찾게 된다.\n“펭귄의 꿈”은 생존과 사랑, 그리고 꿈을 찾아가는 이들의 이야기를 그린다. 이 영화는 인간의 삶과 펭귄의 생존 전략 사이의 유사성을 통해 우리 모두가 어떻게 살아가야 하는지에 대한 깊은 메시지를 전달한다.\n영화 제목: “데이터의 시장”\n덕수(황정민)는 부산 국제시장에서 가족을 부양하며 살아가는 평범한 사람이었다. 그의 가족은 흥남 철수 때 피난민으로 내려온 사람들이었다. 아버지를 잃은 후, 어머니와 두 동생의 생계를 책임지게 된 덕수는 그들의 생활비를 벌기 위해 자신의 꿈을 포기하고, 친구 달구(오달수)와 함께 미국의 데이터 연구소로 떠나게 된다.\n데이터 연구소에서 그는 크리스틴 고먼 박사와 함께 2007년부터 2009년까지 펭귄 데이터를 수집하는 일을 하게 된다. 이 과정에서 덕수는 데이터 분석의 중요성과 그것이 어떻게 세상을 바꿀 수 있는지를 깨닫게 된다.\n덕수의 노력 덕분에 사랑하는 아내 영자(김윤진)와 동생들을 대학에 보낼 수 있었다. 그러나 그의 인생에서 ’그’는 한번도 없었다. 그는 항상 가족들을 위해 자신을 희생하며 살아갔다. 그러나 그의 꿈은 언제나 그의 마음속에 살아있었다. 그의 꿈은 데이터를 통해 세상을 바꾸는 것이었다.\n“데이터의 시장”은 우리에게 희망과 용기, 그리고 사랑에 대한 진정한 의미를 가르쳐준다. 이 영화는 우리에게 자신을 희생하며 가족을 위해 살아가는 덕수의 이야기를 통해, 가족의 사랑과 헌신, 그리고 데이터의 힘에 대해 생각하게 한다.\n영화 제목: “펭귄 데이터의 미스터리”\n덕수(황정민)는 부산 국제시장에서 가족을 부양하며 살아가는 평범한 사람이었다. 그의 가족은 흥남 철수 때 피난민으로 내려온 사람들이었다. 아버지를 잃은 후, 어머니와 두 동생의 생계를 책임지게 된 덕수는 그들의 생활비를 벌기 위해 자신의 꿈을 포기하고, 친구 달구(오달수)와 함께 미국의 데이터 연구소로 떠나게 된다.\n데이터 연구소에서 그는 크리스틴 고먼 박사와 함께 2007년부터 2009년까지 펭귄 데이터를 수집하는 일을 하게 된다. 이 과정에서 덕수는 펭귄 데이터의 미스터리에 푹 빠지게 되고, 그의 일상은 갑자기 펭귄들의 세상으로 변하게 된다.\n덕수의 노력 덕분에 사랑하는 아내 영자(김윤진)와 동생들을 대학에 보낼 수 있었다. 그러나 그의 인생에서 ’그’는 한번도 없었다. 그는 항상 가족들을 위해 자신을 희생하며 살아갔다. 그러나 그의 꿈은 언제나 그의 마음속에 살아있었다. 그의 꿈은 데이터를 통해 세상을 바꾸는 것이었다.\n“펭귄 데이터의 미스터리”는 우리에게 웃음과 재미, 그리고 사랑에 대한 진정한 의미를 가르쳐준다. 이 영화는 우리에게 자신을 희생하며 가족을 위해 살아가는 덕수의 이야기를 통해, 가족의 사랑과 헌신, 그리고 데이터의 힘에 대해 생각하게 한다. 그리고 무엇보다, 펭귄 데이터의 미스터리를 풀어가는 과정에서 발생하는 유머러스한 상황들은 관객들에게 웃음을 선사할 것이다.\n\n\n\n챗GPT와 같은 거대 언어 모형(LLM)의 등장은 기존 저작과 창조적 작업에 대한 새로운 관점을 제공하며, 그 과정에서 저작자의 역할도 재평가되고 있다. 일반적으로 사람이 시놉시스나 창작물을 만들기 위해서 상당한 창의적 노력과 시간이 필요했지만 생성형 언어모형 기술에 대한 장벽이 크게 낮아짐에 따라, 빠르고 다양한 방식으로 콘텐츠를 생성할 수 있는 지평이 펼쳐지고 있다.\n이러한 변화는 단순히 작업 속도나 효율성을 높이는 것을 넘어, 기존 ‘저작자’ 개념에도 영향을 미치고 있다. 언어 모형을 활용하여 초기 아이디어나 구조를 빠르게 형성한 뒤, 이를 기반으로 사람이 더 깊고 복잡한 내용을 추가하거나 수정한다면, 새로운 형태의 공동 작업이나 협업모델이 될 것이다. 기존 저작자가 단독으로 모든 것을 창조하는 것이 아니라, 다양한 도구와 협업을 통해 더 풍부하고 다양한 저작물을 만들어낼 수 있는 새로운 길이 열리고 있다.\n\n1.4.2 구조와 외양\n챗GPT 디지털 글쓰기에서 “구조와 외양” 단계는 문서 가독성과 효과를 극대화하는 중요한 과정이다. 이 단계에서 다음과 같은 다양한 문서요소와 기능을 활용하여 저작물의 품질을 높힌다.\n\n\n마크다운 기본 글쓰기: 대중소 제목을 설정하여 문서의 구조를 명확히 한다. 굵은 글씨, 밑줄 등의 텍스트 서식과 단락 구분을 통해 내용을 강조하고 구조화한다.\n\n그림 (Figure): 복잡한 개념이나 데이터를 시각적으로 표현하여 이해를 돕는다.\n\n그래프 (Graph): 데이터 분석 결과를 시각적으로 나타내어 정보의 흐름과 패턴을 쉽게 파악할 수 있게 한다.\n\n표 (Table): 정보를 구조적으로 정리하여 한눈에 볼 수 있게 만든다.\n\n도형 (Diagrams): 프로세스나 시스템의 구조를 시각적으로 설명한다.\n\n수식 (LaTeX): 공학이나 과학 문서에서 복잡한 수학적 표현을 정확하게 나타낸다.\n\n호출 블록 (Callout Blocks): 중요한 정보나 주의사항을 강조하여 독자의 주목을 끈다.\n\n기사 레이아웃 (Article Layout): 전문적인 기사나 보고서 형식에 맞게 레이아웃을 설정한다.\n\n학술저작 (Scholarly Writing): 논문이나 학술 문서 작성에 필요한 다양한 서식과 참조 스타일을 적용한다.\n\n다단편집 (Side-by-Side Layout): 여러 내용을 병렬로 배열하여 비교와 분석을 용이하게 한다.\n\n색상과 시각적 효과: 다양한 색상과 시각적 효과를 활용하여 문서의 외관을 더욱 풍부하고 독특하게 만든다.\n\n저작물 품질을 높일 수 있는 다양한 문서요소와 기능을 모두 외우고 즉시 활용하는 것은 과거 전문적으로 인쇄출판 종사자들만이 할 수 있었던 작업이지만 챗GPT 자연어 처리 능력을 활용하여 쉽고 빠르게 적작물에 적용할 수 있는 시대가 열렸다.\n\n\n문서 구조와 문학적 프로그래밍 (쿼토)\n\n표, 그래프는 문서 구조와 문학적 프로그래밍의 중요성을 시각적으로 전달하는 중요한 매체다. R 언어 tidyverse, palmerpenguins, gt 패키지를 활용해 펭귄 데이터를 처리하고, 펭귄 종별 암수 개체수를 표로 정리하고 ’펭귄종별 암수 개체수’라는 제목과 함께 데이터 출처를 표기하는 각주까지 표에 꼼꼼히 표기했다. 그래프 예시는 R 언어 ggplot2 패키지를 사용해 펭귄 물갈퀴 길이와 체질량 사이의 관계를 그래프로 표현하고 있다. 향후 표와 그래프는 영화 시놉시스 저작물의 중요한 문서 구성요소 중 하나로 활용될 것이다.\n\n\n\n\n\n표\n\n\n\n\n\n문서 구성요소 표 사례\n\n\n펭귄종별 암수 개체수1\n\n\n\n펭귄종\n암컷\n수컷\n\n\n\n\nAdelie\n73\n73\n\n\nChinstrap\n34\n34\n\n\nGentoo\n58\n61\n\n\n\n\n1 데이터 출처: palmerpenguins 패키지\n\n\n\n\n\n그래프\n\n\n\n\n\n\n\n\n\n1.4.3 배포와 공유\n디지털 글쓰기 저작물을 완성한 후 다음 단계로 인쇄출판과 배포를 고려해야 한다. 과거와 달리 현재는 물론 앞으로 다양한 문서 저작물을 하나의 프로젝트로 엮어 전자출판을 할 수 있는 플랫폼이 필요하다. Quarto Pub은 이러한 목적으로 개발되어 저자가 작성한 다양한 문서저작물을 원클릭으로 전자출판할 수 있다. 물론 Quarto Pub 외에도 netlify, GitHub Pages, RStudio Connect 등 다른 출판배포 플랫폼도 존재한다. 플랫폼들은 각각의 특성과 장점을 가지고 있어, 저자의 필요와 목적에 따라 적절한 플랫폼을 선택하여 디지털 글쓰기 저작물을 더 넓은 독자에게 전달할 수 있다.\n최종 출판저작물 인쇄출판과 배포를 마친 후에는 저작물 공유도 고려할 수 있다. 저작물을 공유함으로써 저자는 자신의 저작물을 다른 사람들과 공유하고, 다른 사람들은 저작물을 활용할 수 있다. 저작물을 공유하는 방법은 다양하지만, 가장 쉬운 방법은 저작물을 공유할 수 있는 플랫폼에 저작물을 공유 저작권 표기를 함께 게시하는 것이다. 소스코드를 공유하면 다른 사람들이 문서 작성에 사용된 소스코드를 쉽게 이해하고, 문서 작성에 사용된 소스코드를 활용해 자신만의 향상된 저작물을 공유함으로써 글쓰기 문화를 확산시킬 수 있다.\n\n\n\n\n\ngraph LR\n\n    chatGPT[\"챗GPT\"] --&gt; Document\n\n    subgraph Document[\"문서\"]\n        direction LR\n            Contents[\"콘텐츠\"] --&gt; HTML[\"HTML 웹페이지\"] -.-&gt; Ad[\"블로그&lt;br&gt;광고\"]\n            Contents --&gt; PDF[\"PDF 문서\"] -.-&gt; Report[\"보고서&lt;br&gt;상급자\"]\n            Contents --&gt; PPT[\"PPT\"] -.-&gt; Slide[\"슬라이드&lt;br&gt;발표\"]\n    end\n\n    Document --&gt; Deploy\n\n    subgraph Deploy[\"배포\"]\n        direction LR\n        Quarto[\"Quarto Pub\"]  -.-&gt; Web_Code[\"소스코드&lt;br&gt;웹페이지&lt;br&gt;공유/협업\"]\n        GitHub[\"Github Page\"] --&gt; Web_Code\n        Netlify[\"Netlify\"]    -.-&gt; Web_Code\n        Etc[\"...\"]    -.-&gt; Web_Code\n    end\n\n    style Document fill:#f5f5f5,stroke:#333,stroke-width:3px\n    style Ad fill:#059fff,stroke:#333,stroke-width:1px\n    style Report fill:#059fff,stroke:#333,stroke-width:1px\n    style Slide fill:#059fff,stroke:#333,stroke-width:1px\n    style Deploy fill:#03fc30,stroke:#333,stroke-width:3px\n\n\n\n\n\n\n챗GPT 디지털 글쓰기를 통해 저작한 문서는 다양한 형태로 배포될 수 있다. “국제시장과 남극 펭귄”을 모티브로 삼아 제작한 다양한 영화 시놉시스 저작물은 다음과 같이 공개되어 있다.\n\n\nHTML 웹페이지: HTML 웹페이지 형식으로는 누구나 쉽게 접근하고 읽을 수 있으며, 웹 브라우저만 있으면 어디서든 열람이 가능하다.\n\nPDF 파일: PDF 파일 형식으로는 공식 문서나 보고서로 사용할 수 있으며, 물리적인 출력이 필요할 때도 유용하다.\n\nPPT 슬라이드: PPT 슬라이드 형식으로는 발표나 강의 자료로 활용할 수 있어, 다양한 상황에서 유연하게 사용할 수 있다.\n\n문서 저작을 넘어 다양한 형식으로 문서를 배포하면, 독자나 이용자가 자신에게 가장 편리한 방식으로 문서를 열람할 수 있다. 따라서 챗GPT 디지털 글쓰기는 단순히 텍스트를 생성하는 것을 넘어, 다양한 배포 채널과 형식을 통해 더 넓은 독자층에게 접근할 수 있는 장점도 크다.\n\n\n웹, 문서, PPT 슬라이드 배포\n\n\n\n\n\nAbdulMajedRaja. 2020. “Penguins Dataset Overview - iris alternative in R using palmerpenguins”. Programming with R. https://www.programmingwithr.com/penguins-dataset-overview-iris-alternative-in-r/.\n\n\nEdwards, Anthony W Fisher. 2000. “The genetical theory of natural selection”. Genetics 154 (4): 1419–26.\n\n\nKB, Gorman, Williams TD, 와/과 Fraser WR. 2014. “Ecological Sexual Dimorphism and Environmental Variability within a Community of Antarctic Penguins (Genus Pygoscelis)”. PLoS ONE 9(3) (e90081): –13. https://doi.org/10.1371/journal.pone.0090081.\n\n\nLevy, Ido. 2019. “Eugenics and the Ethics of Statistical Analysis”. GEORGETOWN PUBLIC POLICY REVIEW. https://gppreview.com/2019/12/16/eugenics-ethics-statistical-analysis/.",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>챗GPT 글쓰기 맛보기</span>"
    ]
  },
  {
    "objectID": "whole_game.html",
    "href": "whole_game.html",
    "title": "\n1  챗GPT 글쓰기 맛보기\n",
    "section": "",
    "text": "1.1 챗GPT 등장\n챗GPT 등장은 글쓰기 패러다임을 혁신적으로 바꾸고 있다. 전통적인 글쓰기는 문법, 어휘, 문장 구조 등 언어의 다양한 요소를 활용하여 아이디어나 메시지를 구조화하는 데 주력했고, 전통적인 글쓰기에서 저작은 종이와 펜, 출판은 워드 프로세서 도구로 필요한데, 디지털 도구에 익숙하지 않은 사람들에게는 글쓰기 자체가 큰 부담이 되었다.\n그러나 챗GPT는 뛰어난 자연어 처리 능력 덕분에 저자는 복잡한 문법이나 어휘 없이도 자신의 생각을 쉽게 표현할 수 있을 뿐만 아니라, 챗GPT는 다양한 형태의 콘텐츠, 예를 들어 수식, 표, 그래프, 다이어그램, 코드 등을 쉽게 생성하고 편집할 수 있어, 글쓰기 범위가 전통적인 텍스트를 넘어 다양한 미디어로 확장되고 있다.\n펜과 종이로 저작하여 종이 매체를 중심으로 인쇄출판이 주류를 이뤘던 시대를 워드 프로세서로 저작하여 웹사이트에 디지털 출판하는 시대로 바뀌었던 것에 비견될만큼 챗GPT는 디지털 글쓰기의 패러다임을 혁신적으로 바꾸고 있다. 챗GPT Text-to-X 기능은 글쓰기 가능성을 더욱 확장시켜 저자는 아이디어나 메시지를 표현하고 전달하는데 단순한 텍스트 입력을 넘어 수식, 그래프, 표, 다이어그램, 코드 등 다양한 형태의 콘텐츠를 쉽게 생성할 수 있게 됨에 따라, 글쓰기 경계를 훨씬 넓히게 되었다. 챗GPT 시대 누구나 복잡한 도구나 전문 지식 없이도 자신의 아이디어나 정보를 풍부하게 표현할 수 있게 되었다.",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>챗GPT 글쓰기 맛보기</span>"
    ]
  },
  {
    "objectID": "whole_game.html#footnotes",
    "href": "whole_game.html#footnotes",
    "title": "\n1  챗GPT 글쓰기 맛보기\n",
    "section": "",
    "text": "정환봉 기자 (2020-06-15), “여당 의원 176명 중 누가?…차별금지법 발의할 ’의인’을 구합니다”, 한겨레 신문↩︎",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>챗GPT 글쓰기 맛보기</span>"
    ]
  },
  {
    "objectID": "part_about_book.html",
    "href": "part_about_book.html",
    "title": "\n6  책과 문서구조\n",
    "section": "",
    "text": "6.1 책 외부명칭\n책에 대한 한국어 표준용어를 정확하게 이해하기 위해서 국가기술표준원에서 발표한 “책의 명칭 및 편집 일반 용어”를 참조할 수 있다. 책과 관련된 다양한 용어와 그 의미를 명확하게 표준 문서에 설명되어 있어 책을 이해하고 분석하는 데 도움이 된다.\n“책의 명칭 및 편집 일반 용어”에서 PDF 파일에서 표를 직접 추출할 경우, 표 형태가 뭉개져 제대로 사용할 수 없는 경우, PDF 파일을 워드 파일로 변환한 후에 표를 추출하는 방법을 사용할 수 있다. 워드 파일로 변환한 후에는 officer 패키지를 사용하여 표를 추출하면 표 형태를 보존하면서 데이터를 정확하게 추출할 수 있다. 워드 파일에서 표 뿐만 아니라 이미지도 추출할 수 있다. 이미지를 추출하는 방식은 워드 파일 압축을 풀면 된다. 예를 들어 PDF 파일을 변환시킨 KSX0003_20091228.docx 파일에서 확장자를 바꿔 KSX0003_20091228.zip와 같이 변경시킨 후에 압축을 풀다. 그러면 압축이 풀린 word/media 디렉토리에 이미지가 별도 저장된다. 책 외부명칭은 표 6.1 에서 확인할 수 있다.\n표 6.1: 책 외부명칭\n\n\n\n\n\n\n\n순\n용 어\n대응 영어\n용어 정의\n\n\n\n1\n앞표지\nfront cover\n책의 맨 겉장. 속장을 보호하기 위해 책 바깥쪽 앞뒤에 붙여 놓은 것으로, 본문보다 두꺼운 용지를 쓰며, 뒤의 표지는 뒤표지.\n\n\n2\n표제\ntitle\n책의 본문 전체 내용을 압축, 상징적으로 앞표지 등에 표시한 제목.\n\n\n3\n책섶\ngusset\n책의 등쪽 제본 재료를 앞표지까지 연결하여 표지를 단단하게 받쳐주도록 한 부분.\n\n\n4\n모서리\ncorner\n앞표지의 상하 귀퉁이. 양장본에서는 천이나 가죽을 표지 양 끝 모서리에 삼각형으로 붙여 표지를 보호하는 기능을 함.\n\n\n5\n표지턱\nsquare\n책 본문 속장과 표지 앞마구리 및 위·아래쪽에 튀어나온 난간 부분으로 양장본에만 존재.\n\n\n6\n책꼬리\ntail edge\n제본된 책의 맨 아래 밑쪽의 마구리 부분.\n\n\n7\n도랑\ngroove\n양장본의 두꺼운 앞∙뒤 표지와 책등의 경계에 도랑 모양의 골을 만들어 표지를 잘 여닫도록 한 홈.\n\n\n8\n머리챙\nawning/visor\n양장본의 책등쪽 위와 아래의 튀어나온 부분. 책의 머리띠를 보호하는 챙과 같은 기능을 함.\n\n\n9\n등글자\nback title\n책등이나덧표지,케이스의등쪽에넣는문자. 표제, 저자, 출판사 등의 표시.\n\n\n10\n등턱\njoint\n양장 제본에서, 책 표지의 도랑과 책등 모서리의 튀어나온 부분으로 일명 ‘책귀’라고도 함.\n\n\n11\n책등\nspine/back\n책 앞쪽 마구리의 반대 뒤쪽 부분. 양장본에서는 둥글거나 편편하게 마름하며, 표제·저자·출판사 등을 표시함.\n\n\n12\n책목\nbook neck\n책의 본문 속장과 등쪽 위·아래 양 끝의 접속 부위.\n\n\n13\n갈피끈\nbook-mark/ tassel/ ribbon/spin\n책장 속에 끼워 넣은 가는 끈으로 읽던 곳이나 필요한 지면을 다시 찾을 때 이용됨.",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>책과 문서구조</span>"
    ]
  },
  {
    "objectID": "part_about_book.html#book-outer-extract",
    "href": "part_about_book.html#book-outer-extract",
    "title": "\n6  책과 문서구조\n",
    "section": "",
    "text": "책 외부명칭",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>책과 문서구조</span>"
    ]
  },
  {
    "objectID": "part_about_book.html#book-outer-content",
    "href": "part_about_book.html#book-outer-content",
    "title": "\n6  책과 문서구조\n",
    "section": "\n6.2 책 내부 명칭",
    "text": "6.2 책 내부 명칭\n책은 단순히 글, 표, 그림, 그래프, 도형, 수식을 모은 것이 아니라, 정교하게 구성된 정보 체계라고 볼 수 있다. 책 내부 순서와 명칭을 보면 정교하게 구성된 정보체계가 드러난다. 책 각부분은 특별한 명칭을 지니고 있으며, 세부 명칭은 해당 부분에 대한 역할과 중요성을 암시한다. 예를 들어, ‘판권지’, ‘머리말’, ‘본문’, ‘참고문헌’ 등은 모두 책을 구성하는 핵심 요소이며, 이러한 명칭을 숙지하고 있으면 책 구조와 내용을 더욱 효과적으로 이해할 수 있다. 책의 내부 순서 및 명칭이 다음 표 6.2 에 자세히 나와 있다.\n\n\n\n표 6.2: 책 내부명칭\n\n\n\n\n\n\n\n순\n용 어\n대응 영어\n용어 정의\n\n\n\n1\n반표제지\nhalf-title page\n책의제호만(편저자,출판사등넣지않음) 속표지 앞에 본문지로 인쇄하여 넣음.\n\n\n2\n머리그림\nfrontispiece\n책의 앞머리 반표제 다음에 본문과 관계된 사진이나 그림 등을 속표지와 마주 보게 인쇄하며, 뒤쪽을 백지로 비우는 것이 원칙.\n\n\n3\n속표지\nfull title page\n책의 본문 바로 앞, 면지·반표제지 다음에 넣는 표지로 앞표지와 동일하게 표제, 편저자, 출판사 등을 표시함.\n\n\n4\n판권지\nimprint page/copyright page\n표제, 편저자, 발행자, 발행사, 발행 연월일 등 출판 사항을 넣는 면. 한국이나 일본, 중국 등에서는 권말에 넣고 있으나 최근 서구의 책처럼 속표지 뒤에다 인쇄하는 경향임.\n\n\n5\n바치는 글\ndedication\n저자가 스승이나 선배, 친지에게 자신의 저서를 헌정하는 글.\n\n\n6\n고침표\nerrata/corrigenda\n인쇄가 끝난 뒤에 발견된 오자나 오식을 모은 정정 일람표로 별도로 인쇄, 제본된 책 속에 끼움.\n\n\n7\n머리말\npreface\n책의 편저자 자신이 책의 앞 부분에 스스로 써 넣은 글로 일명 ‘서문’이라고도 일컬음.\n\n\n8\n추천사\nforeword\n저자의 스승이나 선배 등이 책의 내용을 평가하며 일독을 권하는 글로 머리글 다음에 배열.\n\n\n9\n감사글\nacknowledgement\n저자가 책의 저술 중 도움을 받은 사람이나 기관 등에 감사의 마음을 표시한 글.\n\n\n10\n일러두기\nexplanatory notes\n책 내용 구성과 편집에 활용된 약호나 부호 등의 해설. 일명 ‘범례’라고도 하며, 사전이나 지도 등의 책은 필수 사항.\n\n\n11\n차례\nContents\n책이나 잡지 등에서, 내용의 대소 단원의 제목을 뽑아서 해당 페이지를 표시한 일람표로서 도서의 경우는 편, 부, 절, 항 등의 제목과 수록 페이지를 밝혀 순차적으로 편집하되, 일반 도서는 머리말 다음에, 잡지의 경우는 표지나 본문 맨 앞쪽에 배열.\n\n\n12\n그림 차례\nillustrations\n책의 본문 내용을 보충 설명하기 위해 삽입해 놓은 그림·삽화의 차례.\n\n\n13\n약어표\nabbreviations\n단어를 축약한 약어들을 가나다 순이나 알파벳 순으로 정리·요약한 표.\n\n\n14\n중간 표제지\ndivisional title page\n본문 가운데 ‘부(部)·편(篇)·장(章)의 제목’ 만의 하나의 페이지로 편집한 쪽. 통상 홀수 면으로 시작하며, 법전 등의 책에 따라 본문 인쇄 용지와 다른 색지 등을 이용하기도 함.\n\n\n15\n본문\ntext\n도서, 잡지, 신문이나 문서 가운데 주체가 되는 문장 내용의 총칭.\n\n\n16\n주\nnotes\n책의 맨 끝이나 해당 페이지 하단 또는 판면 좌우 여백에 등에 넣는 내용의 보충 설명문. 본문에 인용된 자료의 서명과 지면 등을 명확히 밝혀 순번대로 게재.\n\n\n17\n후기\nafterword/ postscript\n책의 끝 쪽에 저작자의 집필 의도나 출판 경위 등을 밝혀 쓴 글로 일명 ‘후서’,‘발문’,‘발(跋)’으로도 표현.\n\n\n18\n부록\nappendix/ supplement\n본문과 관련 있는 보충 내용을 묶어 권말에 따로 넣은 부분. 용어풀이, 참고문헌, 찾아보기 등의 후첨. 일반 잡지 등의 간행물은 별도로 인쇄하여 펴내기도 함.\n\n\n19\n용어풀이\nglossary\n책 내용과 관련된 특수 용어나 전문 용어를 따로 모아 놓은 간단한 해설. 책의 권말 부록에 넣음.\n\n\n20\n참고문헌\nbibliography\n책의 본문에 참고·인용한 책이나 논문, 잡지 등의 문헌을 각 장 끝이나 권말에 붙여 넣음.\n\n\n21\n찾아보기\nindex\n본문 내용 중에 등장하는 인명이나 지명, 용어 등을 쉽게 찾아볼 수 있도록 가나다 순, 알파벳 순으로 배열하여 해당 페이지와 함께 권말에 편집해 놓은 목록으로 일명‘색인’이라고도 함.",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>책과 문서구조</span>"
    ]
  },
  {
    "objectID": "part_about_book.html#book-outer-II",
    "href": "part_about_book.html#book-outer-II",
    "title": "\n6  책과 문서구조\n",
    "section": "\n6.3 책 속지 명칭",
    "text": "6.3 책 속지 명칭\n책을 저작하거나 읽을 때, 단순히 ‘표지’와 ’본문’으로만 이해하기엔 너무나도 많은 세부 요소가 있다. ’속표지’는 본문 바로 앞에 위치하며, 표제와 저자, 출판사 정보를 담고 있다. ’면지’는 표지와 본문 속장을 결속시키는 역할을 하며, 종종 두꺼운 종이를 사용한다. ’반표제지’는 속표지 앞에 위치하고 책의 제목만을 표시한다. 이 외에도 ’저자명’, ‘출판사’, ‘붙인면지’, ‘매는쪽’ 등 다양한 명칭이 존재하며, 각각이 책의 구조와 디자인, 정보 전달에 중요한 역할을 한다. 책의 속지 명칭은 다음 표 6.3 에 자세히 나와 있다.\n\n\n\n표 6.3: 책 속지명칭\n\n\n\n\n\n\n\n순\n용 어\n대응 영어\n용어 정의\n\n\n\n1\n책머리\ntop edge\n책의 속장의 위쪽이나 펼친 본문 판면의 맨 윗부분.\n\n\n2\n앞마구리\nfore-edge\n제본된 책의 속장 앞쪽의 재단 부분. 책등의 반대편 앞쪽으로 일명 ‘책배’라고도 함.\n\n\n3\n속표지\nfull title page\n책의 본문 바로 앞, 면지·반표제지 다음에 넣는 표지로 앞표지와 동일하게 표제, 편저자, 출판사 등을 표시함.\n\n\n4\n저자명\nauthor's name\n책을 저술한 사람으로서 저작권의 소유자.\n\n\n5\n출판사\npublishing house\n책·잡지등간행물을편집·제작·발행한 회사.\n\n\n6\n머리띠\nhead-band\n양장본의 등쪽 위와 아래 끝에 붙인 천으로 책등과 속장 사이에 끼워 책을 보호하는 기능을 가짐. 일명‘꽃천’이라고도 함.\n\n\n7\n책날개\nflap\n책 표지 바깥에 씌운 덧표지 앞뒤를 안쪽으로 접어 넣은 부분. 책 내용 요약문이나 저자의 사진, 약력 등을 넣을 수 있음.\n\n\n8\n덧표지\ndust- cover/jacket\n양장본의 앞∙뒤 표지 위에 덧씌운 종이. 표제, 저자, 출판사, 책값, ISBN 등을 인쇄하며 표지를 보호하는 역할을 함.\n\n\n9\n띠지\nband/book band\n책의 덧표지나 앞표지 아래쪽에 5~10cm 정도의 넓이로 띠처럼 두른 종이. 책의 내용을 압축한 선전 문구나 주요 차례 등을 넣어 인쇄함.\n\n\n10\n면지\nend-paper\n표지와 본문 속장을 결속시키기 위해 앞뒤의 표지 안쪽에 붙이는 종이. 본문 용지보다 좀 두터운 색지나 그림, 사진 등을 인쇄하여 넣기도 함.\n\n\n11\n반표제지\nhalf-title page\n책의 제호만(편저자, 출판사 등 넣지 않음) 속표지 앞에 본문지로 인쇄하여 넣음.\n\n\n12\n붙인면지\npaste-down end- paper\n앞∙뒤 표지의 안쪽으로 풀로 붙인 면지.\n\n\n13\n매는쪽\ngutter\n표지 안쪽으로 속장과 연결시킨 부분의 펼치고 닫는 부분의 이음매.\n\n\n\n\n\n\n\n\n\n\n워드 파일에서 이미지를 추출하는 방식은 워드 파일 압축을 풀면된다. 그렇게 하기 위해서 KSX0003_20091228.docx 파일명을 KSX0003_20091228.zip으로 바꾼 후에 압축을 풀어준다. 그러면 word/media 디렉토리에 이미지가 저장된다.",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>책과 문서구조</span>"
    ]
  },
  {
    "objectID": "part_about_book.html#논문-구성",
    "href": "part_about_book.html#논문-구성",
    "title": "\n6  책과 문서구조\n",
    "section": "\n6.4 논문 구성",
    "text": "6.4 논문 구성\n책과 논문은 차이점이 명확하다. 책은 광범위한 주제를 다루고 다양한 독자에게 정보나 지식을 전달하는 데 중점을 두는 반면, 논문은 특정한 학문적 주제에 깊이 있게 접근하며, 주로 학계나 전문가를 대상으로 한다. 책은 장/절/항으로 구성되고 저자 취향에 따라 다양한 형식을 취할 수 있지만, 논문은 일반적으로 정해진 구조를 가지며, 서론, 선행문헌 연구, 연구 방법론, 결과, 논의, 결론 등으로 구성되어 큰 차이가 난다.\n저작 과정 뿐만 아니라 출판 과정에서도 책과 논문은 큰 차이가 난다. 책이 출판사를 통해 출판되는 반면, 논문은 학술지에 실리기 전에 동료검토 과정을 거친다. 책이 정보 제공이나 이야기 전달이 주된 목적이지만, 논문은 새로운 지식을 창출하거나 기존 지식에 대한 새로운 시각을 제시하는 것이 주된 목적이라는 점에서도 다르다. 논문에서는 사용된 모든 자료와 출처를 명확하게 밝혀야 하지만, 책에서는 이러한 요구가 상대적으로 덜 엄격하여 참고문헌과 인용에 대한 접근 방식에서도 차이가 난다.\n\n\n\n\n\n\n\n\n\n\n\n논문은 학문적 연구나 주제에 대한 깊은 분석을 제공하는 학술 문서다. 논문을 통해 저자는 특정 주제에 대한 자신의 연구 결과나 견해를 체계적으로 정리하여 학계나 일반 대중에게 소개한다. 논문도 책과 마찬가지로 다음과 같은 구성요소를 갖는다.\n\n\n논문 구성\n\n\n표지: 논문의 첫 페이지로, 논문의 제목, 저자, 소속 기관 등이 표시된다.\n초록: 논문의 주요 내용을 간략하게 요약한 부분으로 연구 목적, 방법, 결과, 기여 등에 대해 함축적으로 요약한다.\n감사의 글: 논문 작성 과정에서 도움을 준 사람이나 기관에 대한 감사의 마음을 표현한다.\n목차: 논문의 전체 구성을 한눈에 볼 수 있도록 장과 절, 소절의 목록과 페이지 번호가 나열된다.\n그림 목록과 표 목록: 논문에 사용된 그림과 표의 목록을 제공한다.\n본문\n\n서론: 논문의 시작 부분에서 가장 중요한 부분으로 연구 배경을 상세히 설명하고, 연구의 목적과 필요성을 명확히 한다. 또한, 연구 가설 또는 연구 질문을 제시하여 독자가 이후 내용을 더 잘 이해할 수 있게 한다. 이 부분에서는 선행 연구와 관련된 문헌도 언급하여, 본 연구가 어떤 학문적 공백을 채우려는지를 명확히 해야 한다.\n방법론: 연구를 어떻게 수행했는지를 상세히 기술한다. 연구 설계, 표본 선정, 변수 정의, 데이터 수집 방법, 통계 분석 방법 등을 체계적으로 설명하여 연구 신뢰성을 높이고, 다른 연구자가 같은 연구를 재현할 수 있게 하는 기초를 제공한다.\n결과: 연구에서 얻은 결과를 정밀하게 분석하고 해석한다. 통계적 분석 결과는 표나 그래프 등으로 시각적으로 표현하여, 독자가 쉽게 이해할 수 있도록 한다.\n논의: 결과의 의미를 깊게 파고들어 연구결과가 어떤 의미를 가지는지, 기존 연구나 이론과 어떻게 일치하거나 다른지를 분석한다. 또한, 연구의 한계와 향후 연구의 방향도 제시한다.\n결론: 논문의 마지막 부분으로, 연구의 주요 발견과 그 의미를 요약한다. 연구의 가치를 한눈에 보여주는 중요한 마무리 부분으로 명확하고 간결하게 작성해야 한다. 필요한 경우, 연구가 학계나 사회에 미칠 영향에 대해서도 간략히 언급한다.\n\n\n참고문헌: 논문에서 인용한 모든 자료의 목록을 제공한다.\n부록: 논문의 본문에서 다루지 않았지만, 연구에 사용된 원시 데이터, 코드, 패키지와 도구, 운영체제 등 연구재현과 관련된 정보를 제공한다.",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>책과 문서구조</span>"
    ]
  },
  {
    "objectID": "part_about_book.html#연구-보고서-구성",
    "href": "part_about_book.html#연구-보고서-구성",
    "title": "\n6  책과 문서구조\n",
    "section": "\n6.5 연구 보고서 구성",
    "text": "6.5 연구 보고서 구성\n연구보고서와 논문은 학술적이거나 전문적인 연구 결과를 정리하고 발표하는 문서라는 공통점이 있지만 차이점도 존재한다. 논문이 학문 분야에 새로운 지식이나 이론을 기여하는 것을 주된 목적으로 하는 반면, 연구보고서는 특정 연구 프로젝트나 과제의 결과를 제시하며, 그 결과를 실용적으로 활용할 방안을 제시하는 경우가 많다. 따라서, 연구보고서는 논문보다는 더 실용적인 측면이 강하다.\n연구보고서가 주로 프로젝트를 의뢰한 기관, 정부, 기업 등에 제공되는 경우가 많은 반면, 논문은 학계나 전문가 커뮤니티를 대상으로 한다는 면에서 대비된다. 논문이 서론, 선행문헌조사, 연구 방법, 결과, 논의, 결론으로 구성되는 반면, 연구보고서는 논문 구성요소 외에도 요약정보(Executive Summary), 예산, 추진일정표, 대안 및 대안 추천 등이 추가된다.\n논문이 학술지나 학회에서 심사를 거쳐 공개적으로 출판되지만, 연구보고서는 대체로 의뢰자나 관련 기관 내부에서만 내부적으로 활용되고, 특정한 경우에만 외부로 공개된다.\n논문이 엄격한 학술적 양식과 언어를 선호하는 반면, 연구보고서는 논문보다 실용성이 강조되어 연구보고서에서 의뢰기관 배경에 따라 용어과 문체도 달라진다. 논문은 학술적인 내용을 다루기 때문에, 연구자가 연구수행 과정에서 발생한 모든 사항을 기록해야 하지만, 연구보고서는 연구 결과를 중심으로 작성되기 때문에, 연구 과정에서 발생한 모든 사항을 기록하면 좋지만 꼭 그럴 필요는 없다.\n논문은 해당 분야의 선행 연구와 이론을 깊게 다루고 이를 바탕으로 새로운 연구 질문을 설정하기 때문에 연결고리를 중시하는 반면, 연구보고서는 선행 연구를 참고하기는 하지만, 그 깊이가 논문만큼은 아니기 때문에 연구보고서는 연구 결과에 중심을 두고 작성된다.\n\n\n\n\n\n\n\n\n\n\n\n\n\n연구보고서 구성요소\n\n연구보고서도 논문과 마찬자기로 몇가지 구성요소가 핵심을 이룬다. 먼저, 요약정보(Executive Summary) 부분에서 연구보고서 주요 내용과 결론, 추천 사항을 한 페이지로 간략하게 요약한다. 서론에서 연구 배경, 목적, 연구 질문을 소개하고, 선행 문헌조사에서 관련된 이론과 선행 연구를 검토하고 분석한다. 연구 방법론에서 연구 설계, 데이터 수집 및 분석 방법에 대해 설명한다.\n결과 부분에서 연구의 주요 성과와 발견을 제시하고, 논의에서 발견 성과를 해석하고, 그 의미나 중요성을 설명한다. 결론에서 연구의 주요 발견과 성과, 연구의 함의, 추후 연구에 대한 제언을 정리한다. 참고문헌에서 보고서 작성에 사용된 모든 출처를 나열하고 부록에서 필요한 경우 추가 데이터나 코드, 자료를 담을 수 있다. 연구보고서는 예산, 일정, 위험, 대안, 대안 추천 등이 포함될 수 있다.",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>책과 문서구조</span>"
    ]
  },
  {
    "objectID": "part_about_book.html#ppt-슬라이드-구성",
    "href": "part_about_book.html#ppt-슬라이드-구성",
    "title": "\n6  책과 문서구조\n",
    "section": "\n6.6 PPT 슬라이드 구성",
    "text": "6.6 PPT 슬라이드 구성\nPPT 슬라이드는 주로 발표나 강의 보조 수단으로 사용되기 때문에 책, 논문, 연구보고서와 다르게 주로 시각적 요소와 간결한 텍스트를 중심으로 구성된다. 즉, PPT는 정보를 빠르고 효과적으로 전달하기 위해 디자인 요소가 강조되는 문서다.\nPPT 슬라이드에 디자인적 요소가 강조되다보니 그래프, 이미지, 동영상 등 다양한 멀티미디어 요소를 발표자료에 담아 독자나 청중의 주의를 끌고 정보를 더욱 효과적으로 전달할 수 있지만, 책이나 논문에서는 PPT 슬라이드만큼 강력한 시각적 전달 매체를 문서에 담아내는 것이 구조적으로 불가능하다.\n책, 논문, 연구보고서가 깊이 있는 내용과 자세한 분석, 풍부한 참고문헌을 제공하는 반면, PPT 슬라이드는 핵심 포인트만을 강조하고 자세한 설명은 생략한다. 책과 논문은 독자가 자신의 속도로 읽을 수 있도록 설계되어 있지만, PPT는 발표자의 속도와 리듬에 맞춰 정보가 전달된다는 점에서 전혀 다른 문서라고 볼 수 있다.\nPPT 슬라이드는 상호작용도 문서에 담아낼 수 있어 발표자가 청중의 질문에 즉시 답변하거나 설문조사, 퀴즈 등을 통해 청중과 즉각적으로 소통할 수 있다. 책이나 논문, 연구보고서는 실시간 의사소통보다는 턴제 의사소통을 지향한다.\n\n\n\n\n\n\n\n\n\n\n\n\n\n발표자료 문서 구성요소\n\nPPT 발표자료 작성 목적이 실시간으로 정보를 전달하고 청중과 상호작용하는 것이기 때문에, 문서 구성요소와 전개방식이 책, 논문, 연구보고서와는 다르게 설계된다. 예를 들어, 프로젝트 발표자료에서 복잡한 데이터나 개념을 그래프나 도표를 통해 시각적으로 단순화시켜 청중이 쉽게 이해할 수 있도록 하고, 동영상, 음악 등 다양한 미디어 요소를 활용하여 청중의 관심을 끌고 정보를 더 효과적으로 전달한다. 실시간 상호작용은 PPT 발표자료의 또 다른 중요한 특징으로 실시간 설문조사나 퀴즈를 통해 청중의 의견을 즉시 얻어 발표나 강의가 더 적절하고 효과적으로 이뤄지도록 하는데 반해, 책이나 논문, 연구보고서와는 다른 방식으로 정보나 이야기를 전달하는데 적합하다.",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>책과 문서구조</span>"
    ]
  },
  {
    "objectID": "part_about_book.html#판형",
    "href": "part_about_book.html#판형",
    "title": "\n6  책과 문서구조\n",
    "section": "\n6.7 판형",
    "text": "6.7 판형\n종이 크기는 다양한데 우리나라는 국제 표준인 ISO A형(A4 등 A 계열)을 채택하고 있는데 제조 효율에서는 표준으로 설계된 크기인 ISO A형이 활용성과 효율이 가장 좋은 것으로 알려져 있다. A형 전지는 A0로 표기하며 이를 접어서 절단할 때마다 숫자를 늘려 표기한다. A1은 한번 접어서 자른 크기이며, 흔히 사용하는 A4는 A0를 네 번 접어서 자른 종이 크기다.\nA계열로 일명 A0판이라고 부르는 841*1189mm 종이를 가로 세로로 접어가면서 자르는 방식으로 A4는 A1을 8조각으로 자른 것이다. ’국배판’으로 불리는 A4판(210*297mm)은 학습지 등 문제풀이나 필기가 필요한 서적에 주로 사용되고, 신국판으로 불리는 A5판의 변형본은 148*210mm인 A5보다 약간 큰 152*225mm 으로 한국 출판계에서 가장 흔한 사이즈다.\nB계열은 JIS B규격으로써 4*6전지나 B0이라고 부르는 1030*1456mm 종이를 가로 세로로 접어가면서 자르는 방식으로 A4와 마찬가지로 B4는 B1을 8조각으로 자른 것이다. 소설, 자서전, 전문서적에는 신국판(152*225mm)을 많이 사용하고, 46배판은 B5(16절) 182 x 257(4x6배판)과 같은 크기로 대학 전공서적 등에 주로 사용된다.\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n그림 6.1: 종이크기(A0, B0)",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>책과 문서구조</span>"
    ]
  },
  {
    "objectID": "part_markdown.html",
    "href": "part_markdown.html",
    "title": "4  마크다운",
    "section": "",
    "text": "4.1 메타데이터(Metadata)\n마크다운으로 문서 메타데이터를 저자가 야믈(YAML) 헤더에 나타낼 수 있다. YAML 은 “Yet Another Markup Language”를 축약한 두문어지만 중요하지는 않다. YAML 헤더는 다음과 같다.\n상기 야믈(YAML) 헤더 요소는 견본(템플릿) 으로 사용되고 해당 문서에 대한 메타데이터가 정의된다.",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>마크다운</span>"
    ]
  },
  {
    "objectID": "part_markdown.html#메타데이터metadata",
    "href": "part_markdown.html#메타데이터metadata",
    "title": "4  마크다운",
    "section": "",
    "text": "---\ntitle: \"마크다운과 팬독(`pandoc`)을 활용한 과학기술문서 저작\"\nshorttitle: \"현대적인 과학기술 문서 저작\"\nauthor: 이광춘\ndate: \"2015년 7월 7일\"\n---",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>마크다운</span>"
    ]
  },
  {
    "objectID": "part_markdown.html#기본-구문",
    "href": "part_markdown.html#기본-구문",
    "title": "4  마크다운",
    "section": "4.2 기본 구문",
    "text": "4.2 기본 구문\n\n4.2.1 제목\n줄에 숫자 기호(#)를 한개부터 여섯개까지 작성해서 텍스트에 작성되는 구분 수준이 결정된다. 예를 들어, 다음 문서는 첫번째 큰 제목 두개(들어가면, 방법론)를 갖고, 방법론 제목에 중첩된 두번째 제목을 갖는다: 동적 인구 모형\n\n\n# 들어가며\n# 방법론\n## 동적 인구 모형\n\n\n\n# 들어가며 {.unnumbered}\n# 방법론 {.unnumbered}\n## 동적 인구 모형 {.unnumbered}\n\n\n\n\n4.2.2 텍스트 서식\n마크다운으로 쉽게 이탤릭, 굵게, 이탤릭 굵게 글씨체를 지정할 수 있다. (하지만, 모든 마크다운이 마지막 서식구문에 동의하지는 않는다). 글꼴에 서식 적용은 * 혹은 _을 사용해서 적용한다. 따라서 다음 명령어는 모두 동등하다:\n\n\n*이탤릭* 그리고 _이탤릭_\n**굵게** 그리고 __굵게__\n***이탤릭 굵게.*** 그리고 ___이탤릭 굵게.___\n\n\n\n이탤릭 그리고 이탤릭  굵게 그리고 굵게  이탤릭 굵게. 그리고 이탤릭 굵게.\n\n\n\n\n4.2.3 코드\n코드는 백틱으로 텍스트를 감싸 인라인(inline) 으로 작성하거나,\n\n\n프로그램 실행은 `python helloworld.py`으로 프롬프트를 작성한다.\n\n\n\n프로그램 실행은 python helloworld.py으로 프롬프트를 작성한다.\n\n\n혹은 백틱(`) 3개나 틸드(~) 3개를 한줄씩 코드상하에 넣어 코드블록을 구분한다:\n\n\n```\n이것이\nR, 파이썬\n코드블록 입니다.\n```\n\n\n\n이것이\nR, 파이썬\n코드블록 입니다.\n\n\n코드블록 첫번째 행에, 프로그래밍 언어 를 명세하는 것도 가능하다:\n\n\n`python` 으로 언어를 명세한다:\n\n```python\nfor i in xrange(5):\n  print \"This is line \" + str(i) + \" of this useless loop.\\n\"\n```\n\n훌륭해 보입니다!\n\n\n\npython 으로 언어를 명세한다:\nfor i in xrange(5):\n  print \"This is line \" + str(i) + \" of this useless loop.\\n\"\n훌륭해 보입니다!\n\n\n\n\n4.2.4 링크\n하이퍼링크를 작성하는 방식은 두가지가 있다. 첫번째는 인라인 으로 작성하는 것으로 [텍스트](http://link.tld) 방식을 사용한다. 두번째는 명칭을 지정한 표식을 사용하는 방식이다. 예를 들어:\n\n\n이것은 [첫번째 링크], 다음은 또다른 [두번째 링크][link2] 혹은 [세번째 링크](http://link.1)\n\n[첫번째 링크]: http://link.1\n[link2]: http://link.2\n\n\n\n이것은 첫번째 링크, 다음은 또다른 두번째 링크 혹은 세번째 링크\n\n\n명칭을 지정한 표식을 사용하는 방식에 대한 구문은 [텍스트][표식] 이 먼저 나오고 나서, [표식]: http://link 표식링크가 문서 다음에 뒤따라 나온다. [표식]이 없는 경우 [텍스트]: link 방식으로 동작하게 된다.",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>마크다운</span>"
    ]
  },
  {
    "objectID": "part_markdown.html#컴파일",
    "href": "part_markdown.html#컴파일",
    "title": "4  마크다운",
    "section": "4.3 컴파일",
    "text": "4.3 컴파일\n지금까지 작성원고는 말그대로 마크다운 자체 파일(확장자가 mkd, .markdown, .pandoc)이다. 마크다운을 뭔가 다른 것으로 변환할 필요가 있다. 대체로 PDF, 혹은 텍스트 프로세서에서 볼 수 있는 문서형식이 된다.\n\n4.3.1 팬독(pandoc) 으로 컴파일\n팬독(pandoc) 프로그램이 이런 작업을 수행하는 나름 최적의 도구다.(물론, jekyll 처럼 웹에 특화된 도구도 존재한다.) 대부분의 명령-라인 도구와 마찬가지로, pandoc은 입력값으로 파일과 일부 선택옵션 플래그를 순차적으로 받는다. pandoc을 호출하는 기본방식은 다음과 같다:\npandoc input.ext -o output.ext\n\n기본 구문\n팬독(pandoc) 아래 숨은 마술 로 입력파일이 출력 파일로 된다. 다음 경우에, 입력파일은 마크다운으로 PDF 파일을 생성하는 마술 명령어는 다음과 같다:\npandoc manuscript.md -o manuscript.pdf\n그리고 MS 워드 문서를 생성하려면 다음과 같다.\npandoc manuscript.md -o manuscript.doc\ndocx, otf는 신규 워드문서와 리브레오피스 확장자다. txt, rtf, html을 시도해보고 산출결과가 어떻게 달라지는지 살펴본다.\n\n\n\n4.3.2 견본 템플릿\n최종문서에 작성한 것을 어디에 넣을지 팬독(pandoc)은 어떻게 알 수 있을까? 다양한 견본 템플릿 이 존재하는데, 견본 템플릿에는 pandoc이 모든 요소를 어디에 넣을지 정리되어 있다. pandoc 웹사이트에서 견본 템플릿을 복사하고 변경할 수 있는 다양한 정보가 담겨있다. 구글로 바로 찾을 수 있는 재사용가능한 견본 템플릿이 상당히 많다.\n\n\n4.3.3 선택옵션 플래그\n선택옵션 플래그를 통해서 pandoc에 추가적인 인자를 전달한다. pandoc 에서 지원하는 인자가 상당히 많은데, 자세한 정보는 쉘를 열고 man pandoc 도움말을 참조하거나, 인터넷 온라인 문서를 참조한다. 본 학습에서는 참고문헌과 관련된 두가지 선택옵션 플래그에 집중한다.",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>마크다운</span>"
    ]
  },
  {
    "objectID": "part_markdown.html#고급-마크다운",
    "href": "part_markdown.html#고급-마크다운",
    "title": "4  마크다운",
    "section": "4.4 고급 마크다운",
    "text": "4.4 고급 마크다운\n학술적 논문은 단순 텍스트보다 많은 정보가 담긴다. 이번 학습에서 참고문헌, 표, 그림, 수식을 추가하는 방법을 다룬다. 기억할 한가지 중요한 점은 LaTeX 명령어가 다른 형식으로 변환할 때 (최소한 pandoc을 사용할 때 그런데, pandoc은 가장 일반적인 프로그램이다), 그대로 먹힌다는 사실이다. 이런 점이 수식 사용을 상당히 단순화시킨다.\n\n4.4.1 수식\n수식을 LaTeX 구문으로 작성할 수 있다. 예를 들어, 아래 코드 덩어리는 적법한 마크다운 구문이다:\nThe equation for a polynomial function is $y(x) = ax^2 + bx +c$.\n그리고 다음도 적법하다:\nThe sum of a vector of numbers ($\\mathbf{v}$) is noted\n\n\\begin{equation}\n\\sum_{x=1}^n\\mathbf{v}_i\n\\end{equation}\n\n\n4.4.2 표\n마크다운이 갖는 이슈중 하나는 표에 대한 지원이 미약하다는 점이다. (하지만, LaTeX 구문을 사용하는 것은 가능) 그럼에도 불구하고, 상대적으로 간단한 표를 작성하는 방법은 있다.\n|  교과목  |    담당자 |     선수 교과목 |\n|:---------|:-----------|------------------:|\n| 마크다운 | xwMOOC        | 쉘, Git, Makefiles |\n상기 구문을 적용하면 다음에 나온 표가 작성된다.\n\n\n\n교과목\n담당자\n선수 교과목\n\n\n\n\n마크다운\nxwMOOC\n쉘, Git, Makefiles\n\n\n\n표를 구성하는 요소가 몇개 있다. 첫번째 줄은 헤더 로 표제목, 두번째 줄은 정렬, 그 다음 줄이 표에 기술되는 내용물 이 된다.\n칼럼은 파이프(|) 기호로 구분한다. 파이프를 수직방향으로 정렬할 필요는 없다. (하지만, 원문서를 읽을 때 가독성을 상당히 높힌다 – 편집기 대부분에는 이런 기능을 플러그인으로 지원한다)\n기본디폴트 설정으로 칼럼은 좌측 정렬 된다. 정렬을 명세하려면, 두번째 행에 다음과 같이 : 세미콜론을 사용해서 지정한다.\n|   좌측정렬  |  중앙정렬  |    우측정렬   | 기본 설정 (좌측) |\n|:-------------|:--------:|--------------:|:---------------|\n| `:---`       |  `:--:`  |        `---:` | `----`         |\n상기 구문을 적용하면 다음에 나온 표가 작성된다.\n\n\n\n좌측정렬\n중앙정렬\n우측정렬\n기본 설정 (좌측)\n\n\n\n\n:---\n:--:\n---:\n----\n\n\n\n\n\n4.4.3 그림\n그림은 마크다운에서 잘 지원되고 있다. 표기법은 링크에 사용된 표기법을 따르지만, 느낌표(!)를 앞에 위치시킬 필요가 있다.\n예를 들어,\n![소프트웨어 카펜트리 로고](images/swc-logo-blue.png)\n상기 구문을 적용하면 다음과 같이 그림이 삽입된다.\n\n\n\n소프트웨어 카펜트리 로고\n\n\n다른 방법으로 다음과 같이 그림 삽입 구문을 작성해도 된다.\n![소프트웨어 카펜트리 로고][swc]\n[swc]: (images/swc-logo-blue.png)\nLaTeX 명령어, \\label{f:swc} 라벨을 넣은 것에 주목한다. \\autoref{f:swc}를 사용해서 텍스트에 그림을 참조하게 한다. LaTeX에 autoref 팩키지는 놀랍도록 유용한데, 참조하는 객체 유형을 식별해서, 사람이 관여하지 않고도 Fig. 1, Tab. 2, Eqn. 3, 혹은 기타 필요한 것을 자동으로 완성시킨다.\n\n\n4.4.4 참고문헌\n학술논문에 있는 최종 요건은 참고문헌이다. pandoc과 pandoc-citeproc 확장기능을 통해 마크다운이 참고문헌 기능을 매우 우아하게 처리한다. pandoc 서지관리 모듈은 다양한 형식으로부터 인용을 불러올 수 있다. 최초 CSL JSON 와 CSL YAML로 설계되어, bibtex과 RIS를 수용할 수 있다.\n참고문헌을 참조하는 방식은 인용키, @CitationKey를 이용한다. 예를 들어, (bibtex) 라이브러리에 다음 참고문헌이 담겨 있다면:\n@ARTICLE{thom99,\n    title = {The raw material for coevolution},\n    journal = {Oikos},\n    author = {Thompson, John N},\n    number = {1},\n    volume = {84},\n    year = {1999},\n    pages = {5--16},\n}\n텍스트에 @thom99 을 넣어 참조한다. 모든 참고문헌 관리 소프트웨어를 사용해서 pandoc에서 지원되는 형식 중 하나로 내보내기 한다. 인용키가 보여주는 방식을 사용자 정의에 맞추면 된다.\n참고문헌을 ([@John2012; @Jack2014])와 같이 결합할 수 있고, 인라인 으로 “저자-년도” 스타일을 지정해서 사용하고 있다면 @Doe2013 작성하게 되면 Doe (2013)와 같이 표시되고, 괄호를 사용해서 [@Doe2013]와 같이 사용하면 (Doe, 2013) 산출물을 얻게 된다. 또한, 텍스트를 추가하는 것도 가능하다: [검토를 위해 @Billy2015 참조] 와 같이 작성하면, (검토를 위해 Billy et al., 2015 참조)와 같이 나타난다.\n참고문헌이 문서 끝에 자동으로 삽입된다. 저널 요건에 맞춰 서식을 바꾼 수천가지 방법이 있다.",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>마크다운</span>"
    ]
  },
  {
    "objectID": "part_components.html",
    "href": "part_components.html",
    "title": "\n3  문서 구성요소\n",
    "section": "",
    "text": "3.1 그림\n그림은 책 내용을 이해하는 데 도움을 주는 중요한 요소이다. 그림은 과거 실제 사물을 촬영한 사진과 사물이나 생각을 그려서 표현한 것이 전부였다면, 이제는 데이터를 기반으로 다양한 그래프도 만들어낼 수 있고 생성형 AI 기술을 사용해서 시각적 표현을 만들어낼 수도 있다.\n그림은 문서에서 텍스트만으로 설명이 어려운 개념이나 데이터를 시각적으로 표현함으로써 이해를 돕고 문서구조를 논리적으로 구성하는 데도 기여한다. 그림 위치는 그림이 설명하려는 내용과 얼마나 밀접하게 연관되어 있는지에 따라 달라지는데 일반적으로 그림은 관련된 텍스트 바로 다음이나 전에 위치하는 것이 일반적이고, 그림에 대한 참조를 본문에서 명확히 하는 것이다.\n그림과 같은 시각적 객체가 준비되면 문서와 조화를 이룰 수 있도록 그림 크기, 정렬, 레이아웃, 캡션, 상호참조 등을 고려해야 한다. 특히, 문서의 최종 출력 형태를 고려해야 하는데 많이 사용되는 대표적으로 HTML, PDF, 아래한글에 각각 그림이 문서에 포함되면 다음과 같다.\n그림을 문서에 삽입할 때 그림이 문서의 전체 흐름과 내용에 잘 맞춰 물흐르듯 자연스럽게 구성한다. 그림을 단순히 장식적인 목적으로 넣어서는 안 되며, 본문의 내용을 보충하거나 설명하는 데 도움이 되어야 한다. 그림 크기가 너무 크거나 작으면 읽기 어렵고, 해상도가 낮으면 조약해 보여 글의 품격도 떨어뜨린다. 그림 번호(레이블)는 문서 내에서 그림을 참조할 때 사용되고 그림 설명글(캡션)은 그림 내용을 간략하게 설명하는 기능을 한다. 저작권 관련하여 그림 출처나 저작권 정보도 명기해야 하고, 그림 색상과 스타일이 문서 전체 디자인과 잘 어울리게 조화를 이루어야 한다.\nlibrary(tidyverse)\nlibrary(openai)\n\nextrafont::loadfonts()\n\nSys.setenv(OPENAI_API_KEY = Sys.getenv(\"OPENAI_API_KEY\"))\n\nx &lt;- create_image(\"강원도 설악산 멋진 풍경\")\n\ndownload.file(url = x$data$url, destfile = \"images/dalle_mountain.png\", mode = \"wb\")\n특히 생성형 AI 기술의 눈부신 발전으로 인해 사람이 그린 것 같은 정교한 이미지를 문서에 넣는 것도 비용이 많이 들지 않고 쉽게 가능하다. 이제는 텍스트로 작성되는 문단과 문단 사이 적절한 곳에 “프롬프트”를 넣어 이미지를 넣는 것이 큰 어려움 없이 가능하게 되었다. 다음은 최근에 공개된 OpenAI 달리3(DALL·E 3) 모델을 사용해서 ’강원도 설악산 멋진 풍경’이라는 프롬프트로 생성한 이미지다.",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>문서 구성요소</span>"
    ]
  },
  {
    "objectID": "part_components.html#그림",
    "href": "part_components.html#그림",
    "title": "\n3  문서 구성요소\n",
    "section": "",
    "text": "아래한글\nHTML\nPDF\n\n\n\n\n\n\n\n\n\n\n\n\nAI 생성 이미지",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>문서 구성요소</span>"
    ]
  },
  {
    "objectID": "part_components.html#지도",
    "href": "part_components.html#지도",
    "title": "\n3  문서 구성요소\n",
    "section": "\n3.2 지도",
    "text": "3.2 지도\n지리학(Geography)은 가장 오래된 과학 중 하나로 꼽히며, 학생때부터 교실 여기저기에서 볼 수 있는 지도가 아마도 처음 접한 데이터 시각화 산출물일 것이다. 지리학은 지구의 곡률을 정확히 파악하여 지구의 크기와 모양, 중력에 대한 이해를 높이는 데 중요한 역할을 수행했을 뿐만 아니라 대항해 시대 지도가 매우 큰 기여를 했고, 현대에 와서 지리학 데이터 응용 범위는 더욱 확장되어, 민간과 국방 범위를 가리지 않고 상업적으로 입점위치 선정, 우주 탐사, 군사 작전, 인구이동 패턴 분석 등 다방면에서 요긴한 역할을 수행하고 있다.\n지도는 글쓰기에서 중요한 구성요소 중 하나로, 특히 학술 논문, 보고서, 여행기, 지리나 역사 분야에서 지도는 필수적이다. 지도는 텍스트로만 설명하기 어려운 공간적 관계나 지리적 배치를 명확하게 시각화함으로써 저자의 주장이나 설명을 더 쉽고 정확하게 이해시킬 수 있고 문서의 전문성과 신뢰성을 높힘으로서 효과적인 커뮤니케이션을 가능하게 한다.\n한가지 사례를 들어 보자. 2023년 7월 기준 대한민국 시도별 인구수를 문서의 한 구성요로서 글쓰기를 할 때, 텍스트로 설명하거나 표로 정리하는 방법, 막대그래프로 시각화하는 방법이 경우에 따라 유용할 수 있지만, 시도라는 지리적인 정보를 지도에 녹여 표현하는 것이 가장 효과적이다.\n예를 들어, 서울과 부산 인구수가 얼마나 차이가 나는지 텍스트나 표, 그래프로만 보면 그 차이를 알 수는 있지만, 두 도시가 어디에 위치해 있는지, 주변 지역과 어떤 공간적 관계를 가지고 있는지 쉽게 파악하기 어렵다. 반면 지도를 사용하면, 서울과 부산이 어디에 위치해 있는지, 각 지역 인구수가 어떻게 분포되어 있는지를 한눈에 볼 수 있다. 지도를 통해 제공되는 공간적 맥락은 텍스트나 표, 그래프만으로는 얻을 수 없는 근본적인 이해와 통찰력을 제공한다는 점에서 지도를 통한 시각화는 정보 전달과 이해에 있어서 훨씬 더 우위를 차지한다고 할 수 있다.\n\nlibrary(sf)\nlibrary(tidyverse)\nsf_use_s2(FALSE)\n\n## 지도\nkorea_map &lt;- read_sf(\"data/HangJeongDong_ver20230401.geojson\")\n\nsido_map &lt;- korea_map |&gt; \n  group_by(sidonm) |&gt; \n  summarise(geometry = sf::st_union(geometry))\n\n## 23년 7월 인구수(KOSIS) 행정구역별, 성별 인구수\npop_tbl &lt;- read_csv(\"data/행정구역_시군구_별__성별_인구수_20230831223248.csv\",\n         locale=locale(encoding=\"euc-kr\"), skip = 1) |&gt; \n  set_names(c(\"sidonm\", \"인구수\")) |&gt; \n  mutate(sidonm = if_else(sidonm == \"강원특별자치도\", \"강원도\", sidonm))\n\nsigo_gg &lt;- sido_map |&gt; \n  left_join(pop_tbl) |&gt; \n  ggplot() +\n    geom_sf(aes(geometry = geometry, fill = cut(인구수, 10)), show.legend = FALSE) +\n    ggrepel::geom_label_repel(aes(label = sidonm, geometry = geometry), \n                              size = 20, stat = \"sf_coordinates\") +\n    theme_void() +\n    scale_fill_brewer(palette = \"OrRd\")\n\nragg::agg_jpeg(\"images/GIS_tools.jpeg\",\n               width = 10, height = 7, units = \"in\", res = 600)\nsigo_gg\ndev.off()",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>문서 구성요소</span>"
    ]
  },
  {
    "objectID": "part_components.html#그래프",
    "href": "part_components.html#그래프",
    "title": "\n3  문서 구성요소\n",
    "section": "\n3.3 그래프",
    "text": "3.3 그래프\n데이터를 시각적으로 표현하는 그래프는 증거기반 문서작성에 중요한 역할을 담당한다. 데이터 시각화를 위한 그래프 생성 프로그래밍 언어는 다양한데 “방법(how)”에 초점을 둔 명령형(imperative) Processing, OpenGL, prefuse 언어 계열과 “무엇(what)”에 초점 선언형(declarative) D3, ggplot2, Protovis 등로 나뉜다. R은 통계분석을 위한 프로그래밍 언어로서 데이터 시각화에 강점을 가지고 있다.\n그래프는 복잡한 데이터나 패턴을 빠르고 명확하게 전달할 수 있는 수단이기 때문에 데이터를 시각적으로 표현하는 그래프는 증거기반 문서 작성에서 중요한 역할을 한다. 그래프를 생성하기 위한 프로그래밍 언어나 패키지는 크게 두 가지 접근 방식으로 나뉜다. 하나는 “방법(how)”에 초점을 둔 명령형(imperative) 언어로, Processing, OpenGL, prefuse 등으로 그래프 각 요소를 어떻게 표현할 것인지를 명시적으로 지시한다. 다른 하나는 “무엇(what)”에 초점을 둔 선언형(declarative) 언어로, D3, ggplot2, Protovis 등으로 무엇을 그릴 것인지를 중심으로 설계되어 있어, 사용자가 원하는 결과에 더 집중한다.\nR 언어는 통계 분석뿐만 아니라 데이터 시각화에도 강점이 있고, 크게 3가지 R 언어기반 시각화 시스템이 존재한다. Base 시각화 시스템은 R 기본 패키지에 포함되어 있는 기본적인 그래프 생성 도구다. 래티스(lattice) 시각화 시스템은 클리블랜드(Cleveland)의 격자 그래픽(Trellis Graphics)에서 영감을 받아 개발되어 특히, 다변량 데이터를 효과적으로 시각화할 수 있다. ggplot 시각화 시스템은 SPSS 윌킨스(Wilkinson)의 그래프 문법(Grammar of Graphics)에 기반하여 탄탄한 이론적 토대를 갖고 있으여 파이프 연산자를 +도 ggplot2에 도입되어 의식의 흐름에 맞춰 그래프를 생성할 수 있다는 장점이 있다.\n\n\n\n\n\n\nBase 시스템\n\n\n\n\n\nTrellis 시스템\n\n\n\n\n\nggplot2 시스템\n\n\n\n\n\n그림 3.1: R 그래프 시스템\n\n\n팔머 관측소 펭귄 데이터를 시각화하는 예제를 통해 일반적인 데이터 시각화 구성요소와 작업흐름을 일별해보자. 데이터 시각화에 필요한 패키지(tidyverse, showtext, palmerpenguins)를 불러온다.\n그래프에 필요한 글꼴(“Nanum Pen Script”, “Jua” 글꼴)을 showtext 패키지를 사용하여 구글 폰트 사이트에서 가져와서 설치하고, 그래프 제목과 부제목 글꼴, 크기, 색상 등을 theme_quarto 테마로 설정하여 R에서 사용할 수 있도록 준비한다.\npalmerpenguins 데이터 패키지에서 팔머 관측소 펭귄 데이터프레임을 불러오고, ggplot을 사용하여 펭귄 물갈퀴 길이(flipper_length_mm)와 체질량(body_mass_g)을 x축과 y축에 각각 매핑하고, 펭귄 종(species)에 따라 색상을 다르게 표시하는 산점도를 생성하고, 그래프 제목, 부제목, x축과 y축 제목도 넣고 theme_quarto 테마도 반영하여 시각화 객체를 완성한다.\n\nlibrary(tidyverse)\nlibrary(showtext)\nlibrary(palmerpenguins)\n\nfont_add_google(\"Nanum Pen Script\", \"nanum_pen_script\")\nfont_add_google(\"Jua\", \"Jua\")\nshowtext_auto()\n\ntheme_quarto &lt;- theme(\n  text = element_text(family = 'Jua', size = 25),\n  plot.title.position = 'plot',\n  plot.title = element_text(\n    family = 'nanum_pen_script', size = 55,\n    face = 'bold', \n    colour = thematic::okabe_ito(8)[3],\n    margin = margin(t = 2, r = 0, b = 3, l = 0, unit = \"mm\")\n  ),\n  plot.subtitle = element_text(\n    family = 'Jua', size = 25,\n    face = 'bold', \n    colour = thematic::okabe_ito(8)[5],\n    margin = margin(t = 0, r = 0, b = 0, l = 0, unit = \"mm\")\n  )\n  \n)\n\ntheme_set(theme_minimal() + theme_quarto)\n\nmass_flipper &lt;- ggplot(data = penguins,\n                       aes(x = flipper_length_mm,\n                           y = body_mass_g,\n                           color = species)) +\n  geom_point(size = 3,\n             alpha = 0.8) +\n  labs(title = \"팔머 관측소 LTER 서식 펭귄 크기\",\n       subtitle = \"Adelie, Chinstrap, Gentoo 펭귄에 대한 물갈퀴 길이와 체질량\",\n       x = \"물갈퀴 길이(Flipper length) (mm)\",\n       y = \"체질량(Body mass) (g)\")\n\nmass_flipper",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>문서 구성요소</span>"
    ]
  },
  {
    "objectID": "part_components.html#표",
    "href": "part_components.html#표",
    "title": "\n3  문서 구성요소\n",
    "section": "\n3.4 표",
    "text": "3.4 표\n문서에 표를 넣게 되면 정보를 효과적으로 요약할 뿐만 아니라 가독성을 높이는 중요한 커뮤니케이션 도구 중 하나다. 마크다운(Markdown), gt 패키지, 라텍는 자료를 표 형식으로 표현할 때 각각의 장점이 있다. 마크다운은 기본적이며 간단한 방법으로, 복잡한 설치나 추가 패키지 없이도 빠르게 내용에 충실한 기본표를 작성할 수 있다. gt 패키지는 그래프 문법을 참고하여 표문법을 충실히 준수하며 데이터에 기반한 표제작에 필요한 거의 모든 기능을 제공한다. 라텍는 가장 전문적인 표를 만들 수 있는 도구로, 논문이나 학술 자료에 적합한 고품질의 표를 제작하는데 유용하다.\n\n\n표제작 세가지 방식\n\n\n3.4.1 마크다운 표\nmtcars 데이터프레임에서 시연목적으로 관측점 5개와 열 4개를 뽑아내서 kable()함수에 넣고 출력형식을 markdown으로 지정한다. markdown외에도 html, pandoc, latex, rst등으로 출력형식을 지정할 수 있다.\n\n\n\nlibrary(tidyverse)\nlibrary(knitr)\n\nmtcars %&gt;% \n  sample_n(5) %&gt;% \n  select(mpg, cyl, disp) %&gt;% \n  kable(\"markdown\")\n\n\n\n\n\n\n\n\n\nmpg\ncyl\ndisp\n\n\n\nPorsche 914-2\n26.0\n4\n120.3\n\n\nPontiac Firebird\n19.2\n8\n400.0\n\n\nToyota Corolla\n33.9\n4\n71.1\n\n\nHornet Sportabout\n18.7\n8\n360.0\n\n\nDodge Challenger\n15.5\n8\n318.0\n\n\n\n\n\n\n\n\n3.4.2 gt\n\n그래프 문법(grammar of graphics)처럼 표 문법(grammar of table) gt 팩키지가 등장했다. 표를 분해하면 다음과 같고 이를 tibble 혹은 데이터프레임을 입력받아 GT 객체로 변환시킨 후에 GT 표를 HTML로 출력하는 작업흐름을 갖는다.\n\n\n표 해부도\n\ngt 팩키지에 내장된 exibble 데이터셋은 \\(8 \\times 9\\) 구조를 갖는 단순한 데이터셋이지만 표와 관련된 다양한 형태를 개발에 사용할 주요한 정보를 담고 있다. 1\n\n\n\nlibrary(gt)\n\nmtcars %&gt;% \n  sample_n(5) %&gt;% \n  select(mpg, cyl, disp) %&gt;% \n  gt() |&gt; \n  tab_header(\n    title = md(\"**mtcars** 데이터셋 표\"),\n    subtitle = md(\"디지털 글쓰기 `gt` 패키지\")\n  ) %&gt;%\n  tab_source_note(\"표제작: 한국 R 사용자회 오픈소스 소프트웨어 개발자\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nmtcars 데이터셋 표\n\n\n디지털 글쓰기 gt 패키지\n\n\nmpg\ncyl\ndisp\n\n\n\n\n19.2\n8\n400.0\n\n\n21.5\n4\n120.1\n\n\n33.9\n4\n71.1\n\n\n22.8\n4\n140.8\n\n\n26.0\n4\n120.3\n\n\n\n표제작: 한국 R 사용자회 오픈소스 소프트웨어 개발자\n\n\n\n\n\n\n\n\n\n3.4.3 라텍 표\n라텍은 수식 뿐만 아니라 복잡하고 미려한 표도 코드를 통해 제작할 수 있다. 쿼토에서 라텍 표를 제작하기 위해서는 먼저 표제작을 위한 라텍 표코드를 준비하고, GitHub에서 팬독-필터 tarleb/parse-latex를 다음 명령어로 설치한다.\n$ quarto install extension tarleb/parse-latex\n쿼토 확장팩이 설치되면 YAML에 다음과 같이 parse-latex을 등록하여 사용한다.\n---\nfilters:\n  - parse-latex\n---\n\n\n\n\\begin{table}[h]\n\\centering\n\\begin{tabular}{|l|c|c|c|}\n\\hline\nCar Model & mpg & cyl & disp \\\\\n\\hline\nLotus Europa & 30.4 & 4 & 95.1 \\\\\nMerc 230 & 22.8 & 4 & 140.8 \\\\\nFiat 128 & 32.4 & 4 & 78.7 \\\\\nPontiac Firebird & 19.2 & 8 & 400.0 \\\\\nMerc 450SL & 17.3 & 8 & 275.8 \\\\\n\\hline\n\\end{tabular}\n\\caption{mtcars 데이터셋}\n\\end{table}\n\n\n\n\n\n\n\n\n3.4.4 표 제작 사례\n펭귄 데이터를 기반으로 gt 패키지를 사용하여 표 제목, 칼럼명, 셀값에 다양한 글꼴, 크기, 색상, 굵기를 적용한 사례가 표 3.1 에 코드로 나와 있다. 미국 웨스 앤더슨 영화 색상(Darjeeling1)을 표에 적용하고, 글꼴로 웹글꼴 구글 글꼴을 활용하여 gt 패키지로 다양한 글꼴을 적용하고, fmt_integer() 함수를 사용해서 숫자 가독성을 높이기 위해 천단위 구분자를 넣고 부가적인 디자인도 표에 적용한다.\n\nlibrary(gt)\n\nbasic_theme &lt;- function(data, ...){\n  data %&gt;% \n    tab_options(\n      column_labels.background.color = \"#F98400\",\n      table.font.size = px(12),\n      column_labels.font.size = px(20),\n      row.striping.background_color = \"#F2AD00\",\n      heading.align = \"left\",\n      heading.title.font.size = px(30)\n  )\n}\n\npalmerpenguins::penguins %&gt;% \n  select( 펭귄종=species, 섬=island, bill_length_mm, body_mass_g) %&gt;% \n  slice_sample(n = 10) %&gt;% \n  gt() %&gt;% \n    tab_header(title = md(\"팔머 펭귄 표본 **10 마리** 측정 정보\")) %&gt;% \n    tab_source_note(source_note = \"데이터: Kristen Gorman 박사와 남국 팔머 관측소(Palmer Station, Antarctica LTER)에서 수집\") %&gt;% \n    cols_label(bill_length_mm = \"부리 길이 (mm)\",\n               body_mass_g    = \"체질량 (g)\") %&gt;% \n  tab_style(\n    style = cell_text(\n      font = c(\n        google_font(name = \"Nanum Pen Script\"),\n        default_fonts()\n      ),\n      size = \"xx-large\",\n      color = \"gray35\",\n      weight = \"bolder\"\n    ),\n    locations = cells_body(columns = bill_length_mm)\n  ) %&gt;% \n  # 체질량 칼럼  ---------------\n  tab_style(\n    style = cell_text(\n      font = c(\n        google_font(name = \"Black Han Sans\"),\n        default_fonts()\n      ),\n      size = \"large\",\n      color = \"#00A08A\",\n      weight = \"bolder\"\n    ),\n    locations = cells_body(columns = body_mass_g)\n  ) %&gt;% \n  fmt_integer(body_mass_g) |&gt; \n  # 표 Header 와 첫번째 칼럼  ---------------\n  tab_style(\n    style = cell_text(\n      font = google_font(\"Do Hyeon\"), \n      size = \"large\"\n    ),\n    locations = list(\n      cells_column_labels(everything()), \n      cells_body(columns = 1)\n    )\n  ) %&gt;%   \n  # 표 제목 ---------------\n  tab_style(\n    style = cell_text(\n      font = google_font(\"Dokdo\"), \n      align = \"left\", \n      size = \"xx-large\",\n      color = \"#FF0000\"\n    ),\n    locations = cells_title(\"title\")\n  ) %&gt;%   \n  basic_theme() \n\n\n표 3.1: 글꼴, 색상, 서식을 반영한 표 제작 사례\n\n\n\n\n\n\n\n\n팔머 펭귄 표본 10 마리 측정 정보\n\n\n펭귄종\n섬\n부리 길이 (mm)\n체질량 (g)\n\n\n\n\nChinstrap\nDream\n46.0\n4,150\n\n\nAdelie\nBiscoe\n39.0\n3,550\n\n\nGentoo\nBiscoe\n50.8\n5,200\n\n\nChinstrap\nDream\n51.0\n4,100\n\n\nGentoo\nBiscoe\n46.4\n5,000\n\n\nGentoo\nBiscoe\n47.5\n4,950\n\n\nAdelie\nTorgersen\n45.8\n4,150\n\n\nAdelie\nDream\n36.8\n3,500\n\n\nGentoo\nBiscoe\n45.3\n4,200\n\n\nAdelie\nTorgersen\n36.2\n3,150\n\n\n\n데이터: Kristen Gorman 박사와 남국 팔머 관측소(Palmer Station, Antarctica LTER)에서 수집",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>문서 구성요소</span>"
    ]
  },
  {
    "objectID": "part_components.html#웹문서",
    "href": "part_components.html#웹문서",
    "title": "\n3  문서 구성요소\n",
    "section": "\n3.5 웹문서",
    "text": "3.5 웹문서\n웹 문서 구성요소는 크게 HTML, CSS, 자바스크립트로 구분된다. HTML(HyperText Markup Language)은 웹 페이지의 기본 구조와 내용을 정의하고, 다양한 태그를 사용하여 텍스트, 이미지, 링크, 리스트, 테이블 등을 웹 페이지에 배치한다. 주요 HTML 태그로 &lt;head&gt;, &lt;body&gt;, &lt;h1&gt;, &lt;p&gt;, &lt;a&gt;, &lt;img&gt; 등을 들 수 있다. CSS(Cascading Style Sheets)는 웹 페이지 레이아웃과 디자인을 담당한다. 색상, 폰트, 여백, 정렬 등을 지정하여 웹 페이지의 외관을 꾸미는 역할을 한다. CSS는 HTML 문서 내에 &lt;style&gt; 태그를 사용하여 삽입할 수 있고, 외부 저장된 CSS 파일을 연결하여 사용할 수도 있다. 자바스크립트는 웹 페이지에 동적인 기능을 부여한다. 사용자와 상호작용, 데이터 처리, 동적인 요소 변경 등을 담당하고, HTML 문서 내에 &lt;script&gt; 태그를 사용하여 삽입할 수 있다.\n\n\n\n\n\n\n\n\n\n\n\n\n웹 문서는 HTML, CSS, 자바스크립트를 사용하여 복잡한 구조와 디자인, 인터랙티브한 요소를 제공하기 위해서 개발이 필요한 반면에 아래한글과 워드 같은 워드 프로세서는 GUI 기반 문서 편집기로 사용자가 메뉴와 버튼을 통해 쉽게 문서를 서식을 지정하여 작성한다. 마크다운은 두가지 문서 저작방식의 장점을 취해 가장 단순한 형태 텍스트 기반 마크업 언어로 특수 문자를 사용하여 서식을 지정한다.\n\n\n\n\n\n\n\n\n기능/저작 도구\n웹 문서 (HTML/CSS)\n아래한글/워드\n마크다운\n\n\n\n텍스트 입력\nHTML 태그를 사용\nGUI를 통해 입력\n일반 텍스트 입력\n\n\n서식 지정\nCSS 사용\n메뉴에서 선택\n특수 문자 사용\n\n\n이미지 삽입\n\n&lt;img&gt; 태그 사용\n드래그 앤 드롭\n\n![alt](url) 형식\n\n\n표 작성\n\n&lt;table&gt; 태그 사용\n표 메뉴 사용\n파이프(|), 하이픈(-) 사용\n\n\n하이퍼링크\n\n&lt;a&gt; 태그 사용\n하이퍼링크 메뉴 사용\n\n[text](url) 형식\n\n\n문서 구조\nHTML 태그 사용\n스타일과 목차 사용\n\n# 사용\n\n\n반응형 디자인\n미디어 쿼리 사용\n없음\n없음\n\n\n인터랙티브 요소\n자바스크립트 사용\n매크로 사용\n없음\n\n\n배포\n웹 서버 사용\n\n.hwpx 파일 배포\n\n.md 파일 저장\n\n\n접근성\nARIA 사용\n제한적\n없음",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>문서 구성요소</span>"
    ]
  },
  {
    "objectID": "part_components.html#다이어그램",
    "href": "part_components.html#다이어그램",
    "title": "\n3  문서 구성요소\n",
    "section": "\n3.6 다이어그램",
    "text": "3.6 다이어그램\n다이어그램(diagram, 도표)는 복잡한 정보나 개념을 단순화하고 시각적으로 표현하여 텍스트만으로 설명하기 어려운 복잡한 데이터나 구조, 관계를 명확히 전달할 수 있어 독자가 문서를 빠르고 정확하게 이해하는 데 도움을 준다. 학술 논문, 보고서, 설명서 등에 포함된 다이어그램은 문서 전문성과 신뢰성을 높혀 효과적인 커뮤니케이션을 가능하게 한다.\n다이어그램 저작 방식은 도구를 직접 사용하는 방식과 프로그래밍 언어처럼 다이어그램 전용 언어를 사용하는 방식으로 나뉜다. 잘 알려진 다이어그램 저작 도구로 마이크로소프트 비지오(Microsoft Visio), 루시드차드(Lucidchart), 드로아이오(Draw.io) 등으로 주로 GUI를 통해 다이어그램을 직관적으로 그릴 수 있고 다이어그램 전용 언어로 그래프비즈(Graphviz)와 머메이드(Mermaid)가 대표적이다. Graphviz는 DOT 언어를 사용해 다양한 네트워크 다이어그램, 플로우 차트, 조직도, 의존성 그래프를 제작하는 반면, Mermaid는 마크다운과 유사한 문법으로 웹에서 다이어그램과 차트를 생성하는 자바스크립트 라이브러리로 HTML과 자바스크립트를 사용하는 모든 웹 페이지나 앱과 쉽게 통합된다는 장점이 있다.\n챗GPT를 활용한 디지털 글쓰기 과정을 Mermaid 코드를 이용하여 다이어그램으로 표현하면 다음과 같다. 다이어그램은 글쓰기, 구조와 외양, 배포와 공유 세가지 영역에서 챗GPT가 부기장(Copilot)으로 역할을 수행하는 것을 명확히 보여준다. 디지털 글쓰기가 글감, 표, 그래프, 코드, 그림, 도형 등 다양한 요소로 구성되며, 구조와 외양에서는 문서의 구조, 서식, 레이아웃, 참조 등이 중요하고, 배포와 공유에서는 다양한 대상, 즉 독자, 저자, 기계에게 문서가 전달되는 과정을 빠르고 명확하게 이해할 수 있도록 도와준다.\n비지오 같은 유명 GUI 도구보다 다이어그램 전용 언어를 사용하게 되면 높은 수준 사용자 정의와 자동화가 가능할 뿐만 아니라 복잡한 다이어그램도 정확하게 그릴 수 있고, 코드를 재사용함으로써 시간과 비용도 절약할 수 있다. 특히, 버전 관리 시스템에 쉽게 통합할 수 있어 팀원들과 공유와 협업이 용이하다.\n\ngraph LR\n\n    chatGPT[\"챗GPT\"] --&gt; Contents\n\n    subgraph Contents[\"디지털 글쓰기\"]\n        direction LR\n        Writing[\"글감\"] --&gt; Table[\"표\"]\n        Writing --&gt; Graph[\"그래프\"]\n        Writing --&gt; Code[\"파이썬/R/SQL&lt;br&gt;코드\"]\n        Writing --&gt; Figure[\"그림\"]\n        Writing --&gt; Diagram[\"도형\"]        \n    end\n\n    chatGPT --&gt; Format\n    Contents --&gt; Format\n\n    subgraph Format[\"구조와 외양\"]\n        direction LR\n        Theme[\"구조와 외양\"] --&gt; Title[\"문서 구조\"]\n        Theme               --&gt; Formatting[\"문서 서식\"]\n        Theme               --&gt; Layout[\"문서 레이아웃\"]\n        Theme               --&gt; reference[\"문서 참조\"]\n    end\n\n    chatGPT --&gt; Deployment\n    Format --&gt; Deployment\n\n    subgraph Deployment[\"배포와 공유\"]\n        direction LR\n        Deploy --&gt; Reader[\"독자(사람)\"]\n        Deploy --&gt; Author[\"독자(저작자)\"]\n        Deploy --&gt; Machine[\"독자(기계)\"]\n    end\n\n    style chatGPT fill:#d3d3d3,stroke:#333,stroke-width:3px\n    style Contents fill:#d3d3d3,stroke:#333,stroke-width:1px\n    style Format fill:#d3d3d3,stroke:#333,stroke-width:1px\n    style Deployment fill:#d3d3d3,stroke:#333,stroke-width:1px",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>문서 구성요소</span>"
    ]
  },
  {
    "objectID": "part_components.html#수식",
    "href": "part_components.html#수식",
    "title": "\n3  문서 구성요소\n",
    "section": "\n3.7 수식",
    "text": "3.7 수식\n수학은 공학, 물리학, 컴퓨터 과학, 경제학 등 다양한 분야에서 중심 역할을 하는 학문으로 정확하고 명료한 수학적 표기는 매우 중요하다. 라텍은 수학적 표현을 깔끔하고 정확하게 표현할 수 있는 도구 중 하나로 라텍를 이용해 다양한 수학적 표현법을 살펴보자.\n라텍은 기본적인 사칙연산에서부터 지수, 삼각함수, 적분, 행렬, 그리스 문자, 무한대 등 광범위한 수학적 표현이 가능하여 전문가 느낌의 문서나 논문, 프레젠테이션에 즉시 적용할 수 있는 고급스럽고 미련한 수식표현이 가능하다.\n기본적인 덧셈과 뺄셈은 a + b = c처럼 표현할 수 있고, 복잡한 적분도 \\int_{0}^{\\infty} e^{-x^2} dx = \\frac{\\sqrt{\\pi}}{2}와 같이 명료하게 표현할 수 있을 뿐만 아니라, 행렬이나 그리스 문자도 \\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix}와 \\alpha, \\beta, \\gamma, \\Gamma, \\pi, \\Pi, \\phi, \\Phi, \\mu 등의 명령어를 통해 표현할 수 있다.\n\n3.7.1 기본 연산자와 수\n\n\na^2 + b^2 = c^2\n\n\\[\na^2 + b^2 = c^2\n\\]\n\n\n\n3.7.2 제곱근과 지수\n\n\n\\sqrt{a^2 + b^2} = c\n\n\\[\n\\sqrt{a^2 + b^2} = c\n\\]\n\n\n\n3.7.3 삼각함수\n\n\n\\sin^2 \\theta + \\cos^2 \\theta = 1\n\n\\[\n\\sin^2 \\theta + \\cos^2 \\theta = 1\n\\]\n\n\n\n3.7.4 적분\n\n\n\\int_{0}^{\\infty} e^{-x^2} dx = \\frac{\\sqrt{\\pi}}{2}\n\n\\[\n\\int_{0}^{\\infty} e^{-x^2} dx = \\frac{\\sqrt{\\pi}}{2}\n\\]\n\n\n\n3.7.5 행렬\n\n\n\\begin{pmatrix}\na & b \\\\\nc & d\n\\end{pmatrix}\n\n\\[\n\\begin{pmatrix}\na & b \\\\\nc & d\n\\end{pmatrix}\n\\]\n\n\n\n3.7.6 그리스 문자\n\n\n\\alpha, \\beta, \\gamma, \\Gamma, \\pi, \\Pi, \\phi, \\Phi, \\mu\n\n\\[\n\\alpha, \\beta, \\gamma, \\Gamma, \\pi, \\Pi, \\phi, \\Phi, \\mu\n\\]\n\n\n\n3.7.7 무한대\n\n\n\\lim_{{n \\to \\infty}} \\frac{1}{n} = 0\n\n\\[\n\\lim_{{n \\to \\infty}} \\frac{1}{n} = 0\n\\]\n\n\n\n3.7.8 합과 곱\nMathJax에서 줄바꿈(\\\\)이 반영되지 않아 aligned를 사용했지만,\nMathJax v4 에서 기능이 구현되어 구문이 훨씬 간결해질 것으로 보인다.\n\n\n\\begin{aligned}[t]\n\\sum_{n=1}^{\\infty} \\frac{1}{n^2} = \\frac{\\pi^2}{6} \\\\\n\\prod_{i=1}^{n} a_i = a_1 \\times a_2 \\times \\cdots \\times a_n\n\\end{aligned}\n\n\\[\n\\sum_{n=1}^{\\infty} \\frac{1}{n^2} = \\frac{\\pi^2}{6}\n\\]\n\\[\n\\prod_{i=1}^{n} a_i = a_1 \\times a_2 \\times \\cdots \\times a_n\n\\]\n\n\n이 외에도 라텍로 더 복잡한 수식표현도 얼마든지 가능하다.",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>문서 구성요소</span>"
    ]
  },
  {
    "objectID": "part_components.html#참고문헌",
    "href": "part_components.html#참고문헌",
    "title": "\n3  문서 구성요소\n",
    "section": "\n3.8 참고문헌",
    "text": "3.8 참고문헌\n라텍 문서 컴파일 과정은 몇 단계에 걸쳐 이뤄진다. 먼저 xelatex 명령을 사용하여 원본 라텍 코드를 컴파일하면 .aux와 .log 파일이 생성되고, biber 또는 bibtex 명령을 실행하여 참고문헌 정보를 처리하면서 .bbl 및 .blg 파일이 생성된다. 그 다음 다시 xelatex을 두 번 실행하여 참고문헌과 인용 정보를 최종적으로 처리하고 완성된 PDF 파일이 생성된다.\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.8.1 .bib 파일\n.bib 파일은 BibTeX “서지 데이터베이스”로 쿼토, R마크다운, 주피터 노트북, 라텍 문서에서 참고문헌을 관리하는 데 사용된다. .bib 파일은 다양한 참고문헌(예: 논문, 책, 인터넷 자료 등)에 대한 메타데이터를 담고 있는데 제목, 저자, 출판일 등의 정보가 담겨있다.\n라텍으로 작성한 .tex 소스파일을 references.bib 서지 파일과 연결시켜 컴파일하여 .pdf 파일로 작업한다. 한가지 여기서 다루지 않는 사항으로 .csl 파일이 있다. .cls는 인용 스타일 언어(Citation Style Language) 파일로 XML 형식으로 작성되며, 참고문헌 서식규칙을 정의한다. 학술지, 출판사마다 각기 다른 참고문헌 스타일을 요구하기 때문에, .csl 파일에 다양한 스타일을 표현하다. 따라서, 참고문헌 콘텐츠가 담긴 .bib 파일과 참고문헌 스타일이 담긴 .cls 두파일이 멋진 참고문헌 출력을 위해 짝꿍처럼 함께 다닌다.\n다음 라텍 저작 파일은 서지 데이터가 담긴 references.bib 파일에 Kim2017과 xie2020r 두 개의 참고문헌이 들어있다.\n라텍 문서는 biblatex 패키지를 사용하여 이 references.bib 파일을 불러오고, \\cite 명령어로 특정된 참고문헌을 인용한다. 참고문헌 목록은 \\printbibliography[title=참고문헌] 명령어 출력되는데 title 옵션으로 참고문헌목록 제목을 “References”에서 “참고문헌”으로 변경하고 라텍 문서에서 인용된 참고문헌을 기본설정 .csl에 맞춰 출력한다. 만약, 특정 참고문헌 스타일을 반영하고자 한다면 라텍 파일에 .csl 파일을 지정하면 된다.\n\n\n\n.tex 소스파일\n\\documentclass{oblivoir}\n\n% 한글 글꼴 적용 ---------------------------\n\\usepackage{fontspec}\n\\setmainfont{NanumGothic} % NanumGothic 글꼴이 설치되어야 함\n\n% 참고문헌 설정 ----------------------------\n\\usepackage[backend=biber, style=numeric]{biblatex} % bibtex을 백엔드로 설정\n\\addbibresource{references.bib}\n\n\\begin{document}\n    \n    \\section{서론}\n    텍과 관련된 교육 현장에서의 활용에 대한 연구가 있습니다~\\cite{Kim2017}. \n    또한, R markdown에 대한 다양한 정보와 사용법이 소개된 책도 있습니다~\\cite{xie2020r}.\n    \n    \\printbibliography[title=참고문헌]\n    \n\\end{document}\n\n\n\n\n\n.bib 서지 파일\n@article{Kim2017,  \n    author = {김영록},  \n    title = {교육 현장에서의 텍의 활용},  \n    journal = {TeX: 조판, 그 이상의 가능성},  \n    year = {2017}\n}\n\n@book{xie2020r,  \n    title={R markdown cookbook},  \n    author={Xie, Yihui and Dervieux, Christophe and Riederer, Emily},  \n    year={2020},  \n    publisher={CRC Press}\n}\n\n\n\n\n\n서식파일 참고문헌\n\n\n3.8.2 영문 참고문헌\n한글이 포함된 PDF 문서를 작성할 때 디버깅은 생각보다 복잡할 수 있다. 따라서 대개는 문서 기본 구조를 영어로 먼저 정확히 작동하는지 확인한 후, 한글로 전환하여 개발을 진행한다. 아래 라텍 문서 예시에서 전체적인 내용을 파악하기 쉽도록 lipsum 패키지로 텍스트를 채웠으며, 2단 편집과 참고문헌 관리 기능을 구현했다. biblatex 패키지와 \\addbibresource{references.bib} 명령어를 사용하여 참고문헌파일을 지정하고, 본문에서 \\cite 명령어를 통해 참고문헌을 인용했다. 마지막으로 \\printbibliography 명령어로 참고문헌 목록을 출력했다.\n\n\n\\documentclass[twocolumn]{article}\n\\usepackage{lipsum} % lipsum 패키지 불러오기\n\n% 참고문헌\n\\usepackage[backend=biber]{biblatex}\n\\addbibresource{references.bib}\n\n% 문서 전문\n\\title{Two-Sided Lipsum Example}\n\\author{John Lee}\n\\date{\\today}\n\n\n\\begin{document}    \n    \n    \\maketitle\n    \n    \\section{Introduction}\n    \n    This is a citation~\\cite{dummy2023}.\n    \\lipsum[11] % 첫 번째 로렘 입숨 문단 생성  \n    \n    \\section{Main Body}\n    \\lipsum[2-3] % 2~3 번째 로렘 입숨 문단 생성\n    \n    \\section{Conclusion}\n    This is a book citation~\\cite{ipsum2021}.\n    \\lipsum[4] % 4번째 로렘 입숨 문단 생성\n\n\\printbibliography\n    \n\\end{document}\n\n\n\n\n\n영문 참고문헌 사례\n\n\n\n\n3.8.3 국문 참고문헌\n영문으로 작성한 작업 흐름을 그대로 이용할 수 있지만, 몇 가지 수정이 필요하다. 첫째, 영문 채우기 텍스트 패키지 ipsum을 jiwonlipsum으로 변경하여 한글 텍스트로 국문 문서임을 명확히 구성한다. 둘째, 라텍에서 한글 글꼴을 적용하지 않으면 한글 표현이 깨지거나 전혀 출력되지 않을 수 있으므로, 한글 글꼴 적용 절차를 포함한다. 참고문헌 부제목이 영문 ’Reference’에서 ’참고문헌’으로 변경하여 기본적인 한글문서 외양을 확인한다.\n\n\n\\documentclass[twocolumn]{oblivoir}\n\n% 한글 글꼴 적용 ---------------------------\n\\usepackage{fontspec}\n\\setmainfont{NanumGothic} % NanumGothic 글꼴이 설치되어야 함\n\n% 채우기 텍스트 입숨 적용 ------------------\n\\usepackage{jiwonlipsum}\n\n% 참고문헌 설정 ----------------------------\n\\usepackage[backend=biber, style=numeric]{biblatex} % biber 백엔드로 설정\n\\addbibresource{references.bib}\n\n\n% 문서의 제목, 저자, 날짜 설정\n\\title{한글 입숨 예제}\n\\author{홍길동}\n\\date{\\today}\n\n\\begin{document}    \n    \n    \\maketitle\n    \n    \\section{서론}\n    \n    참고문헌을 연구를 했습니다.~\\cite{kim2023}\n    \\jiwon[11] % 첫 번째 로렘 입숨 문단을 생성한다.\n    \n    \\section{본문}\n    또 영문 참고문헌 보고서를 연구했습니다.~\\cite{ipsum2021}\n    \\jiwon[1] % 두 번째와 세 번째 로렘 입숨 문단을 생성한다.\n    \n    \\section{결론}\n    마지막 연구했습니다.~\\cite{lee2021}\n    \\jiwon[25] % 네 번째 로렘 입숨 문단을 생성한다.\n    \n    \\printbibliography[title=참고문헌]\n    \n\\end{document}\n\n\n\n\n\n한글 참고문헌 사례",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>문서 구성요소</span>"
    ]
  },
  {
    "objectID": "part_components.html#footnotes",
    "href": "part_components.html#footnotes",
    "title": "\n3  문서 구성요소\n",
    "section": "",
    "text": "Richard Iannone (2020-04-08), “Great Looking Tables: gt (v0.2)”↩︎",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>문서 구성요소</span>"
    ]
  },
  {
    "objectID": "part_document_class.html",
    "href": "part_document_class.html",
    "title": "\n5  문서 클래스\n",
    "section": "",
    "text": "5.1 로렘 입숨\n로렘 입숨(Lorem Ipsum, 줄여서 립숨, lipsum)은 출판과 그래픽 디자인 분야에서 널리 사용되는 채우기 텍스트(dummy text)로 글꼴, 타이포그래피, 레이아웃과 같은 그래픽 요소나 시각적 연출을 검토하고 싶을 때 유용하게 쓰인다. 로렘 입숨은 최종 결과물에 들어갈 실제 텍스트가 아직 준비되지 않았을 때, 기계적으로 디자인 전반적인 느낌을 파악하기 위한 임시 채움 글로 활용된다.\n사람들은 텍스트가 보일 경우 그 내용에 집중하는 경향 때문에 로렘 입숨이 특히 진가를 발휘한다. 전형적인 로렘 입숨 텍스트는 라틴어 문장의 일부를 변형한 “Lorem ipsum dolor sit amet, consectetur adipiscing elit…”와 같은 형태로 시작된다. 디자인의 ‘보이는’ 부분을 검토할 때 방해가 되지 않는 중립적인 내용을 제공하여 디자인이나 서체 특성을 강조하고자 할 때, 로렘 입숨을 사용하면 사람들이 디자인 자체에 더 집중할 수 있게 되어, 출판사나 디자이너가 인쇄출판 시각적 요소에만 초점을 맞출 때 매우 유용하다. 1",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>문서 클래스</span>"
    ]
  },
  {
    "objectID": "part_document_class.html#lorem-ipsum",
    "href": "part_document_class.html#lorem-ipsum",
    "title": "\n5  문서 클래스\n",
    "section": "",
    "text": "로렘 입숨 (영문) 사례\n\n\n\nLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\n\n\n5.1.1 영문 입숨\n영문 입숨  패키지로 lipsum, blindtext, kantlipsum, mwe 등이 있다. lipsum 패키지는 로렘 입숨(Lorem Ipsum) 텍스트를 쉽게 생성할 수 있어서 가장 널리 사용되는 텍스트 채우기 패키지 중 하나다. 특히, 문단 수를 지정할 수 있는 기능이 있어서 문서의 길이나 복잡성에 따라 유연하게 적용할 수 있다. 예를 들어, \\lipsum[1-5] 명령어를 사용하면 5개의 로렘 입숨 문단을 생성한다.\n\n\n\\documentclass[twocolumn]{article}\n\\usepackage{lipsum} % lipsum 패키지 불러오기\n\n\\begin{document}\n\n\\title{Two-Sided Lipsum Example}\n\\author{Example Author}\n\\date{\\today}\n\n\\maketitle\n\n\\section{Introduction}\n\\lipsum[1] % 첫 번째 로렘 입숨 문단 생성\n\n\\section{Main Body}\n\\lipsum[2-3] % 2~3 번째 로렘 입숨 문단 생성\n\n\\section{Conclusion}\n\\lipsum[4] % 4번째 로렘 입숨 문단 생성\n\n\\end{document}\n\n\n\n\n\n영문 입숨 2단 문서 사례\n\n\n\n\n5.1.2 한글 입숨\njiwonlipsum 패키지는 라틴 계열 문자를 위한 lipsum 패키지와 동일한 목표를 갖지만, 한글 및 한자에 특화된 글꼴, 레이아웃 등 타이포그래피의 요소를 예제로 채우기 텍스트(dummy text)를 생성하는 패키지로 김강수님이 제작했다. jiwonlipsum 팩키지는 KTUG Private Repository에 저장되어 있어 이를 설치한 후 한글 lipsum을 사용할 수 있다. jiwonlipsum 팩키지가 저장된 KTUG Private Repository 저장소를 활용하는 방식은 다음과 같다.\n\n저장소 추가: TeX Live 또는 MiKTeX의 패키지 관리자에서 KTUG Private Repository를 추가한다.\n패키지 설치: 패키지 관리자를 통해 jiwonlipsum 패키지를 검색하고 설치한다.\nLaTeX 문서에 적용: 설치가 완료되면, LaTeX 문서의 preamble(서문) 부분에 \\usepackage{jiwonlipsum}을 추가한다.\n텍스트 생성: 문서 내에서 \\jiwonlipsum 명령어를 사용하여 한글로 된 로렘 입숨 텍스트를 생성한다.\n\n$ tlmgr repository add http://ftp.ktug.org/KTUG/texlive/tlnet/ ktug\n$ tlmgr pinning add ktug \"*\"\n$ tlmgr install jiwonlipsum\ntlmgr.pl: package repositories\n        main = https://mirror.navercorp.com/CTAN/systems/texlive/tlnet (verified)\n        ktug = http://ftp.ktug.org/KTUG/texlive/tlnet/ (not verified: pubkey missing)\nFor more about verification, see https://texlive.info/verification.html.\n[1/1, ??:??/??:??] install: jiwonlipsum @ktug [245k]\nrunning mktexlsr ...\ndone running mktexlsr.\nrunning mtxrun --generate ...\ndone running mtxrun --generate.\ntlmgr.pl: package log updated: C:/texlive/2020/texmf-var/web2c/tlmgr.log\njiwonlipsum 패키지를 사용하여 한글로 된 채우기 텍스트 사례를 보여주는 예제다. 문서형식을 두 칼럼 형식 짧은 보고서(article) 형식으로 지정하고 나서, ‘NanumGothic’ 글꼴을 사용해서 한글을 표현하기 위한 준비를 한다. 제목, 저자, 수정일 정보를 포함한 제목 페이지를 만든 후, jiwonlipsum 패키지를 활용해 한 문단의 요약(abstract)과 ‘들어가며’ 섹션에 채우기 텍스트로 텍스트를 삽입한다.\n\n\n\\documentclass[twocolumn]{article}\n\n\\usepackage{fontspec}\n\\setmainfont{NanumGothic} % NanumGothic 글꼴이 설치되어야 함\n\n\\usepackage{jiwonlipsum}\n\n\\title{멋진 \\LaTeX 제목 페이지}\n\\author{홍길동}\n\\date{\\today}\n\n\\begin{document}\n\n\\maketitle\n\n\\begin{abstract}\n\n\\jiwon[1]\n\n\\end{abstract}\n\n\\section{들어가며}\n\n\\jiwon\n\n\\end{document}\n\n\n\n\n\n한글 입숨 2단 문서 사례",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>문서 클래스</span>"
    ]
  },
  {
    "objectID": "part_document_class.html#문서-클래스",
    "href": "part_document_class.html#문서-클래스",
    "title": "\n5  문서 클래스\n",
    "section": "\n5.2 문서 클래스",
    "text": "5.2 문서 클래스\n 문서 클래스(document class)로 article, report, book 이 기본으로 제공되는 문서 클래스다. KOMA-Script는 또다른  패키지 모음으로 기본  문서 클래스(article, report, book 등) 확장 버전으로, 주로 유럽에서 널리 사용되며, 유럽의 타이포그래피와 문서 규격에 더 적합하게 설계되었다.\n\nscrartcl: article 문서 클래스 확장이며, 과학 학술지, 프리젠테이션, 짧은 보고서, 프로그램 문서, 초대장 등에 쓰이며 1~30페이지 정도 분량을 갖는 문서 작성에 좋다. 추가적인 사용자 설정 옵션과 유럽 스타일 레이아웃을 지원한다.\nscrreprt: report 문서 클래스 확장이며 중간 길이 보고서나 학위 논문 작성에 적합하고, 대략 30~200 페이지 문서 작성에 좋다. scrartcl와 마찬가지로 추가적인 사용자 설정 옵션과 유럽 스타일 레이아웃을 제공한다.\nscrbook: book 문서 클래스 확장으로, 책이나 큰 프로젝트에 적합하고, 대략 200 페이지 이상 문서 작성에 적합하다. 양쪽 페이지 레이아웃과 추가적인 사용자 설정 옵션도 지원한다.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n기능\n짧은 보고서(article)\n보고서(report)\n책(book)\n\n\n\n명령어와 환경\n\n\n장(Chapter) 명령어\n사용 불가\n사용 가능\n사용 가능\n\n\n부록(Appendix) 스타일링\n해당 없음\n부록 X\n부록 X\n\n\n부분(Parts)에 대한 새 페이지\n새 페이지 없음\n새 페이지\n새 페이지\n\n\n전문/본문/후문(Front/Main/Back matter)\n사용 불가\n사용 불가\n사용 가능\n\n\n요약(Abstract) 환경\n사용 가능\n사용 가능\n사용 불가\n\n\n기본 설정\n\n\n양면 옵션(Twoside vs Oneside)\n단면(Oneside)\n단면(Oneside)\n양면(Twoside)\n\n\n열기 위치(Openright vs Openany)\n해당 없음\n열기 위치: 어디든(Openany)\n열기 위치: 오른쪽(Openright)\n\n\n페이지 스타일(Pagestyle)\n일반(Plain)\n일반(Plain)\n헤딩(Headings)\n\n\n제목 페이지(Titlepage)\n제목 페이지 없음\n제목 페이지 사용\n제목 페이지 사용\n\n\n최하위 섹션(Lowest-level sectioning)\n하위-하위 섹션(Subsubsection)\n하위 섹션(Subsection)\n하위 섹션(Subsection)\n\n\n상단 제목(Running headings)\n섹션과 하위 섹션\n장과 섹션\n장과 섹션\n\n\n번호 매김(Numbering scope)\n연속적\n장 단위\n장 단위\n\n\n참고문헌 표시(Bibliography heading)\nReferences\nBibliography\nBibliography\n\n\n\n\n\n\n\n\n5.2.1 짧은 보고서\n짧은 보고서는 article 문서 클래스(documentclass)로 다음과 같은 구문을 갇고 컴파일하게 되면 짧은 보고서 문서형식을 갖는 PDF 파일을 얻게 된다.\n\n\n\n\n\n\n\n\n\n5.2.2 보고서\n보고서는 report 문서 클래스(documentclass)로 다음과 같은 구문을 갇고 컴파일하게 되면 보고서 문서형식을 갖는 PDF 파일을 얻게 된다.\n\n\n\n\n\n\n\n\n\n5.2.3 책\n책은 book 문서 클래스(documentclass)로 다음과 같은 구문을 갇고 컴파일하게 되면 보고서 문서형식을 갖는 PDF 파일을 얻게 된다.",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>문서 클래스</span>"
    ]
  },
  {
    "objectID": "part_document_class.html#한글문서-클래스",
    "href": "part_document_class.html#한글문서-클래스",
    "title": "\n5  문서 클래스\n",
    "section": "\n5.3 한글문서 클래스",
    "text": "5.3 한글문서 클래스\noblivoir는 memoir 클래스를 기반으로 개발된 LaTeX 문서 클래스 중 하나로, 주로 한글 문서를 작성할 때 사용되며 한글 타이포그래피와 관련된 여러 가지 기능이 포함되어 있다. oblivoir와 후속 xoblivoir 문서 클래스는 한글문서 작성을 쉽고 편리하게 지원한다.\noblivoir와 후속 xoblivoir 문서 클래스(documentclass)는 한글 문서 특성을 잘 반영하기 때문에 별도 설정없이 다음과 같은 구문을 갇고 컴파일하게 되면 한글 문서형식을 갖는 PDF 파일을 얻게 된다. 국내에서 학술 논문, 보고서, 책 등 다양한 문서를 작성할 때 널리 사용된다. (2007oblivoir?; Kim2011?)\n\n\n\n\n\n\n\n\n라텍(LaTex)은 문서 모양새에 신경쓸 필용없이 문서의 논리적 구조와 내용에 집중할 수 있게 함으로써 글쓰기 본질에 집중할 수 있다는 약속을 하지만 현실에서 용지 크기, 여백, 행간 등 초심자가 신경쓸 것이 한둘이 아니다. 이러한 문제를 해결하기 위해 oblivoir라는 라텍 문서 클래스가 개발되었다. oblivoir는 기본 한글 문서 서식을 미리 설정해 놓아, 라텍을 처음 사용하는 한글 사용자에게 진입 장벽을 대폭 낮췄다는 평가를 받고 있다.\n\n\noblivoir 문서 클래스\n\n워드 프로세서에 용지설정과 관련하여 ’공급 용지’와 ’편집 용지’라는 개념이 있다. 공급 용지는 인쇄를 위해 인쇄기에 공급되는 용지를 말하며, 편집 용지는 문서를 작성할 때 사용하는 용지를 말한다. 일반 저작자가 보통 공급 용지로 프린터에 A4 용지를 사용하고, 편집 용지는 전문서적, 만화책, 잡지 등 인쇄출판 목적에 맞춰 사륙배판, 국판, 신국판 등을 사용한다.\n\n\nA4 공급 용지를 기준으로 편집용지",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>문서 클래스</span>"
    ]
  },
  {
    "objectID": "part_document_class.html#footnotes",
    "href": "part_document_class.html#footnotes",
    "title": "\n5  문서 클래스\n",
    "section": "",
    "text": "위키백과, “로렘 입숨”↩︎",
    "crumbs": [
      "기본요소",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>문서 클래스</span>"
    ]
  },
  {
    "objectID": "theme_fonts.html",
    "href": "theme_fonts.html",
    "title": "\n7  글꼴\n",
    "section": "",
    "text": "7.1 용어 설명\n활자와 서체, 글꼴, 타이포그래프은 비슷한 개념처럼 느껴질 수 있으나 각각 다른 의미를 가지고 있다. 활자(Type)는 글자나 기호의 물리적 형태로 본래는 글자를 만드는 데 사용된 나무 또는 금속 조각을 일컫는 말이었습니다. 서체(또는 글꼴 모음, Typeface)는 글자 및 기호가 서로 비슷한 특징을 가지도록 디자인된 문자 스타일을 의미하며, ‘나눔고딕’, ‘Times New Roman’, ‘Helvetica’ 같은 이름을 가진 것이 서체다. 글꼴(Font)은 서체의 여러 변형을 총칭하는 용어로, 특정 서체에서 굵고 진한 글꼴(Bold), 기울임(italic) 등 변형이 모두 포함된다. 타이포그래피(Typography)는 활자 서체의 배열을 의미하며, 서체의 선택, 글자 크기, 줄 간격, 단어 간격, 문장 사이 간격과 맞춤 등을 조절하여 읽기 쉽고 미적으로 효과적인 텍스트 제작을 의미한다.\n전세계적으로 글꼴의 수는 무수히 많지만, 크게과 같이 크게 분류할 수 있다. 글꼴은 기본적으로 세리프(serif)와 산세리프(sans serif)의 2가지 스타일로 구분되는데 세리프는 글자의 획 끝에 작은 삐침이 있는 글꼴이며 산스(sans)는 프랑스어로 “없다”, 또는 “없이”라는 뜻이기 때문에 삐침이 없는 글꼴을 지칭한다.\n모노스페이스(monospaced) 글꼴은 코드 작성 등에서 유용하게 사용되며, 모든 글자가 같은 폭을 차지한다. Consolas나 D2 Coding은 모노스페이스 글꼴의 대표적인 예다. 디스플레이(Display)와 스크립트(Script) 글꼴은 본문보다는 제목이나 강조할 부분에서 사용되며, 디자인적인 특성이 가미되어 있다. 디스플레이 글꼴은 대체로 크고 눈에 띄는 특성을, 스크립트 글꼴은 필기체나 서명 등을 모방한 스타일을 가진다.\n수식을 표현하는데 많이 사용되는 에서 기본글꼴로 Computer Modern, AMS Euler, STIX 같은 수식전용 글꼴이 사용되어, 수학적 표기나 공식을 명확하고 정확하게 표현할 수 있도록 설계되었다. 데이터 과학에서 그래프 문법과 표 문법을 사용하여 그래프와 표를 제작할 경우 가독성을 높이고 이목을 끌 수 있도록 색상과 더불어 적절한 글꼴 선택이 필수적으로 자리잡아가고 있다.\n일반적으로 본문에는 세리프나 산세리프 글꼴이 사용되고, 제목에는 더 화려하거나 눈에 띄는 글꼴이 사용되고 증거기반 문서 행정문서가 늘어나고 과학기술 문서에 필수적인 수식 등에도 타이포그래피 중요성이 늘어나고 있다.",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>글꼴</span>"
    ]
  },
  {
    "objectID": "theme_fonts.html#용어-설명",
    "href": "theme_fonts.html#용어-설명",
    "title": "\n7  글꼴\n",
    "section": "",
    "text": "문서에 담긴 디지털 글쓰기 글꼴\n\n\n\n\n\n\n\n서체와 글꼴\n\n\n\ntypeface는 서체로 번역되고 font는 글꼴로 번역된다. 하나의 typeface에 다수 font가 포함될 수 있고, 팬그램(Pangram)은 ’모든 글자’라는 뜻으로 주어진 모든 문자를 적어도 한 번 이상 사용하여 만든 문장을 뜻한다. 팬그램은 로렘 입숨처럼 글꼴 샘플을 보여주거나 장비를 테스트하는 데 사용된다. 영어 팬그램으로 가장 유명한 ‘The quick brown fox jumps over the lazy dog’는 19세기부터 사용되어 왔다. 유사하게 한글에서는 “다람쥐 헌 쳇바퀴에 타고파”가 사용되고 있다.",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>글꼴</span>"
    ]
  },
  {
    "objectID": "theme_fonts.html#두가지-형태-글꼴",
    "href": "theme_fonts.html#두가지-형태-글꼴",
    "title": "\n7  글꼴\n",
    "section": "\n7.2 두가지 형태 글꼴",
    "text": "7.2 두가지 형태 글꼴\n글꼴(Fonts)은 문자나 기호를 디지털화하여 표현하는 데 사용되는 그래픽 디자인으로 주로 로컬 설치형 글꼴과 웹폰트 두가지 형태로 사용된다.\n로컬 설치형 글꼴은 사용자의 컴퓨터나 기기에 직접 설치되어 있는 글꼴로, 윈도우(Windows)나 맥(macOS), 리눅스(Unix/Linux)에서 기본적으로 제공되는 글꼴이나 사용자가 따로 설치하여 사용하는 글꼴을 의미한다. 인터넷 연결 없이도 사용할 수 있으며, 로컬에서 동작하므로 빠른 렌더링 속도를 제공한다는 점이 큰 장점이지만, 사용자 컴퓨터나 기기에 설치되어 있지 않은 글꼴은 보이지 않을 수 있으며, 글꼴 업데이트나 관리는 수동으로 직접해야 한다는 점은 단점이다.\n반면 웹폰트는 웹페이지를 로드할 때 서버에서 함께 다운로드되어 사용자의 브라우저에 표시된다. 구글 폰트(Google Fonts), 눈누와 같은 웹폰트 서비스를 통해 제공되며, 웹페이지를 방문하는 모든 사용자에게 동일한 글꼴를 통해 보여준다는 점은 장점이다. 다양한 스타일과 가중치(weights) 글꼴을 쉽게 사용할 수 있으며, 글꼴 업데이트나 관리가 자동화되는 장점은 있으나, 초기 페이지 로딩 시간이 길어질 수 있으며, 서버 다운 혹은 인터넷 연결 문제로 웹폰트가 정상적으로 로드되지 않을 위험도 있고, 인터넷 통신 데이터 사용량이 증가되어 속도가 늦어지고 관련 네트워크 비용이 늘어날 수 있다.\n\n\n설치형 글꼴과 웹 글꼴",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>글꼴</span>"
    ]
  },
  {
    "objectID": "theme_fonts.html#글꼴-설치",
    "href": "theme_fonts.html#글꼴-설치",
    "title": "\n7  글꼴\n",
    "section": "\n7.3 글꼴 설치",
    "text": "7.3 글꼴 설치\n구글 폰트(Google Fonts), 눈누와 같은 웹사이트에서 .ttf, .otf 형식 글꼴파일을 다운로드 한 후에 C:\\Windows\\Fonts\\ 디렉토리에 복사하거나, 다운로드 받은 글꼴파일을 더블 클릭하여 설치 버튼을 눌러 자동으로 해당 디렉토리에 설치한다. 글꼴을 시스템에 설치하면 모든 사용자가 사용할 수 있도 있지만, 프로젝트 별로 fonts 디렉토리를 생성하여 이를 프로젝트에서 불러와서 특정 글꼴을 사용하는 것도 많이 사용된다. 두가지 접근 방법 모두 장단점이 있다.\n\n\nR 폰트/글꼴 설치\n\n\n7.3.1 글꼴 패키지\n시스템에 글꼴이 설치되었다고 바로 문서 텍스트, 그래프, 표, 수식 등에 사용할 수 있는 것은 아니다. 이를 등록하는 절치가 필요하다. 언어마다 차이는 있지만 대체로 유사한 작업방식이기 때문에 R 언어를 사례로 살펴보자.\nextrafont, sysfonts, showtext, 패키지는 글꼴을 다루기 위한 다양한 기능을 제공하기 위해 개발된 글꼴 패키지로 extrafont와 sysfonts 패키지는 로컬 설치형 글꼴을 다루는데 특화되어 있는 반면에 showtext는 웹글꼴 전용 패키지다. sysfonts가 더 낮은 수준에서 더 많은 제어기능을 제공하는 반면, extrafont는 높은 수준 작업에 더 초점을 맞추고 사용자 친화적인 방법으로 글꼴을 적용하는 데 특화되어 있다.\n먼저, 로컬 컴퓨터에 설치된 R 글꼴 패키지를 확인한다.\n\nlibrary(tidyverse)\n\nfont_packages &lt;- c(\"extrafont\", \"showtext\", \"sysfonts\")\n\nfonts_list &lt;- map(font_packages, packageDescription)\n\nfonts_list |&gt; \n  enframe() |&gt; \n  mutate(패키지명 = map_chr(value, \"Package\"),\n         버전 = map_chr(value, \"Version\"),\n         날짜 = map(value, \"Date\") |&gt; as.character(),\n         URL = map(value, \"URL\") |&gt; as.character()) |&gt; \n  select(-name, -value) |&gt; \n  gt::gt()\n\n\n\n\n\n\n패키지명\n버전\n날짜\nURL\n\n\n\nextrafont\n0.19\nNULL\nhttps://github.com/wch/extrafont\n\n\nshowtext\n0.9-6\n2023-05-03\nhttps://github.com/yixuan/showtext\n\n\nsysfonts\n0.8.8\n2022-03-13\nhttps://github.com/yixuan/sysfonts\n\n\n\n\n\n\n\n\n7.3.2 네이버 글꼴 설치\n네이버 나눔스퀘어 글꼴을 로컬 컴퓨터에 다운로드 받아 설치할 수 있다. 그림 7.1 에서 “모든 사용자용으로 설치(A)”하게 되면 글꼴이 C:\\Windows\\Fonts\\ 디렉토리에 설치된다. 운영체제에 설치작업이 완료되면 R에서 사용할 수 있으나, 몇 가지 추가 작업이 필요하다. 우선, fs 패키지 file_exists() 함수를 사용하여 ‘NanumSquare.ttf’ 파일이 정상적으로 설치되었는지 확인한다. 이후 font_import() 명령어를 사용하여 R에서 해당 글꼴을 사용할 수 있도록 설정한다. 이 때, path=로 글꼴 파일의 경로를 직접 지정할 수 있으며, pattern=을 사용해서 특정 패턴에 맞는 글꼴을 일괄적으로 등록할 수도 있다. 선택한 방식에 따라 글꼴을 설치하면 이후 R 프로젝트에서 네이버 나눔스퀘어 글꼴을 자유롭게 사용할 수 있다.\n\n\n\n\n\n그림 7.1: 윈도우 나눔스퀘어 글꼴 설치\n\n\n\nlibrary(extrafont)\n\nfs::file_exists(\"C:/Windows/Fonts/NanumSquare.ttf\")\n\n# font_import(paths = \"C:/Windows/Fonts/NanumSquare.ttf\")\nfont_import(pattern = \"NanumSquare.ttf\", prompt = FALSE)\n\n동일한 방식으로 마루부리 글꼴도 설치한다.\n\nfont_import(pattern = \"MaruBuri-ExtraLight.ttf\", prompt = FALSE)\nfont_import(pattern = \"MaruBuri-Regular.ttf\", prompt = FALSE)\nfont_import(pattern = \"MaruBuri-Bold.ttf\", prompt = FALSE)\nfont_import(pattern = \"MaruBuri-Light.ttf\", prompt = FALSE)\n\n동일한 방식으로 D2 Coding 글꼴도 설치하고 RStudio IDE에서 “Tools” → “Global Options…”를 클릭하면 “Options”창이 열리고, Appearance에서 Editor font:에서 설치한 코딩전용 글꼴을 선택하고 Editor theme:도 지정한다.\n\n\nD2 코딩폰트 설치\n\n글꼴 선택은 문서나 프로젝트의 특성과 목적에 따라 크게 영향을 미친다. 제목에는 삐침이 없어 깔끔한 느낌을 주기 위해 나눔스퀘어 글꼴을 설치했고, 본문에는 삐침이 있는 마루부리 글꼴을 설치하여 가독성을 높였고, 코딩 작업에 특별히 설계된 D2코딩 글꼴을 선택하여 전체적인 글쓰기 환경을 효율적이고 편안하게 준비했다.",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>글꼴</span>"
    ]
  },
  {
    "objectID": "theme_colors.html",
    "href": "theme_colors.html",
    "title": "\n8  색상\n",
    "section": "",
    "text": "8.1 시각화 메커니즘 1\n크게 보면 기계 즉, 컴퓨터가 색을 이해하고 표현하는 RGB 체계와 사람이 색을 인지하고 이해하는 HCL 체계로 나누어 진다. 2진수로 표현된 시각적 데이터는 RGB 16진수로 변환되어 모니터에 표시되고, 물리적 광자(photon)로 사람눈에 위치한 망막에 꽂히게 되고, 사람은 뇌에서 인지한 후에 이를 처리하여 시각적인 정보를 인식하게 된다.\n따라서, 사람뇌에 인식할 수 있는 시각적인 정보로 데이터를 구성해야만 다양한 종류의 모니터를 통해 효율적이고 효과적으로 정보가 전달될 수 있다.",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>색상</span>"
    ]
  },
  {
    "objectID": "theme_colors.html#color-mechanism",
    "href": "theme_colors.html#color-mechanism",
    "title": "\n8  색상\n",
    "section": "",
    "text": "시각적 인지 메커니즘\n\n\n8.1.1 16진수 RGB 표색법\n양수 숫자나 크레파스 명칭 대신에, 일반적이고 컴퓨터가 읽어들일 수 있는 색상 표색법이 16진수 팔레트다. Cynthia Brewer 는 펜실베니아 대학에서 교수로 색상이론과 시각화에 관련된 전문분야를 갖고 있으며 특히, ColorBrewer 으로 알려진 색생체계는 웹, 출판, 색맹을 고려하여 널리 쓰이고 있다. ColorBrewer 색상체계를 R에서 시각화를 할 때 사용될 수 있게 만든 것이 RColorBrewer 패키지다. RColorBrewer Dark2 팔레트를 통해 실제로 구현된 색상체계를 살펴보자.\n\nlibrary(RColorBrewer)\nbrewer.pal(n = 8, name = \"Dark2\")\n#&gt; [1] \"#1B9E77\" \"#D95F02\" \"#7570B3\" \"#E7298A\" \"#66A61E\" \"#E6AB02\" \"#A6761D\"\n#&gt; [8] \"#666666\"\n\n# 기호는 관례로 붙이는 것이고, 16진수 문자열을 다음과 같이 파싱한다: #rrggbb에서 rr, gg, bb 각각은 적색, 녹색, 청색 채널에 대한 생상농도를 나타낸다. 각 색상은 2를 밑으로 하는 16개 숫자를 나타내고, “16진수(hexadecimal)” 혹은 줄여서 헥스(hex)로 부른다. 다음에 밑을 10으로 하는 십진수와 16진수 비교표가 다음에 나와 있다.\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\nA\nB\nC\nD\nE\nF\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n예를 들어, 팔렛트 첫 색상이 #1B9E77으로 명세되어 있다. 따라서, 녹색 채널 색상농도는 9E가 된다.\n\\[ 9E = 9 * 16^1 + 14 * 16^0 = 9 * 16 + 14 = 158 \\]\n무슨 뜻일까? 해당 채널의 가장 낮은 값은 00=0 이 되고, 가장 높은 값은 FF=255 가 된다.\n도움이 되는 기억해야될 중요한 사례가 다음에 나타나 있다. 적색, 녹색, 청색에 대한 강렬한 RGB 색상은 다음과 같다.\n\n\n\n색상\n헥스코드\n붉은색\n녹색\n파란색\n\n\n\nblue\n#0000FF\n0\n0\n255\n\n\ngreen\n#00FF00\n0\n255\n0\n\n\nred\n#FF0000\n255\n0\n0\n\n\n\n\n다음에 흑백, 회색을 표현한 것이 나타나 있다.\n\n\n\n색상\n헥스코드\n붉은색\n녹색\n파란색\n\n\n\nwhite, gray100\n#FFFFFF\n255\n255\n255\n\n\ngray67\n#ABABAB\n171\n171\n171\n\n\ngray33\n#545454\n84\n84\n84\n\n\nblack, gray0\n#000000\n0\n0\n0\n\n\n\n\n“gray” 회색으로 치환하게 되면, “gray”를 보게되는 어느 곳에서나 동일한 결과를 얻게 됨에 주목한다. 모든 채널을 최대값으로 하면 흰색, 모든 채널을 최소값으로 하면 검정색이 된다.\n\n\nR에서 색상을 지정하는 방법\n\n\n양의 정수: palette()함수로 조작하거나 검색한 현재 색상 팔레트에 인덱스를 사용.\n\n색상 명칭: colors() 함수로 검색된 색상\n\n16진수 문자열: 16진수로 구성된 3개조에 추가해서, 알파 투명도를 나타내는 네번째 채널을 넣어 16진수 4개조로 구성된 생상표로 확장하기도 한다.\n\n\nrgb(), col2rgb(), convertColor() 함수도 유용하니, 자세한 내용은 도움말을 참조한다.",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>색상</span>"
    ]
  },
  {
    "objectID": "theme_colors.html#dataviz-mechanism-hcl",
    "href": "theme_colors.html#dataviz-mechanism-hcl",
    "title": "\n8  색상\n",
    "section": "\n8.2 RGB 색상모형 대안 - HCL\n",
    "text": "8.2 RGB 색상모형 대안 - HCL\n\nRGB 색공간과 색상모형이 유일무이하고 가장 최고는 아니다. 컴퓨터 화면에 색상을 표현하는데는 자연스럽지만, 일부 영역에서 색상을 선택하는 작업에는 이런 모형을 적용하기 어렵다. 예를 들어, 사람이 구별하기는 쉽지만, 인지적으로 색상별로 비교되는 생각으로 구성된 정성적인 팔레트를 만들어 내는 방법은 명확하지 않다. 컴퓨터에 사용되는 색상을 기술하는데 RGB를 사용하지만, 사람이 색상체계를 구축하는 색공간에 RGB체계를 사용할 이유는 없다. 이점은 사람과 컴퓨터가 다른 것이고, 이를 인정해야만 된다.\n색상모형은 일반적으로 RGB와 마찬가지로 세가지 차원으로 구성된다. 이는 망막에 세가지 다른 수용체를 인간이 갖는 생리적 사실에 기인한다. RGB와 인간 시각 체계에 대한 자세한 정보는 블로그를 참고한다. 색상모형의 차원이 사람이 인식할 수 있는 식별가능한 정보량에 더 가까이 부합되면 될수록, 더욱 유용하다. 이런 부합성이 사려깊게 작성된 팔레트 생성을 가능하게 하고, 더불어 특정한 특성을 갖는 색공간에 대한 길을 연다. RGB 색체계는 인간의 인식체계와 일치성이 떨어진다. 적색, 녹색, 청색광을 탐지할 수 있는 광수용체를 갖기 때문에, 색을 인지하는 체험이 RGB 방식으로 분해된다는 것을 의미하지 않는다. 적색과 녹색을 섞은 것으로 황색을 인식하는 체험을 했는가? 물론 아니다. 생리학적인 현실은 그렇다. 또다른 RGB 대안 모형이 HSV(Hue-Saturation-Value, 색상-채도-명도)모형이다. 불행하게도, 색을 선택하는데 문제가 많은데, 이유는 색상이 서로 중첩되는 차원을 갖기 때문이다.\n사람이 인지하기 좋은 색모형은 무엇일까? CIELUV 와 CIELAB 이 가장 잘 알려진 사례다. CIELUV의 변종인 HCL(Hue-Chroma-Luminance, 색상-채도-휘도) 모형을 좀더 살펴보자. Zeileis와 동료들이 R 사용자를 위한 팩키지로 멋지게 작성했다.2 colorspace R 팩키지에 딸려있고, HCL 색상모형을 탐색하고 이용하는데 도움을 준다. 마지막으로, HCL 색모형이 ggplot2에 RColorBrewer와 마찬가지로 잘 녹여져있다.\n\n\nHCL 색상모형의 세가지 차원\n\n\n색상(Hue) : 색상은 일반적으로 “색상이 뭐지?”라고 생각할 때 생각나는 것이다. 이해가 바로되는 쉬운 것이다! 각도로 주어지고 따라서 0 에서 360 까지 값을 갖는데, 무지개 도넛을 상상하면 된다.\n\n채도(Chroma) : 채도는 색상이 얼마나 순수한지 혹은 생생한지 나타낸다. 특정 색상이 회색과 섞일 수록, 채도는 떨어진다. 가장 낮은 값은 0 으로 회색 그자체에 대응되고, 최대값은 휘도에 따라 변한다.\n\n휘도(Lumiance) : 휘도는 명도(brightness), 명도(Lightness), 광도(intensity), 명도(value)와 관련된다. 낮은 휘도는 어두움을 의미하고, 진짜 검정색은 휘도가 0 이다. 높은 휘도는 밝음을 의미하고, 진짜 흰색은 휘도가 1 이다.\n\n\n저자는 채도와 휘도를 이해하고 구별하는데 힘든 시간을 보냈다. 위에서 살펴봤듯이, 색체계는 서로 독립된 것이 아니고, 3차원 HCL 공간에 기이한 모형으로 정보를 제공하고 있다.\n위캠의 ggplot2 책에 나온 6.6 그림이 HCL 색공간을 이해하는데 도움이 된다.\n\n\nggplot2 HCL 색공간\n\n위캠 책에 언급된 내용을 다시 적으면 다음과 같다: 각 측면, 창은 휘도에 따라 가장 낮은 값에서 높은 값 순으로 HCL 공간을 슬라이스로 나누어 도식화한 것을 보여주고 있다. 0 과 100 극단 휘도값은 생략되었는데, 이유는 각각 검은 점과 흰점으로 나타나기 때문이다. 슬라이스 내부에, 중심은 채도가 0 으로, 회색에 대응된다. 슬라이스 끝쪽으로 이동하면, 채도가 증가하고, 색상이 더 순색에 가까워지고 농도가 짖어진다. 색상은 각도로 매핑된다.\ncolorspace 팩키지에 가치있는 기여는 아마도 함수를 사용해서 색상공간을 합리적 방식으로 색공간을 이리저리 돌아다닐 수 있게 만든 것이다. 이와는 대조적으로 RColorBrewer 팩키지가 제공하는 팔레트는 정교하게 제작되었지만, 불행히도 고정이다.\n인지기반 색상체계를 사용하는 것에 대한 옹호 사례와 더불어 색공간에 0 이 자리하는 것을 알려주는 중요성을 시연하고 있다.\n\n“Why Should Engineers and Scientists Be Worried About Color?”",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>색상</span>"
    ]
  },
  {
    "objectID": "theme_colors.html#viz-printer-cmyk",
    "href": "theme_colors.html#viz-printer-cmyk",
    "title": "\n8  색상\n",
    "section": "\n8.3 프린터 색상모형: CMYK 3 4\n",
    "text": "8.3 프린터 색상모형: CMYK 3 4\n\nCMYK 색상표는 시안(Cyan), 마젠타(Magenta), 옐로(Yellow), 블랙(Black = Key)를 원색으로 하여 명도가 낮아지는 감산혼합으로 주로 출력물 인쇄 혹은 사진 필림 현상에 사용되며 쿼크익스프레스, 일러스트레이터, 포토샵 등에서 CMYK 감산혼합을 지원한다. 현실적인 문제 때문에 RGB나 HSB(HSV)보다 표현 가능한 색이 적은 것으로 알려져 있다.\n학창시절 감산혼합의 색의 3원색은 빨강, 노랑, 파랑인데, CMYK는 생뚱맞게도 시안(Cyan), 마젠타(Magenta), 옐로(Yellow), 블랙(Black = Key)을 원색으로 하는데 이유는 빨강은 사실 자홍색(마젠타), 파랑은 청록색(시안)이라 정확한 색상이 후자가 맞다. 우리가 잘못 배운 탓이 크다.\nRGB 생상과 CMYK 생상을 PDF 파일로 찍어 상호 비교해보자. 5\n\n\nRGB 색상 출력\n\n\npdf(\"data/color_rgb.pdf\")\nRColorBrewer::display.brewer.all(type=\"qual\")\ndev.off()\n\n\n\nCMYK 색상 출력\n\npdf(\"data/color_cmyk.pdf\", colormodel = \"cmyk\")\nRColorBrewer::display.brewer.all(type=\"qual\")\ndev.off()",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>색상</span>"
    ]
  },
  {
    "objectID": "theme_colors.html#dataviz-color-brewer-viridis",
    "href": "theme_colors.html#dataviz-color-brewer-viridis",
    "title": "\n8  색상\n",
    "section": "\n8.4 RColorBrewer 와 viridis\n",
    "text": "8.4 RColorBrewer 와 viridis\n\n\n8.4.1 RColorBrewer\n색상선택이 가장 논란이 많고, 이리저리 만지작 거리면서 정말 많은 시간을 보내는 분야다. 지리학자이며 생상 전문가 Cynthia Brewer 교수가 출판과 웹에서 사용되는 색상표를 제작했고, 이는 RColorBrewer 팩키지에 반영되어 있다. 팩키지를 설치하고 사용하면 된다. 연관된 전체 팔레트를 살펴보는 명령어는 display.brewer.all() 이다.\n\nlibrary(RColorBrewer) # install.packages(\"RColorBrewer\")\ndisplay.brewer.all()\n\n\n\n\n\n\n\n팔레트는 종류가 많지만 다음 세가지 범주에 속한다. 위에서 아래부터 다음과 같다.\n\n\n순차적(sequential) : 낮은 것에서 높은 것으로 한쪽 극단이 흥미롭고 반대쪽 극단이 재미없는 것을 시각화하는데 매우 좋다. 예를 들어 p-값, 상관계수 (주의: 상관계수 1 이 흥미로운 것은 양수를 가정했다)\n\n정량적(quantitative) : 순서가 없는 범주형 자료를 시각화할 때 유용하다. 예를 들어, 국가나 대륙. 특수한 “쌍을 이룬” 팔레트가 있다; 예를 들어, 곡물 밀 유형같이 실험이 아닌 요인, 실험군과 대조군 같은 이진 실험 요인.\n\n발산하는(diverging) : 극단의 음수에서 극단의 양수까지 범위를 같는 것을 시각화하는데 유용한다. 이런 데이터는 극단의 값이 중간에 위치한 덜 흥미로운 지점을 지난다. 예를 들어, t-통계량, z-점수, 상관계수가 이에 속한다.\n\n명칭을 명세해서 RColorBrewer 팔렛트 하나만 볼 수 있다.\n\ndisplay.brewer.pal(n = 8, name = 'Dark2')\n\n\n\n\n\n\n\n\n8.4.2 viridis\n2015년 Stéfan van der Walt 와 Nathaniel Smith는 파이썬 matplotlib 팩키지에 사용될 새로운 색상 지도를 설계했고, SciPy 2015에서 발표했다. viridis 팩키지로 인해 R에 4가지 신규 팔레트가 추가되었다. CRAN과, GitHub에서 팩키지를 만날 수 있다.\n\n\n\n\n\n\nviridis 색상표는 완벽하게 균등하게 지각되도록 설계되었고, 정규형식에서나 흑백으로 전환되었을 때도 마찬가지다. 또한 색망을 갖는 독자도 올바르게 지각될 수 있도록 설계되었다.\n\n\n\n아직 나온지 얼마되지 않아서, 자세한 사항은 viridis 팩키지를 설치하고 소품문을 읽고 직접 경험하기 바란다.\n\n8.4.3 색맹을 갖는 사람\ndichromat 팩키지(CRAN)는 2색시자에 대한 효과적인 색상조합을 선택하는데 도움이 된다.\n\nlibrary(dichromat) # install.packages(\"dichromat\")\n\ncolorschems 목록에는 17 가지 색상조합이 담겨있는데, 적색과 녹색을 구별하는 능력이 없거나 예외적인 시력을 갖는 2색시자에게 적합하다.\n\n\n\n\n\n\n\n\ndichmat() 함수는 색상을 변환해서 다른 형태의 색맹에 근사적인 효과를 구현할 수 있어서, 후보 색상조합에 대한 효과를 평가할 수 있게 한다. data(\"dalton\") 명령어는 256 색상 팔레트를 표현하는 객체를 생성하는데, 정상 시야로 표현되는 것과, 적록(red-green) 색맹과 청녹(green-blue) 생맹으로 표현되는 것이다.(rogowitz1996ibm?)\n\npal_name &lt;- names(tvthemes:::stevenUniverse_palette)\n\nshow_all_pal &lt;- function(pal_name) {\n  exp_pal &lt;- paste0(\"tvthemes:::stevenUniverse_palette$\", pal_name)\n  \n  pal_call &lt;- eval(expr = parse(text = exp_pal))\n  \n  return(scales::show_col(pal_call))\n}\n\npurrr::walk(pal_name, ~ show_all_pal(pal_name = .x))\n\nRColorBrewer는 ColorBrewer 2.0에서 제공하는 색상 팔레트에 기반한 R 색상 패키지다. 데이터 시각화를 위한 다양한 색상 조합을 제공하며, 데이터 시각화 가독성과 해석력을 향상을 위한 발산(diverging), 연속(sequential), 범주형(qualitive) 데이터 유형에 대한 적합한 색상 팔레트가 포함되어 있다.\n\nlibrary(RColorBrewer)\n\npar(mfrow=c(1 ,3))\ndisplay.brewer.all(type=\"div\")  # 양쪽발산(diverging)\ndisplay.brewer.all(type=\"seq\")  # 연속형(sequential)\ndisplay.brewer.all(type=\"qual\") # 범주형(qualitive)\n\n\n\n\n\n\ndev.off()\n#&gt; null device \n#&gt;           1\n\npenguins 데이터셋을 활용하여 각 섬별로 펭귄의 수를 집계한 다음, Torgersen 섬의 이름을 NA(결측값)으로 변경한다. 변경된 데이터를 바탕으로 ggplot2 패키지를 사용해 막대 그래프를 생성하며, 섬의 이름을 x축에, 각 섬의 펭귄 수를 y축에 배치하고, 각 막대는 해당 섬의 이름에 따라 다른 색상으로 채워운다. 결측값(여기서는 Torgersen 섬)은 회색으로 표시되며, 나머지 색상은 RColorBrewer의 “Accent” 팔레트를 사용하여 색을 채워넣는다.\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\npenguins |&gt; \n  count(island) |&gt; \n  mutate(island = if_else(island ==  \"Torgersen\", NA_character_, island)) |&gt; \n  ggplot(aes( x = island, y = n, fill = island)) +\n    geom_col() +\n    scale_fill_brewer(palette=\"Accent\", na.value=\"grey50\")",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>색상</span>"
    ]
  },
  {
    "objectID": "theme_colors.html#정당-색상",
    "href": "theme_colors.html#정당-색상",
    "title": "\n8  색상\n",
    "section": "\n8.5 정당 색상",
    "text": "8.5 정당 색상\n더블어민주당, 국민의힘, 정의당 웹사이트에서 각 정당 로고 및 주된 로고 색상을 확인할 수 있다. 이를 바탕으로 정당별 시각화 제작에 사용될 색상으로 팔레트를 생성하여 활용한다.\n\n# 각 정당별 색상\n민주당_2색상 &lt;- c(\"#00A0E2\", \"#004EA1\")\n민주당_4색상 &lt;- c(\"#8AC452\", \"#00AA7D\", \"#008CCD\", \"#004EA1\")\n\n국힘_3색상 &lt;- c(\"#FFFFFF\", \"#E61E2B\", \"#00B5E2\")\n국힘_6색상 &lt;- c(\"#EDB19D\", \"#F18070\", \"#BDE4F8\", \"#004C7E\", \"#112C56\")\n\n정의당_3색상 &lt;- c(\"#ffed00\", \"#e8306d\", \"#00a366\", \"#623e91\")\n\n무소속_색상 &lt;- \"#999999\"\n\n# 정당, 색상코드, 시각화\nparty_palette &lt;- c(\"민주당\" = 민주당_2색상[2], \n                   \"국민의힘\" = 국힘_3색상[2], \n                   \"정의당\" = 정의당_3색상[1], \n                   \"무소속\" = 무소속_색상)\n\ndf_colors &lt;- data.frame(\n  party = names(party_palette),\n  color = party_palette\n)\n\nggplot(df_colors, aes(x = 1, y = party, fill = color)) +\n  geom_tile() +\n  scale_fill_identity() +\n  theme_void() +\n  coord_fixed(ratio = 0.1) +\n  geom_text(aes(label = str_glue(\"{party} - {color}\")))\n\n\n\n\n\n\n\n정당별 색상을 반영한 데이터 시각화 그래프 제작을 위해서 난수를 생성한 정당별 지지율 데이터를 만든 후에 정당색상을 반영한 그래프를 제작한다.\n\nparty_name &lt;- c(\"민주당\", \"국민의힘\", \"정의당\", \"무소속\")\nvotes &lt;- c(runif(1, min=.4, max=.5),\n           runif(1, min=.4, max=.5),\n           runif(1, min=.0, max=.05),\n           runif(1, min=.0, max=.05))\n\ntibble(party_name, votes) |&gt; \n  mutate(party_name = factor(party_name, levels = c(\"민주당\", \"국민의힘\", \"정의당\", \"무소속\"))) |&gt; \n  ggplot(aes(x = party_name, y = votes, fill = party_name)) +\n    geom_col() +\n    scale_fill_manual(values = party_palette) +\n    scale_y_continuous(labels = scales::percent) +\n    labs(x = \"\",\n         y = \"지지율\",\n         fill = \"정당명\",\n         title = \"정당별 지지율\")",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>색상</span>"
    ]
  },
  {
    "objectID": "theme_colors.html#이미지-색상",
    "href": "theme_colors.html#이미지-색상",
    "title": "\n8  색상\n",
    "section": "\n8.6 이미지 → 색상",
    "text": "8.6 이미지 → 색상\n이미지에서 색상을 출력한 후에 이를 팔레트로 만들어서 시각화한 사례를 만들어보자. 태극기에서 가장 많은 색상을 선택하여 16진수 색상코드를 추출한다. magick 패키지와 생상에서 데이터프레임 변환을 위해 imager 패키지를 사용해서 변환한다. 6\n\nlibrary(scales)\nlibrary(imager)\nlibrary(magick)\n\nflag_svg &lt;- image_read_svg(\"images/korean_flag.svg\")\n\nflag_palette &lt;- flag_svg |&gt; \n  image_resize(\"500\") |&gt; \n  image_quantize(max = 4, colorspace=\"RGB\") |&gt; \n  magick2cimg() |&gt; \n  RGBtoHSV() |&gt; \n  as.data.frame(wide=\"c\") %&gt;%  #3 making it wide makes it easier to output hex colour\n  mutate(hex=hsv(rescale(c.1, from=c(0,360)),c.2,c.3),\n         hue = c.1,\n         sat = c.2,\n         value = c.3) %&gt;%\n  count(hex, hue, sat,value, sort=T) %&gt;% \n  mutate(colorspace = \"RGB\") |&gt; \n  pull(hex)\n\nflag_colors_gg &lt;- tibble(colors = flag_palette) |&gt; \n  ggplot(aes(x = 1, y = 1:length(flag_palette), fill = colors)) + \n    geom_tile() +\n    scale_fill_identity() +\n    theme_void() + \n    coord_fixed(ratio = 0.2) +\n    geom_text(aes(label = str_glue(\"{colors}\")))  \n\n태극기 이미지를 ggplot으로 시각화한다.\n\nlibrary(ggimage)\n\nflag_image_gg &lt;- ggplot() +\n  geom_image(aes(x=0, y=0, image=\"images/korean_flag.svg\"), size=1) +\n  coord_cartesian(xlim=c(-1, 1), ylim=c(-1, 1)) +\n  theme_void()  \n\n태극기에서 추출한 색상을 바탕으로 막대그래프에 색상을 입혀 시각화한다.\n\nflag_penguin_gg &lt;- penguins |&gt; \n  count(island) |&gt; \n  mutate(island = if_else(island ==  \"Torgersen\", NA_character_, island)) |&gt; \n  ggplot(aes( x = island, y = n, fill = island)) +\n    geom_col() +\n    scale_fill_manual(values = flag_palette[2:4], na.value=\"grey50\") +\n    theme(legend.position = \"top\")\n\n태극기, 태극기 색상, 막대그래프 시각화를 한번에 요약하여 시각화한다.\n\nlibrary(patchwork)\n\nprint((flag_image_gg + flag_colors_gg) / flag_penguin_gg)",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>색상</span>"
    ]
  },
  {
    "objectID": "theme_colors.html#footnotes",
    "href": "theme_colors.html#footnotes",
    "title": "\n8  색상\n",
    "section": "",
    "text": "A Better Default Colormap for Matplotlib, SciPy 2015, Nathaniel Smith and Stéfan van der Walt↩︎\n알아봅시다 - 디스플레이 화질 구성 요소↩︎\n위키백과, “CMYK color model”↩︎\n블로그 아이디어, “CMYK 색상표”↩︎\nOne Tipe Per Day, “draw figures in CMYK mode in R”↩︎\nextracting colours from your images with image quantization↩︎",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>색상</span>"
    ]
  },
  {
    "objectID": "theme_ggplot.html",
    "href": "theme_ggplot.html",
    "title": "\n9  그래프 테마\n",
    "section": "",
    "text": "9.0.1 hrbrthemes\n밥 루디스가 제작한 hrbrthemes 테마 패키지는 특히 텍스트가 많은 비즈니스 유형의 프레젠테이션에 적합한 테마와 테마 구성 요소를 제공한다.\nlibrary(hrbrthemes)\n\nhrbr_themes_name &lt;- c(\"theme_ipsum\", \"theme_ipsum_ps\", \"theme_ipsum_es\", \"theme_ipsum_rc\", \"theme_ipsum_ps\", \"theme_ipsum_pub\", \"theme_ipsum_tw\", \"theme_modern_rc\", \"theme_ft_rc\")\n\nhrbr_themes_vector &lt;- c(theme_ipsum, theme_ipsum_ps, theme_ipsum_es, theme_ipsum_rc, theme_ipsum_ps, theme_ipsum_pub, theme_ipsum_tw, theme_modern_rc, theme_ft_rc)\n\nhrbr_theme_output &lt;- map2(hrbr_themes_name, hrbr_themes_vector, draw_themes)\n\nhrbrtheme_gg &lt;- patchwork::wrap_plots(hrbr_theme_output)\n\nhrbrtheme_gg\n\nragg::agg_jpeg(\"images/hrbrtheme_gg.jpeg\",\n               width = 10, height = 7, units = \"in\", res = 600)\nhrbrtheme_gg\ndev.off()",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>그래프 테마</span>"
    ]
  },
  {
    "objectID": "theme_ggplot.html#사용자-테마",
    "href": "theme_ggplot.html#사용자-테마",
    "title": "\n9  그래프 테마\n",
    "section": "\n9.1 사용자 테마",
    "text": "9.1 사용자 테마\n설치한 한글 글꼴과 색상을 매칭하여 사용자 맞춤 테마(theme_penguin)을 생성하고 색상은 wesanderson 패키지에서 Darjeeling1 5가지 색상을 사용하여 시각화한다.\n\nextrafont::loadfonts(\"win\")\n\ntheme_penguin &lt;- function() {\n  \n  # ggthemes::theme_tufte() +\n  theme_minimal() +\n    \n  theme(\n      plot.title     = element_text(family = \"NanumSquare\", size = 18, face = \"bold\"),\n      plot.subtitle  = element_text(family = \"MaruBuri\", size = 13),\n      axis.title.x   = element_text(family = \"MaruBuri\"),\n      axis.title.y   = element_text(family = \"MaruBuri\"),\n      axis.text.x    = element_text(family = \"MaruBuri\", size = 11),\n      axis.text.y    = element_text(family = \"MaruBuri\", size = 11),\n      legend.title   = element_text(family = \"MaruBuri\", size=13),\n      plot.caption   = element_text(family = \"NanumSquare\", color = \"gray20\")\n  )\n}\n\ndarjeeling1_palette &lt;- wes_palette(\"Darjeeling1\", n = 5)\n\nggplot_penguins_gg &lt;- penguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n    geom_point(aes(color = species, shape = species), size = 3) +\n    geom_smooth(method = \"lm\", se = FALSE, color = \"black\")  +\n    labs(\n      title = \"물갈퀴 길이와 체중 회귀분석\",\n      subtitle = \"남극 파머 펭귄 데이터셋\",\n      x = \"물갈퀴 길이 (mm)\",\n      y = \"체중 (g)\",\n      color = \"펭귄종\",\n      caption = \"자료출처: palmerpenguins 패키지\"\n    ) +\n  guides(shape = \"none\") +\n  scale_color_manual(values =  darjeeling1_palette) +\n  theme_penguin()\n\nggplot_penguins_gg\n\nggsave(\"images/ggplot_penguins_gg.png\")",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>그래프 테마</span>"
    ]
  },
  {
    "objectID": "theme_ggplot.html#그래프-자동-설정",
    "href": "theme_ggplot.html#그래프-자동-설정",
    "title": "\n9  그래프 테마\n",
    "section": "\n9.2 그래프 자동 설정",
    "text": "9.2 그래프 자동 설정\n작성한 테마를 매번 코드를 “복사하여 붙여넣기” 하여 사용하는 대신 .Rprofile 파일에 반영하여 매번 ggplot 시각화를 할 때 사용하는 방법을 살펴보자. usethis 패키지 edit_r_profile() 함수를 호출하여 앞서 작성한 테마를 반영한다.\n\nusethis::edit_r_profile()\n\ntheme_penguin() 테마를 ggplot2 패키지 theme_set()으로 설정하고 기본 색상을 정의하면 시각화 그래프에 반영하여 사용할 수 있다.\n\nsuppressWarnings(suppressMessages({\n\n  extrafont::loadfonts(\"win\")\n\n\n  ## 테마 (글꼴) -----------------------------\n  theme_penguin &lt;- function() {\n\n    # ggthemes::theme_tufte() +\n    ggplot2::theme_minimal() +\n\n      ggplot2::theme(\n        plot.title     = ggplot2::element_text(family = \"NanumSquare\", size = 18, face = \"bold\"),\n        plot.subtitle  = ggplot2::element_text(family = \"MaruBuri\", size = 13),\n        axis.title.x   = ggplot2::element_text(family = \"MaruBuri\"),\n        axis.title.y   = ggplot2::element_text(family = \"MaruBuri\"),\n        axis.text.x    = ggplot2::element_text(family = \"MaruBuri\", size = 11),\n        axis.text.y    = ggplot2::element_text(family = \"MaruBuri\", size = 11),\n        legend.title   = ggplot2::element_text(family = \"MaruBuri\", size=13),\n        plot.caption   = ggplot2::element_text(family = \"NanumSquare\", color = \"gray20\")\n      )\n  }\n\n  ## 색상\n  ### 웨스 앤더슨\n  color_palette &lt;- wesanderson::wes_palette(\"Darjeeling1\", n = 5)\n\n  ggplot2::theme_set(theme_penguin())\n\n}))\n\n.Rprofile 파일에 ggplot() 사용자 정의 테마가 지정되어 있기 때문에 새로 R 세션을 시작하면 theme_penguin() 테마 및 웨스 앤더스 color_palette 색상 팔레트도 사용할 수 있다.\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\npenguins_theme_gg &lt;- penguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n    geom_point(aes(color = species, shape = species), size = 3) +\n    geom_smooth(method = \"lm\", se = FALSE, color = \"black\")  +\n    labs(\n      title = \"물갈퀴 길이와 체중 회귀분석\",\n      subtitle = \"남극 파머 펭귄 데이터셋\",\n      x = \"물갈퀴 길이 (mm)\",\n      y = \"체중 (g)\",\n      color = \"펭귄종\",\n      caption = \"자료출처: palmerpenguins 패키지\"\n    ) +\n  guides(shape = \"none\") +\n  scale_color_manual(values =  color_palette) +\n  theme_penguin()\n\nragg::agg_jpeg(\"images/penguins_theme_gg.jpg\",\n              width = 10, height = 7, units = \"in\", res = 600)\npenguins_theme_gg\ndev.off()\n\n\n\n펭귄 데이터 사용자 테마 적용 그래프",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>그래프 테마</span>"
    ]
  },
  {
    "objectID": "theme_gt.html",
    "href": "theme_gt.html",
    "title": "\n10  표 테마\n",
    "section": "",
    "text": "10.1 gt 표 작성하기\ngt 패키지는 R Tidyverse 생태계에 속한 표 제작 목적으로 특별히 제작된 패키지로 그래프 문법에 기반한 ggplot2 패키지에 친숙하신 저자는 쉽게 표도 gt 패키지를 사용해서 다양한 표 제작이 가능하다. 다음 예시에서는 palmerpenguins 데이터 패키지 penguins 데이터셋을 활용하여 “남극 펭귄 서식섬과 종 빈도표”를 제작한다.\npenguins_gt 변수에 저장된 gt 표를 저장한다. gt 패키지의 다양한 기능을 활용하여 복잡한 표도 손쉽게 작성할 수 있다는 것을 다시 확인할 수 있다.\nlibrary(tidyverse)\nlibrary(palmerpenguins)\nlibrary(gt)\nlibrary(gtExtras)\nlibrary(magick)\n\npenguins_gt &lt;- penguins |&gt; \n  count(species, island) |&gt; \n  pivot_wider(names_from = island, values_from = n, values_fill = 0) |&gt; \n  as_tibble() |&gt; \n  gt(rowname_col = \"species\") |&gt; \n    tab_header(\n      title = md(\"남극 펭귄 **서식섬과 종** 빈도표\"),\n      subtitle = md(\"`palmerpenguins` 데이터 패키지\")\n    ) |&gt; \n    grand_summary_rows(\n      columns = c(Biscoe, Dream, Torgersen),\n      fns = list(\n        '합계' = ~sum(.) \n      ),\n      fmt = ~ fmt_number(., use_seps = FALSE, decimals = 0),\n      missing_text = '-'\n    )  |&gt; \n    cols_align(\"center\") |&gt; \n    opt_row_striping() |&gt; \n    tab_source_note(\n      source_note = md(\"자료출처: `penguins` 데이터셋\")\n  )\n\npenguins_gt\n\n\n\n\n\n\n\n남극 펭귄 서식섬과 종 빈도표\n\n\n\npalmerpenguins 데이터 패키지\n\n\n\nBiscoe\nDream\nTorgersen\n\n\n\n\nAdelie\n44\n56\n52\n\n\nChinstrap\n0\n68\n0\n\n\nGentoo\n124\n0\n0\n\n\n합계\n168\n124\n52\n\n\n\n자료출처: penguins 데이터셋",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>표 테마</span>"
    ]
  },
  {
    "objectID": "theme_gt.html#gt-표-작성하기",
    "href": "theme_gt.html#gt-표-작성하기",
    "title": "\n10  표 테마\n",
    "section": "",
    "text": "라이브러리 가져오기: tidyverse, palmerpenguins, gt, gtExtras, magick.\n\npenguins 데이터를 사용하여 종(species)과 서식섬(island)에 따른 빈도를 집계하고 표제작에 맞춰 피벗 테이블을 생성한다.\n\ngt() 함수를 이용하여 gt 표를 초기화하고, rowname_col 인자로 “species”를 지정하여 행 이름을 설정한다.\n\ntab_header() 함수로 표 제목과 부제목을 지정한다.\n\ngrand_summary_rows() 함수를 사용하여 각 서식섬(Biscoe, Dream, Torgersen) 합계를 계산한다.\n\ncols_align(\"center\")을 통해 텍스트를 가운데 정렬한다.\n\nopt_row_striping() 함수로 행에 스트라이핑을 추가하여 가독성을 높인다.\n\ntab_source_note() 함수로 표 출처를 표기한다.\n\n\n\n\n10.1.1 기본 색상과 스타일\n웹 프로그램을 제작할 때 HTML로 콘텐츠를 제작하고 CSS/SCSS 파일로 스타일을 적용하는 것처럼 유지보수성이 뛰어나고 가독성이 좋은 표를 제작하기 위해 저자가 익혀야 되는 필수적인 기본기 중 하나다. penguins_gt 표는 핵심 정보가 잘 요약되어 있지만, 색상이나 다른 외양 관련 설정은 기본설정값만 따르고 있다.\ngt 패키지 opt_stylize() 함수는 표 스타일링에 다양한 선택지를 제공한다. 미리 정의된 배경색, 선 색상, 선 스타일 등을 다르게 적용할 수 있어 스타일은 총 36개에 이른다. 표 테두리, 표 요약 부분과 스텁(stub)에 더 어두운 색상을 적용, 수직선 반영여부가 포함된다.\nR 코드 opt_colors 벡터에 총 6가지 색상(파란색, 청록색, 분홍색, 녹색, 붉은색, 회색) 중 5개 색상을 지정하고, draw_color_gt 함수를 이용하여 이 색상들을 penguins_gt 표에 opt_stylize 함수를 호출하여 표 색상을 적용한다.\n\nopt_colors &lt;- c(\"blue\", \"cyan\", \"green\", \"red\", \"gray\")\n\ndraw_color_gt &lt;- function(gt_color = \"blue\") {\n  penguins_gt |&gt; \n    opt_stylize(style = 1, color = gt_color)\n}                \n\ngt_colors_list &lt;- map(opt_colors, draw_color_gt)\n\n\nfor(i in 1:length(opt_colors)) {\n  gtsave(gt_colors_list[[i]], str_glue(\"images/gt_theme_{opt_colors[i]}.png\"))\n}\n\n\n\n\n\n\n\n\n\n\n10.1.2 스타일\ngt 패키지는 opt_stylize() 함수를 통해서 색상뿐만 아니라 스타일도 달리해서 표를 제작할 수 있다. gt 패키지 1 ~ 6까지 번호 총6가지 스타일 선택이 가능하고, 기본값은 1 로 설정되어 있고, 저자가 복잡한 설정 없이 번호를 지정함으로써 표 디자인을 빠르게 변경할 수 있다. 번호로 스타일을 선택하게 되면, 데이터 분석과정에서 다양한 표 스타일을 빠르게 시험하고 가장 적절한 표를 신속히 제작하는데 도움이 된다.\n\nopt_styles &lt;- 1:5\n\ndraw_style_gt &lt;- function(opt_sytle, gt_color = \"blue\") {\n  penguins_gt |&gt; \n    opt_stylize(style = opt_sytle, color = gt_color)\n}                \n\ngt_styles_list &lt;- map(opt_sytles, draw_style_gt)\n\n\nfor(i in 1:length(opt_styles)) {\n  gtsave(gt_styles_list[[i]], str_glue(\"images/gt_theme_style_{opt_styles[i]}.png\"))\n}",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>표 테마</span>"
    ]
  },
  {
    "objectID": "theme_gt.html#gtextra",
    "href": "theme_gt.html#gtextra",
    "title": "\n10  표 테마\n",
    "section": "\n10.2 gtExtra\n",
    "text": "10.2 gtExtra\n\ngtExtras 패키지는 gt 패키지를 보완하여 더 아름다운 표를 생성할 수 있도록 도와주는 목적으로 개발되었다. gt 패키지에서 구현되지 않은 기능을 추가하거나, 반복되는 코드를 줄이기 위한 래퍼(wrapper) 함수로 작성되었다. gt 패키지를 확장한 다양한 기능이 있지만 테마와 관련된 사항을 집중적으로 살펴보자.\nggplot2 패키지를 활용하여 그래프 문법에 맞춰 그래프를 제작한 경험이 있다면, 자주 theme_*() 함수를 사용했을 것이다. 마찬가지로 ggplot2 그래프 테마 theme_minimal(), theme_grey()에 대응되는 테마가 gtExtras 패키지에 gt_theme_538(), gt_theme_espn(), gt_theme_nytimes(), gt_theme_guardian(), gt_theme_dot_matrix(), gt_theme_dark(), gt_theme_excel(), gt_theme_pff() 포함되어 있다. 주목할 점은 언론사와 단체에서 사용되는 스타일이 대거 포함되어 있다는 점이다.\ngt_theme_espn() 함수는 gt 패키지로 생성된 표에 ESPN 테마를 적용한다. 이 함수는 gt 테이블 객체(gt_tbl 클래스)를 인자로 받으며, 선택적으로 gt::table_options()에 전달할 추가 인자를 받을 수 있다. 반환 값은 gt_tbl 클래스의 객체이다.\n다음은 다른 테마 함수들에 대한 간략한 설명이다:\n\n\n\n\n\n\n테마명\n테마 설명\n\n\n\ngt_theme_538()\nFiveThirtyEight 스타일 테마 적용\n\n\ngt_theme_espn()\nESPN 스타일 테마 적용\n\n\ngt_theme_nytimes()\nNew York Times 스타일 테마 적용\n\n\ngt_theme_guardian()\n가디언진(The Guardian) 스타일 테마 적용\n\n\ngt_theme_dot_matrix()\n도트 매트릭스 스타일 테마 적용\n\n\ngt_theme_dark()\n어두운 배경 테마 적용\n\n\ngt_theme_excel()\n마이크로소프트 엑셀 스타일 테마 적용\n\n\ngt_theme_pff()\nPFF(Pro Football Focus, 스포츠 분석회사) 스타일 테마 적용\n\n\n\n언론사와 미국 풋볼 리그 스포츠 분석에 특화된 PFF 스타일을 표에 적용해보자.\n\ngtExtra_themes &lt;- c(gt_theme_538, gt_theme_espn, gt_theme_nytimes, gt_theme_guardian, gt_theme_pff)\n\ngtExtra_themes_names &lt;- c(\"gt_theme_538\", \"gt_theme_espn\", \"gt_theme_nytimes\",\n                          \"gt_theme_guardian\",\"gt_theme_pff\")\n\ndraw_gtExtras_theme &lt;- function(gt_theme, gtExtra_themes_names) {\n  penguins_gt |&gt; \n    gt_theme() |&gt; \n    tab_header(\n      title = md(\"남극 펭귄 **서식섬과 종** 빈도표\"),\n      subtitle = gtExtra_themes_names)\n}\n\n# draw_gtExtras_theme(gtExtra_themes[5][[1]])\n## gtExtras 테마적용 표 -------------------\n\ngtExtra_styles_list &lt;- vector(mode =\"list\", length = length(gtExtra_themes))\n\nfor(i in 1:length(gtExtra_themes)) {\n  gtExtra_styles_list[[i]] &lt;-  draw_gtExtras_theme(gtExtra_themes[i][[1]], gtExtra_themes_names[i])\n}\n\n## 테마 표 png 파일 저장 -------------------\n\ngtExtras_path_filenames &lt;- vector(mode = \"character\", length = length(gtExtra_themes))\n\nfor(i in 1:length(gtExtra_themes)) {\n  gtExtras_path_filenames[i] &lt;-  str_glue(\"images/gtExtras_theme_{gtExtra_themes_names[i]}.png\")\n}\n\nfor(i in 1:length(gtExtra_themes)) {\n  gtsave(gtExtra_styles_list[[i]],\n         str_glue(\"images/gtExtras_theme_{gtExtra_themes_names[i]}.png\"))\n}",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>표 테마</span>"
    ]
  },
  {
    "objectID": "theme_gt.html#사용자-정의-테마",
    "href": "theme_gt.html#사용자-정의-테마",
    "title": "\n10  표 테마\n",
    "section": "\n10.3 사용자 정의 테마",
    "text": "10.3 사용자 정의 테마\n사용자 정의 테마가 필요한 이유는 다양하지만, 보고서나 PPT 발표에서 동일한 스타일과 구성을 가진 표를 사용하면 데이터를 더 쉽고 빠르게 이해할 수 있고 동일한 일관성은 수작없이 반영할 수 있고 독자에게는 전문성을 각인시킬 수 있는 점이 크다.\ngtExtras와 같은 패키지에서 제공되는 테마는 코드 한 줄로 빠르고 깔끔한 표를 만들 수 있어 시간을 절약할 수 있다는 큰 장점이 있지만, 특정 요구사항이나 브랜딩 지침을 완전히 맞춤화하기 쉽지 않고, 복잡한 데이터 구조나 특별한 시각화 요구사항을 충족시키는 데에도 한계가 있다.\n사용자 정의 테마를 개발함으로써 gtExtras에서 제공하는 테마처럼 표 제작을 빠르고 편하게 지원할 수 있으면서도, 저자가 필요로 하는 브랜드나 스타일을 반영할 수 있다. 이렇게 하면 표가 더 전문적이면서도 개성있게 작성할 수 있다.\n\n10.3.1 gtExtras 확장\npenguins_gt라는 기존 gt 표 객체에 gt_theme_538() 테마를 선택하고 글꼴, 색상, 정렬 등 세부적인 작업을 진행하고 그 결과를 .png 파일로 저장한다. gt 패키지는 tidyverse 생태계 일원으로 파이프 연산자를 통해 세부적인 기능을 긴밀히 조합하여 단순한 코드로 제작되지만 최종 결과물로 상당히 높은 난이도를 갖는 표를 제작할 수 있다.\n\ngt_theme_538(): FiveThirtyEight 스타일 테마 적용\ntab_options(): 테이블의 글꼴, 제목 크기, 배경색 등 다양한 표 선택옵션 설정\ncols_align(): 숫자형 열은 가운데 정렬하고, 문자형 열은 자동 정렬\ntab_style(): “MaruBuri” 글꼴과 굵은 글씨체를 제목, 본문, 열에 적용\ngtsave(): 최종적으로 작업한 표를 PNG 이미지로 저장\n\n\npenguins_theme_gt &lt;- penguins_gt |&gt; \n  gt_theme_538() |&gt; \n  tab_options(\n    # column_labels.background.color = '#1E61B0', # R logo 파란색\n    table.font.names =\"NanumSquare\",    \n    heading.title.font.size = px(26),\n    heading.subtitle.font.size = px(16),    \n    heading.background.color = \"transparent\", \n    column_labels.font.weight = 'bold',\n    table_body.hlines.width = px(0),\n    data_row.padding = px(6),\n    heading.align = 'center',\n    stub.background.color = \"#ffffff\",\n    stub.font.weight = \"bold\",\n    source_notes.font.size = px(10),\n    row.striping.include_table_body = TRUE\n  ) |&gt; \n  cols_align( align = \"center\", columns = where(is.numeric)) |&gt; \n  cols_align( align = \"auto\", columns = where(is.character)) |&gt; \n  ## 글꼴 달리 적용\n  tab_style(\n    style = cell_text(\n      font = \"MaruBuri\",      \n      weight = 'bold' \n    ),\n    locations = cells_title(groups = 'subtitle')\n  ) |&gt; \n  tab_style(\n    style = cell_text(\n      font = \"MaruBuri\",      \n      weight = 'bold' \n    ),\n    locations = cells_body()\n  ) |&gt; \n  tab_style(\n    style = cell_text(\n      font = \"MaruBuri\",      \n      weight = 'bold' \n    ),\n    locations = cells_column_labels()\n  ) |&gt; \n  tab_style(\n    style = cell_text(\n      font = \"MaruBuri\",      \n    ),\n    locations = cells_source_notes()\n  )\n\npenguins_theme_gt |&gt; \n  gtsave(filename = \"images/penguins_theme_gt.png\")\n\n\n\ngt 사용자 정의 테마 적용 표\n\n\n10.3.2 gt_theme_hangul() 테마\ngt_theme_538() 함수처럼 사용자 정의 함수를 gt_theme_hangul() 테마명을 지정해 두면 모든 표에 통일성을 유지한 테마를 간편하게 적용시킬 수 있다.\ngt_tbl 데이터프레임을 입력받아 gt_theme_538()을 기본표 테마로 지정하고, tab_options() 함수를 통해 글꼴, 제목 크기, 배경색 등을 설정하고, 나눔스퀘어(NanumSquare), 마루부리(MaruBuri) 글꼴을 사용하여 한글 표에 더 적합한 스타일을 적용하고, cols_align()과 tab_style() 함수를 사용해서 숫자형 열(칼럼)은 가운데 정렬시키고, 문자형 열은 자동 정렬토록 하고, 특정 셀에 굵은 글씨체와 각기 다른 글꼴을 적용하여 좀더 독특하고 전문적인 느낌을 심는다. tab_style() 기능을 이용해 표 홀수 번째 행에만 회색 배경(‘grey90’)을 적용하여 가독성을 높게 한다. 마지막으로 사용자 정의 테마 함수도 예를 들어 기억하기 좋게 gt_theme_hangul()으로 작명하여 문서에서 표가 필요한 부분에 별도 검색작업 없이 적용시킬 수 있도록 한다.\n\ngt_theme_hangul &lt;- function(gt_tbl) {\n  \n  # Grab number of rows of data from gt object\n  n_rows &lt;- nrow(gt_tbl$`_data`)\n  \n  gt_tbl |&gt; \n    gt_theme_538() |&gt; \n    tab_options(\n      # column_labels.background.color = '#1E61B0', # R logo 파란색\n      table.font.names =\"NanumSquare\",    \n      heading.title.font.size = px(26),\n      heading.subtitle.font.size = px(16),    \n      heading.background.color = \"transparent\", \n      column_labels.font.weight = 'bold',\n      table_body.hlines.width = px(0),\n      data_row.padding = px(6),\n      heading.align = 'center',\n      stub.background.color = \"#ffffff\",\n      stub.font.weight = \"bold\",\n      source_notes.font.size = px(10),\n      row.striping.include_table_body = FALSE\n    ) |&gt; \n    cols_align( align = \"center\", columns = where(is.numeric)) |&gt; \n    cols_align( align = \"auto\", columns = where(is.character)) |&gt; \n    ## 글꼴 달리 적용\n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",      \n        weight = 'bold' \n      ),\n      locations = cells_title(groups = 'subtitle')\n    ) |&gt; \n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",      \n        weight = 'bold' \n      ),\n      locations = cells_body()\n    ) |&gt; \n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",      \n        weight = 'bold' \n      ),\n      locations = cells_column_labels()\n    ) |&gt; \n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",      \n      ),\n      locations = cells_source_notes()\n    ) |&gt; \n    tab_style(\n      style = cell_fill(color = 'grey90'),\n      locations = cells_body(rows = seq(1, n_rows, 2))\n    )    \n}\n\npenguins_gt |&gt; \n  gt_theme_hangul()\n\n\n\n\n\n\n\n남극 펭귄 서식섬과 종 빈도표\n\n\n\npalmerpenguins 데이터 패키지\n\n\n\nBiscoe\nDream\nTorgersen\n\n\n\n\nAdelie\n44\n56\n52\n\n\nChinstrap\n0\n68\n0\n\n\nGentoo\n124\n0\n0\n\n\n합계\n168\n124\n52\n\n\n\n자료출처: penguins 데이터셋",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>표 테마</span>"
    ]
  },
  {
    "objectID": "theme_gt.html#rprofile-설정작업",
    "href": "theme_gt.html#rprofile-설정작업",
    "title": "\n10  표 테마\n",
    "section": "\n10.4 .Rprofile 설정작업",
    "text": "10.4 .Rprofile 설정작업\n.Rprofile 파일에 테마 함수를 반영시키면 R 세션을 시작할 때마다 테마가 자동으로 로드되어 일일이 코드를 실행할 필요가 없어 작업 효율성을 크게 높여줌은 물론, 프로젝트 간 일관된 스타일과 브랜딩을 유지할 수 있다. 코드 작성 측면에서 테마 함수를 .Rprofile에 추가하여 코드 재사용성을 높이고, 테마 관련 설정을 한 곳에서 관리할 수 있게 함으로써 작업 일관성과 전문성이 높아져 시간과 노력을 크게 절약할 수 있다.\n\n\n\n\n\n\n\n\n\n\n\n\n\ngt 표 테마 적용 작업흐름\n\n작성한 테마를 매번 코드를 “복사하여 붙여넣기” 하여 사용하는 대신 .Rprofile 파일에 반영하여 매번 gt 표를 제작할 때마다 gt_theme_hangul() 테마를 적용하는 방법은 다음과 같다. 먼저, usethis 패키지 edit_r_profile() 함수를 호출하여 앞서 작성한 테마를 반영한다.\n\nusethis::edit_r_profile()\n\ngt_theme_hangul() 테마를 gt 표 객체에 반영한다. 스크립트에서부터 시작하여 작성한 함수를 .Rprofile 파일에 복사하여 붙여넣는 것으로 작업은 완료된다.\n\nlibrary(gt)\nlibrary(gtExtras)\n\ngt_theme_hangul &lt;- function(gt_tbl) {\n\n  # Grab number of rows of data from gt object\n  n_rows &lt;- nrow(gt_tbl$`_data`)\n\n  gt_tbl |&gt;\n    gt_theme_538() |&gt;\n    tab_options(\n      # column_labels.background.color = '#1E61B0', # R logo 파란색\n      table.font.names =\"NanumSquare\",\n      heading.title.font.size = px(26),\n      heading.subtitle.font.size = px(16),\n      heading.background.color = \"transparent\",\n      column_labels.font.weight = 'bold',\n      table_body.hlines.width = px(0),\n      data_row.padding = px(6),\n      heading.align = 'center',\n      stub.background.color = \"#ffffff\",\n      stub.font.weight = \"bold\",\n      source_notes.font.size = px(10),\n      row.striping.include_table_body = FALSE\n    ) |&gt;\n    cols_align( align = \"center\", columns = where(is.numeric)) |&gt;\n    cols_align( align = \"auto\", columns = where(is.character)) |&gt;\n    ## 글꼴 달리 적용\n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",\n        weight = 'bold'\n      ),\n      locations = cells_title(groups = 'subtitle')\n    ) |&gt;\n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",\n        weight = 'bold'\n      ),\n      locations = cells_body()\n    ) |&gt;\n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",\n        weight = 'bold'\n      ),\n      locations = cells_column_labels()\n    ) |&gt;\n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",\n      ),\n      locations = cells_source_notes()\n    ) |&gt;\n    tab_style(\n      style = cell_fill(color = 'grey90'),\n      locations = cells_body(rows = seq(1, n_rows, 2))\n    )\n}\n\n.Rprofile 파일에 gt 사용자 정의 테마가 지정되어 있기 때문에 새로 R 세션을 시작하면 gt_theme_hangul() 테마를 프로젝트 어디에서든지 사용할 수 있다.\n\noriginal_penguins_gt &lt;- penguins |&gt; \n  drop_na() |&gt; \n  count(species, sex) |&gt; \n  pivot_wider(names_from = sex, values_from = n, values_fill = 0) |&gt; \n  janitor::adorn_totals(where = \"col\", name = \"합계\") |&gt; \n  rename(펭귄종 = species, 암컷 = female, 수컷 = male) |&gt; \n  as_tibble() |&gt; \n  gt(rowname_col = \"펭귄종\") |&gt; \n    tab_header(\n      title = md(\"남극 펭귄 **암수와 종** 빈도표\"),\n      subtitle = md(\"`palmerpenguins` 데이터 패키지\")\n    ) |&gt; \n    grand_summary_rows(\n      columns = c(펭귄종, 암컷, 수컷),\n      fns = list(\n        '합계' = ~sum(.) \n      ),\n      fmt = ~ fmt_number(., use_seps = FALSE, decimals = 0),\n      missing_text = '-'\n    )  |&gt; \n    cols_align(\"center\") |&gt; \n    opt_row_striping() |&gt; \n    tab_source_note(\n      source_note = md(\"자료출처: `penguins` 데이터셋\")\n  )\n\noriginal_penguins_gt |&gt; \n  gtsave(\"images/rprofile_original.png\")\n\ntheme_penguins_gt &lt;- original_penguins_gt |&gt; \n  gt_theme_hangul()\n\ntheme_penguins_gt |&gt; \n  gtsave(\"images/rprofile_hangul_theme.png\")\n\n\n\n\n\n\n\n\n\ngt_theme_hangul() 테마 적용 전\n\n\n\n \n\n\n\n\ngt_theme_hangul() 테마 적용 후",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>표 테마</span>"
    ]
  },
  {
    "objectID": "theme_template.html",
    "href": "theme_template.html",
    "title": "11  템플릿",
    "section": "",
    "text": "“템플릿(template)”과 “테마(theme)”는 웹, 디자인, 문서 영역에서 주로 사용되는 용어로, 각각 다른 맥락과 목적을 갖는다. 재사용 가능한 디자인 구조를 제공하여 사용자에게 일관된 경험을 제공하여 문서저작, 디자인 및 개발 시간을 단축시킬 뿐만 아니라 디자인과 레이아웃 표준화를 지원한다.\n템플릿이 문서, 특정 페이지나 컴포넌트의 레이아웃을 위주로 정의하는 반면, 테마는 전체 문서, 웹사이트, 애플리케이션의 디자인과 스타일을 총체적으로 지칭한다는 면에서 차이가 있다.",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>템플릿</span>"
    ]
  },
  {
    "objectID": "dw_publishing.html",
    "href": "dw_publishing.html",
    "title": "3  인쇄출판",
    "section": "",
    "text": "3.1 출판방식\n크게 4가지 출판 방식이 있으며, 출판방식에는 장단점이 있다. 기획출판은 저자가 출판사 의뢰를 받아 원고를 출판사에 넘기거나 춮판사에 넘긴 원고가 채택되어 출판에 들어가게 되는 방식으로 출판사가 디자인을 비롯한 모든 제작과 비용을 부담하여 저자는 지출이 전혀 없다는 장점이 있지만 인세가 상대적으로 적다는 단점이 있다. 자비출판은 저자 자기비용으로 출판사에 책 제작을 의뢰하는 방식으로, 책을 빠르게 출판할 수 있다는 장점이 있지만 제작 비용을 출판사에 지불한다는 점은 단점이다. 독립출판은 저자가 모든 출판 과정을 혼자 처리하는 방식으로, 출판사에 의지하지 않기 때문에 원하는 책을 제작할 수 있어 제본 및 유통과정에만 비용이 발생되기 발생된다. 출판 전과정을 혼자 처리한다는 점에서 시간이 오래 소요된다는 단점도 있다. POD출판은 주문에 따라 인쇄하여 판매하는 방식으로, 무자본으로 책을 낼 수 있다는 장점이 있지만 단행본 제작 원가가 높다는 단점이 있다.",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>인쇄출판</span>"
    ]
  },
  {
    "objectID": "dw_publishing.html#출판방식",
    "href": "dw_publishing.html#출판방식",
    "title": "3  인쇄출판",
    "section": "",
    "text": "출판방식\n방식\n장점\n단점\n\n\n\n\n기획출판\n저자는 원고작성에 집중, 출판사는 제작과 비용 부담\n저자는 비용지출 없음\n인세가 적다 (8-12%)\n\n\n자비출판\n자비를 들여 출판사 의뢰해서 책을 출판\n출판시간 단축\n제작 비용 발생\n\n\n독립출판\n저자가 출판 과정 모두 담당하고 제본 및 유통만 비용부담\n출판사 간섭 없음\n출판까지 긴 시간 소요\n\n\nPOD출판\n주문에 따라 소량으로 인쇄판매 (‘Publish On Demand’)\n무자본 도서출판\n높은 단행본 원가",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>인쇄출판</span>"
    ]
  },
  {
    "objectID": "dw_publishing.html#자가출판",
    "href": "dw_publishing.html#자가출판",
    "title": "3  인쇄출판",
    "section": "3.2 자가출판",
    "text": "3.2 자가출판\n현재 자가출판 방식은 주로 두 가지로 구분된다. 첫번째는 교보문고의 POD(Publish on Demand) 맞춤형 소량 출판과 같은 서비스를 활용하는 것으로 쿼토, 워드, 아래한글 등 저작 도구로 작성한 원고를 PDF 형식으로 변환하여 POD 서비스 제공업체에 업로드하면 된다. 맞춤형 소량 출판은 미리 종이책을 찍지 않고, 주문이 들어올 때마다 레이저 프린터 등으로 종이책을 인쇄하는 방식으로 POD 서비스 제공업체가 인쇄, 제본, 유통 등 모든 과정을 대행해주며, 저자는 인쇄본이 주문판매될 때마다 판매가격에서 인쇄 및 유통비용을 제외한 대금을 지급받게 된다. POD 서비스 제공업체는 교보문고 외에도 부크크, 알라딘, YES24, 인터파크 등이 있다.\n독립출판은 1인 출판 형태로, 사업자 등록을 통해 1인 출판사를 설립하고 모든 과정을 혼자서 진행하는 셀프출판입니다. 출판 주체는 독립적인 작가, 즉 인디 작가가 된다. 일반적으로 출판사에서 저자에게 추가 비용을 부과하지 않고 출판사가 모든 제작 및 유통 비용을 부담하고 작가에게는 인세를 지급하는 방식이지만, 독립출판에서는 원고 작성 외에도 교정 및 편집, 디자인, 인쇄출판, 홍보 마케팅까지 모든 과정을 직접 관장한다. 자가출판을 확정짓기 전에 시장 조사를 통해 적절한 출판 방식을 선택하는 것이 선행되어야 한다.\n\n3.2.1 법인 출판사 신청\n개인이 아닌 법인으로 출판사를 설립하거나 법인 업종에 “출판업”을 추가하는 경우 목적은 출판사 신고확인증을 발급받는 것이다. 책을 출판하는 경우 먼저 관할 지자체에 신고를 준비해야 한다. 이를 위해서 “출판사(신고서, 변경신고서)”를 작성하고 다음 서류를 준비하여 관할 지자체(구시군청)를 내방하여 제출한다. 출판사 신고서는 출판문화산업 진흥법 시행규칙에 별지 서식으로 다운로드 가능하다.\n\n임대차 계약서\n법인등기부등본\n법인인감증명서\n법인인감\n법인대표 신분증\n\n출판사 등록제출서류 제출 후 3일 내 처리하는 것이 원칙이고 출판등록신고증은 등기(서류제출 시 수령주소 명시)로도 수령이 가능하다. 출판등록신고증이 완료되면 세무서를 사업자등록증에 이를 업종에 반영하여 마무리한다.\n\n\n\n출판사 신고확인증 예시\n\n\n\n\n3.2.2 ISBN 발급\n책을 판매를 목적으로 출판하는 경우 국립중앙도서관에서 “ISBN” 번호를 출판사가 부여받아야 한다. 이를 위해서 국립중앙도서관 ISBN ISSN 납본시스템에 접속하여 안내에 맞춰 후속 절차를 진행한다. 먼저 국립중앙도서관 ISBN ISSN 납본시스템 상단 계정등록 작업을 수행하여 앞서 발급받은 출판사 신고확인증을 증빙으로 계정등록을 한다.\n\n\n3.2.3 발행자번호 신청\n발행자번호 신청을 통해 출판사 신고확인증에 기재된 출판사명과 대응되는 ISBN 발행자번호를 부여받는 작업을 수행한다. 처리기간은 업무일 기준 3일이 소요된다.\n\n\n\n발행자번호 신청\n\n\n\n\n3.2.4 ISBN 번호 신청\n발행자번호가 발급된 이후에는 출판할 책에 대한 ISBN 번호를 신청할 수 있다. 이 번호는 책이 공식적으로 출판되고 판매될 때 필요한 중요한 식별자다. ISBN 번호 신청단계에서 국립중앙도서관 납본시스템에서 검토가 이뤄지고 승인이 나면 바코드와 QR 코드도 생성해준다. 바코드는 챗뒷면 디자인에 필수 요소로 책 디자인 및 판권 페이지 디자인 작업 전에 사전 준비단계에서 꼭 필요하다.\n\n\n\n\n\n\n\n\n\nISBN 번호 신청\n\n\n\n\n \n\n\n\n\n\n챗GPT 유닉스쉘 바코드",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>인쇄출판</span>"
    ]
  },
  {
    "objectID": "dw_publishing.html#책-표지-디자인",
    "href": "dw_publishing.html#책-표지-디자인",
    "title": "3  인쇄출판",
    "section": "3.3 책 표지 디자인",
    "text": "3.3 책 표지 디자인\n책 표지 디자인은 책을 처음 만나는 독자의 눈길을 끌 중요한 요소로 매우 중요하다. 디자인은 책 내용, 장르, 대상 독자를 고려해서 제작된다. 제목과 부제목은 눈에 띄게 표시하고, 책의 주제나 내용, 저자명도 명확히 표시한다. 이미지와 색상은 책 내용과 장르에 맞게 선택하고 고해상도 이미지를 사용하고 글꼴과 타이포그래피도 읽기 쉽게 제작한다. 뒷면과 책날개에는 책의 내용 요약, 목차, 저자 소개 등을 넣을 수 있다. 책 표지 디자인은 전문가에게 제작을 의뢰할 수도 있고, 온라인 도구를 사용해서 직접 만들 수도 있다.\n\n\n\n챗GPT 유닉스 쉘 책 디자인 사례\n\n\n“챗GPT 유닉스 쉘”은 출판사 한국 R 사용자회에서 첫번째로 출판한 챗GPT 전문도서로 앞/뒤 표지 및 책등 작업을 전문 디자이너에게 외주로 의뢰하여 제작했다. 앞표지에 책제목과 저자, 출판사명이 표시되고, 뒷표지에는 ISBN 바코드와 함께 짧지만 강렬한 홍보문구가 시각적으로 잘 배치되어 있고, 책등에는 책제목과 출판사명이 표시되어 있다.",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>인쇄출판</span>"
    ]
  },
  {
    "objectID": "dw_publishing.html#인쇄출판-및-유통",
    "href": "dw_publishing.html#인쇄출판-및-유통",
    "title": "3  인쇄출판",
    "section": "3.4 인쇄출판 및 유통",
    "text": "3.4 인쇄출판 및 유통\n인쇄와 제본 단계는 출판사가 책을 출판하는 마지막 단계다. 출판할 책의 내용과 표지 디자인과 판권 페이지가 확정되면 인쇄소와 계약을 맺는다. 인쇄수량은 수요와 구독자 수를 고려해서 결정하며, 보통 500권이나 1,000권 등으로 정해지고 최근 인쇄가격이 많이 낮아진 맞춤형 소량 출판(POD)은 1권부터 인쇄가 가능하다. 인쇄는 디지털 인쇄와 오프셋 인쇄 방식이 있고, 디지털 인쇄는 소량 출판에 적합하고, 오프셋 인쇄는 대량 출판에 적합하다. 인쇄가 끝나면 제본 과정을 거쳐 최종적으로 판매를 위해 상품으로 고객을 맞이할 준비를 끝마치게 된다.\n유통은 책을 독자에게 도달하는 과정으로 과거 서점에서 종이매체를 통해 구입을 했다면 최근에는 디지털 전자책 및 구독형태로도 독자들이 콘텐츠 소비가 늘고 있다. 다양한 출판 채널을 통해 책 판매가 이뤄지면 수익은 저자, 출판사, 인쇄사, 유통 서점 사이에서 분배되고, 유통 채널로 온라인 서점, 오프라인 서점, 도서관 등을 꼽을 수 있다.",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>인쇄출판</span>"
    ]
  },
  {
    "objectID": "dw_publishing.html#디지털-전환",
    "href": "dw_publishing.html#디지털-전환",
    "title": "3  인쇄출판",
    "section": "3.5 디지털 전환",
    "text": "3.5 디지털 전환\n200자 원고지 4장은 통상 A4 용지 한장에 해당한다. 만약 A4 용지 10장 보고서나 논문을 작성한다고 하면, 종이 200자 원고지 40장에 연필이나 볼펜을 가지고 작성하게 된다. 최종본을 얻기까지 빨간색으로 선생님이나 주변의 첨삭지도를 받아 최종본을 만들기까지 여러번의 반복과정을 거치게 된다.\n최종 원고가 200자 원고지 40장에 담겨 탈고를 마치게 되면, 독자에게 다가갈 준비를 한다. 그림을 넣거나 아름다운 글씨체를 적용해 보고 종이 재질을 바꿔보기도 하고 영혼이 담긴 원고를 독자가 보기 좋고, 이해하기 쉽고, 때로는 감동과 재미를 줄 수 있도록 출판 단계에서 많은 사람들의 노력이 들어간다.\n탈고를 마친 원고에 글씨체를 비롯한 디자인 작업이 완료되면 출판장비를 갖춘 출판소에서 인쇄장비를 거쳐 종이책 혹은 보고서가 완성되고, 이렇게 대량으로 출력되면 각 서점으로 배송되어 독자가 서점에서 구독을 하게 된다.\n저자의 생각을 글로 표현하면 현재도 대부분 편집 및 디자인, 출판, 배송, 서점 등 각 단계에 사람이 관여하고 필요에 따라서는 컴퓨터가 작업을 지원하는데 사용되어 최종 독자에게 전달된다.\n책과 보고서 제작하는 과정은 워드 프로세스를 기본으로 두고, 숫자 계산이 필요하면 엑셀, 이미지가 필요하면 그래픽 전문 소프트웨어, 정보 검색도 웹브라우져를 사용한다. 글자, 단어, 문장, 문단, 장/절/항으로 생각의 단위를 서문, 본문, 결어 및 참고문헌, 주석, 그림, 그래프, 도표 등도 함께 체계적으로 작성해 나간다.\n다양한 소프트웨어 도구를 통해서 원고를 탈고하면 서식, 문장 문단 모양, 색인, 참조문헌 등 보기 좋고 가독성 높은 형태로 외양을 입히는 과정을 거치게 되는데 이 과정도 소프트웨어 도구가 핵심적인 역할을 하게 된다. 책과 보고서에 대한 디자인 작업이 완료되면 다양한 형태로 배포하기 위한 프로그래밍 과정을 거쳐 PDF, 전자책(ePUB), 웹(HTML), 출판책 형태로 독자에게 전달된다.\n과거 글을 쓰고 독자에게 전달하는 과정이 상당히 복잡했다. 전문 작가가 원고를 작성하고, 디자인 전문가가 독자 눈높이에 맞춰 디자인하고, 책규격, 표지재질, 책 날개 등 출판 전문가가 출판을 담당했다. 이 모든 과정에서 타자기, 디자인 도구, 인쇄기와 같은 다양한 기계가 필요했고 서점 운영자가 책을 판매하는 과정까지 거쳐야만 최종적으로 독자에게 도달했다. 하지만 도서출판에도 디지털 전환이 가속화되며 상황이 많이 달라졌다. 저작과 편집을 위한 다양한 도구와 프로그램이 개발되어 블로그와 웹사이트 등을 인쇄출판 경험이 공유되어 누구나 손쉽게 글을 쓰고 편집하고 출판할 수 있게 되었다. 자동화 기술 발전으로 저작부터 인쇄와 출판 배포 과정도 간소화되었으며 팬독과 쿼토 등 다양한 엔진과 플랫폼이 등장해 누구나 직접 저작물을 출판하고 판매하고 인터넷에 자신의 경험과 생각, 지식, 정보 등을 알릴 수 있는 기회가 늘어났다. 이러한 변화로 인해 이제는 글을 쓰고 독자에게 전달하는 과정이 훨씬 더 간단하고 빠르게 이뤄지는 세상이 되었다.\n\n\n\n\n\n\n\n\n아나로그 종이 출판\n\n\n\n\n\n\n\n\n\n디지털 출판\n\n\n\n\n\n\n그림 3.1: 디지털 전환 출판 방식",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>인쇄출판</span>"
    ]
  },
  {
    "objectID": "dw_book.html",
    "href": "dw_book.html",
    "title": "\n4  쿼토 책\n",
    "section": "",
    "text": "4.1 작업흐름\n디지털 저작 언어 마크다운(markdown)를 기반으로 하면 증거기반 데이터 과학 글쓰기를 R과 파이썬으로 표, 그래프 등 다양한 문서 요소 통합이 수월하다. 이 과정에서 인공지능 챗GPT를 활용한 글쓰기도 다른 저작도구와 비교해도 무리없이 통합적인 글쓰기가 가능해져 저작 속도도 빨라지고, 품질은 높아지며, 대폭 비용은 절감된다.\n챗GPT 디지털 글쓰기 작업이 마무리된 후 디지털 출판 과정이 이어진다. 한국 R 사용자회가 개발한 bitPublish 도구를 활용하면 한글 출판에 필요한 모든 요소를 대부분 담고 있어 출판 시간을 크게 단축시킬 수 있다.\n최종적으로 bitPublish를 이용하여 작품을 컴파일시키면 출판 준비가 완료된 .pdf 파일을 즉시 얻을 수 있어, 전자책 형태로, 또는 인쇄를 통한 대량 출판으로도 즉시 활용이 가능하다.",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>쿼토 책</span>"
    ]
  },
  {
    "objectID": "dw_book.html#작업흐름",
    "href": "dw_book.html#작업흐름",
    "title": "\n4  쿼토 책\n",
    "section": "",
    "text": "쿼토 도서 출판 작업흐름",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>쿼토 책</span>"
    ]
  },
  {
    "objectID": "dw_book.html#환경설정",
    "href": "dw_book.html#환경설정",
    "title": "\n4  쿼토 책\n",
    "section": "\n4.2 환경설정",
    "text": "4.2 환경설정\n최신 Download Quarto CLI를 운영체제에 맞춰 설치하고, 도서출판을 위해서 PDF 엔진이 필요하기 때문에, tinytex를 설치한다. tinytex는 TeX Live를 기반으로 하는 경량의 크로스 플랫폼, 휴대성, 유지 관리가 용이한 라텍 배포판이다.\nbitPublish는 quarto use template bit2r/bitPublish 명령어를 통해서 설치되면 _extensions/bit2r 디렉토리 아래 쿼토 확장프로그램으로 설치되어 디지털 도서출판을 위한 모든 사항이 준비된다.\n$ quarto use template bit2r/bitPublish\n\nQuarto templates may execute code when documents are rendered. If you do not\ntrust the authors of the template, we recommend that you do not install or\nuse the template.\n ? Do you trust the authors of this template (Y/n) » Yes\n ? Directory name: » publish\n[&gt;] Downloading\n(/) Unzipping. : File C:\\Users\\statkclee\\OneDrive\\문서\\WindowsPowerShell\\profile.ps1 cannot be loaded because running scripts is disab\nled on this system. For more information, see about_Execution_Policies at https:/go.microsoft.com/fwlink/?LinkID=135170.\n[&gt;] Unzipping\n    Found 1 extension.\n[&gt;] Copying files...\n\nFiles created:\n - chap_exams.qmd\n - chap_intro_bitpublish.qmd\n - chap_troubleshooting.qmd\n - chap_version.qmd\n - img\n - index.qmd\n - references.bib\n - references.qmd\n - _extensions\n - _quarto.yml\n(base)\nbitPublish는 크게 한글 도서출판을 위한 라텍 패키지와 한글식자를 위한 국문, 영문, 한자, 수식 글꼴로 구성되어 있다. bitPublish.tex 텍파일에 PDF 문서 생성을 위한 주요 기능들이 망라되어 필요한 경우 추가 수정을 통해 즉시 출판가능한 수준 PDF 문서 생성이 가능하다.\n\n\nbitPublish 구성요소와 출판 생태계\n\n\n4.2.1 살펴보기\n_extensions/ 디렉토리 아래 한국 R 사용자회 (bit2r)에서 개발한 bitPublish 템플릿이 포함되어 있어 이를 사용하여 다양하면 즉시 출판이 가능한 기반을 제공하고 있다. 저자는 _quarto.yml 파일에 등록된 .qmd 파일을 주석처리 혹은 수정하여 글쓰기 작업을 진행하면 된다.\n## ../publish\n## ├── chap_exams.qmd\n## ├── chap_intro_bitpublish.qmd\n## ├── chap_troubleshooting.qmd\n## ├── chap_version.qmd\n## ├── docs\n## │   └── bitPublish를-이용하여-한글-책-조판하기.pdf\n## ├── img\n## │   ├── b5217f2a-f129-4bf9-90dc-c5b9783d0ea8_rw_1920.png\n## │   └── pipeline.pdf\n## ├── index.qmd\n## ├── references.bib\n## ├── references.qmd\n## ├── _extensions\n## │   └── bit2r\n## │       └── bitPublish\n## │           ├── bitPublish.tex\n## │           ├── fonts\n## │           │   ├── D2Coding\n## │           │   │   ├── D2Coding-Ver1.3.2-20180524.ttf\n## │           │   │   └── D2CodingBold-Ver1.3.2-20180524.ttf\n## │           │   ├── KOPUBWORLD_OTF_FONTS\n## │           │   │   ├── KoPubWorld Batang_Pro Bold.otf\n## │           │   │   ├── KoPubWorld Batang_Pro Light.otf\n## │           │   │   ├── KoPubWorld Batang_Pro Medium.otf\n## │           │   │   ├── KoPubWorld Dotum_Pro Bold.otf\n## │           │   │   ├── KoPubWorld Dotum_Pro Light.otf\n## │           │   │   └── KoPubWorld Dotum_Pro Medium.otf\n## │           │   ├── NanumSquare\n## │           │   │   ├── NanumSquareB.otf\n## │           │   │   └── NanumSquareR.otf\n## │           │   ├── Nimbus Sans L\n## │           │   │   ├── GNU General Public License.txt\n## │           │   │   ├── NimbusSanL-Bol.otf\n## │           │   │   ├── NimbusSanL-BolIta.otf\n## │           │   │   ├── NimbusSanL-Reg.otf\n## │           │   │   └── NimbusSanL-RegIta.otf\n## │           │   └── STIXTwoText\n## │           │       ├── STIXTwoMath-Regular.otf\n## │           │       ├── STIXTwoText-Bold.otf\n## │           │       ├── STIXTwoText-BoldItalic.otf\n## │           │       ├── STIXTwoText-Italic.otf\n## │           │       ├── STIXTwoText-Medium.otf\n## │           │       ├── STIXTwoText-MediumItalic.otf\n## │           │       ├── STIXTwoText-Regular.otf\n## │           │       ├── STIXTwoText-SemiBold.otf\n## │           │       └── STIXTwoText-SemiBoldItalic.otf\n## │           ├── images\n## │           │   ├── bomb-solid.svg\n## │           │   ├── caution.png\n## │           │   ├── circle-info-solid.svg\n## │           │   ├── information.png\n## │           │   ├── lightbulb-regular.svg\n## │           │   └── triangle-exclamation-solid.svg\n## │           ├── init_environments.R\n## │           ├── style.css\n## │           └── _extension.yml\n## └── _quarto.yml\n\n4.2.2 헬로월드\nquarto preview 명령어로 미리보기, quarto render 명령어로 .pdf 파일을 생성하게 된다.\n$ quarto preview --to bitPublish-pdf # 미리보기 \n$ quarto render --to bitPublish-pdf  # pdf 파일 생성하기\nquarto render --to bitPublish-pdf 명령어를 실행하게 되면 docs 폴더에 docs\\bitPublish를-이용하여-한글-책-조판하기.pdf 문서 제목하고 동일한 bitPublish를-이용하여-한글-책-조판하기.pdf PDF 파일이 생성된다.\n$ quarto render --to bitPublish-pdf\n\n[1/6] index.qmd\n[2/6] chap_exams.qmd\n\n\nprocessing file: chap_exams.qmd\n                                                                                \noutput file: chap_exams.knit.md\n\n[3/6] chap_intro_bitpublish.qmd\n\n\nprocessing file: chap_intro_bitpublish.qmd\n  |...                                                |   6% (unnamed-chunk-3)    |....................                               |  39% (unnamed-chunk-20)   |...............................                    |  61% (fig-hist2)          |................................................   |  94% (unnamed-chunk-50)                                                                                 \noutput file: chap_intro_bitpublish.knit.md\n\nThere were 44 warnings (use warnings() to see them)\n[4/6] chap_troubleshooting.qmd\n\nStarting python3 kernel...Done\n\nExecuting 'chap_troubleshooting.ipynb'\n\n[5/6] chap_version.qmd\n  |\n\nprocessing file: chap_version.qmd\n                                                                                \noutput file: chap_version.knit.md\n\n[6/6] references.qmd\n\npandoc\n  to: latex\n  output-file: index.tex\n  standalone: true\n  toc: true\n  number-sections: true\n  top-level-division: chapter\n  pdf-engine: xelatex\n  variables:\n    graphics: true\n    tables: true\n  default-image-extension: pdf\n  cite-method: biblatex\n\nmetadata\n  crossref:\n    chapters: true\n    fig-title: 그림\n    tbl-title: 표\n  documentclass: book\n  papersize: letter\n  block-headings: true\n  geometry:\n    - paper=a4paper\n    - layoutwidth=190mm\n    - layoutheight=260mm\n    - layouthoffset=10mm\n    - layoutvoffset=18.5mm\n    - showcrop\n    - top=20mm\n    - headsep=10mm\n    - bottom=30mm\n    - footskip=15mm\n    - left=25mm\n    - right=25mm\n    - centering\n  fig-cap-location: bottom\n  tbl-cap-location: bottom\n  toc-title: 목차\n  linkcolor: highlight\n  urlcolor: highlight\n  lang: ko-KR\n  bibliography:\n    - references.bib\n  link-citations: false\n  title: bitPublish를 이용하여 한글 책 조판하기\n\nrunning xelatex - 1\n  This is XeTeX, Version 3.141592653-2.6-0.999995 (TeX Live 2023) (preloaded format=xelatex)\n   restricted \\write18 enabled.\n  entering extended mode\n\n  Re-compiling document for index\n  This is XeTeX, Version 3.141592653-2.6-0.999995 (TeX Live 2023) (preloaded format=xelatex)\n   restricted \\write18 enabled.\n  entering extended mode\n\nmaking index\n  This is makeindex, version 2.17 [TeX Live 2023] (kpathsea + Thai support).\n  Scanning input file index.idx....done (99 entries accepted, 0 rejected).\n  Sorting entries....done (682 comparisons).\n  Generating output file index.ind....done (163 lines written, 0 warnings).\n  Output written in index.ind.\n  Transcript written in index.ilg.\n\ngenerating bibliography\n  INFO - This is Biber 2.19\n  INFO - Logfile is 'index.blg'\n  INFO - Reading 'index.bcf'\n  INFO - Found 7 citekeys in bib section 0\n  INFO - Processing section 0\n  INFO - Looking for bibtex file 'references.bib' for section 0\n  INFO - LaTeX decoding ...\n  INFO - Found BibTeX data source 'references.bib'\n  INFO - Overriding locale 'korean' defaults 'variable = shifted' with 'variable = non-ignorable'\n  INFO - Overriding locale 'korean' defaults 'normalization = NFD' with 'normalization = prenormalized'\n  INFO - Sorting list 'nty/global//global/global' of type 'entry' with template 'nty' and locale 'korean'\n  INFO - No sort tailoring available for locale 'korean'\n  INFO - Writing 'index.bbl' with encoding 'UTF-8'\n  INFO - Output to index.bbl\n\nrunning xelatex - 2\n  This is XeTeX, Version 3.141592653-2.6-0.999995 (TeX Live 2023) (preloaded format=xelatex)\n   restricted \\write18 enabled.\n  entering extended mode\n\nrunning xelatex - 3\n  This is XeTeX, Version 3.141592653-2.6-0.999995 (TeX Live 2023) (preloaded format=xelatex)\n   restricted \\write18 enabled.\n  entering extended mode\n\n\nOutput created: docs\\bitPublish를-이용하여-한글-책-조판하기.pdf\nbitPublish 템플릿으로 지원되는 기능들이 PDF 파일에 담겨있다. 필요한 경우 이를 참조하여 글쓰기 외양에 신경쓰지 않고 오로지 글쓰기 본질에 집중하여 마음에 드는 책을 저작하여 일사천리로 출판할 수 있다.",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>쿼토 책</span>"
    ]
  },
  {
    "objectID": "dw_book.html#bitpublish-소개",
    "href": "dw_book.html#bitpublish-소개",
    "title": "\n4  쿼토 책\n",
    "section": "\n4.3 bitPublish 소개",
    "text": "4.3 bitPublish 소개\nQuarto를 이용해서 책으로 만들 수 있는 포맷에는 HTML, PDF, MS Word, EPUB, AsciiDoc이 있습니다. bitPublish는 이중에서 PDF 포맷의 책을 생성합니다.\n현재 bitPublish의 기본 설정에서는 \\(4\\times6\\) 배판 판형을, 갖는 영어를 포함한 라틴계열 언어와 한국어, 중국어를 혼용한 책을 저작할 수 있습니다.\n\n4.3.1 용지규격\n현재 bitPublish의 기본 페이지 레이아웃 설정은 \\(4\\times6\\) 배판으로 설계되었습니다. \\(4\\times6\\) 배판 판형의 레이아웃 설정을 변경하려면, _extensions/bit2r/bitPublish/_extension.yml 파일의 다음 행들을 수정합니다. LaTeX의 geometry 패키지를 사용합니다.\n\n\n\n\n\n\n\\(4\\times6\\) 배판\n\n\n\nbitPublish 패키지에서 학습 및 참고서를 상정하고 기본 채택한 용지크기는 4x6 배판이다.\n\n  geometry:       # 4x6 배판 도서를 위한 설정\n    - paper=a4paper\n    - layoutwidth=190mm\n    - layoutheight=260mm\n    - layouthoffset=10mm\n    - layoutvoffset=18.5mm\n    - showcrop\n    - top=20mm\n    - headsep=10mm             \n    - bottom=30mm\n    - footskip=15mm                 \n    - left=25mm\n    - right=25mm\n    - centering   \n\n\n국배판(A4): 학원교재\n국배배판(A3): 포스터 등\n신국판: 소설, 수필, 자서전, 전문서적 등\n크라운판: 소설, 수필, 자서전, 전문서적 등\n레터(Letter): 해외대학 학위논문, 해외서적 등\n\n\n\n\n4.3.2 글꼴\nbitPublish는 전자책이 아닌 종이에 출력되는 책의 저작을 목적으로 만들어졌기 때문에, 폰트의 선택에서 TTF(True Type Font)가 아닌 OTF(Open Type Font)를 선택했다.\n\n\n\n\n\n\n글꼴(폰트) 선정 기준\n\n\n\n\n출판 시 발생할 라이센스 이슈\n\n모든 글꼴을 상업적으로 이용이 가능한 글꼴로 선정\nserif1 영문 글꼴인 Times New Roman 저작권 이슈\n\n가독성이 뛰어난 범용적인 세리프체로 영문 에세이와 학위 논문 표준 글꼴로 자리매김.\n상업용으로 쓸 땐 저작권 면책 조건이 필요함.\n\n\nsans-serif2 영어 글꼴인 헬베티카(Helvetica) 저작권 이슈\n\n대표적인 산세리프 글꼴로 20세기 널리 쓰였음\n\n\n\n\n\n출판 인쇄물의 미적 완성도\n\n가독성, 심미성 등\n\n\n\n저작권(copyright)은 저작물에 대한 권리를 원칙적으로 저작자에게 부여되는 것이고, 라이선스(license)는 저작권 일부를 타인에게 양도하거나 허용하는 계약이다.\n\n\n\n\n표 4.1: bitPublish 글꼴\n\n\n\n\n\n\n\n\n\n분류\n세부 분류\n추천 글꼴\n설명\n\n\n\n한국어 글꼴\nSerif 글꼴\nKoPubWorld바탕체_Pro\n한국어 본문 텍스트 적합\n\n\n\nSans-Serif 글꼴\nKoPubWorld돋움체_Pro\n한국어 UI 및 제목 적합\n\n\n영어 글꼴\nSerif 글꼴\nSTIX Two Text\nTimes New Roman 대체 글꼴\n\n\n\nSans-Serif 글꼴\nNimbus Sans L\nHelvetica 대체 글꼴, 영어 UI 및 제목에 적합\n\n\n한자 글꼴\n\nKoPubWorld돋움체_Pro\n한자 적합\n\n\n코딩 글꼴\nMono Space 글꼴\nD2Coding\n영어/한국어 모두 동일 글꼴 사용, 자간 틀어짐 방지\n\n\n수학 글꼴\n\nSTIX Two Math\n수학식 적합\n\n\nR 그래픽스 글꼴\n한국어 글꼴\n나눔스퀘어\nR 그래픽 적합\n\n\n\n영어 글꼴\nNimbus Sans L\nR 그래픽 적합\n\n\n\n\n\n\n표 4.1 는 각 분류별로 추천하는 글꼴을 요약하여 나타낸다. 이를 참고하여 문서나 프로젝트에 적합한 글꼴을 선택할 수 있다.\n모든 글꼴은 _extensions/bit2r/bitPublish/fonts 디렉토리에 위치하기 때문에 별도 설치할 필요 없지만, 이미 설치된 글꼴도 중복으로 위치하게 된다. KoPubWorld바탕체_Pro와 KoPubWorld돋움체_Pro 글꼴를 사용하기 위해서는 한국출판인회의 홈페이지인 https://forms.gle/aQU7b3EoaF53zMKaA에 사용자 정보를 등록 후 무료로 사용하실 수 있다. 서체 라이선스 문서 일독을 권장한다.\n\n4.3.3 머리글 바닥글\n머리글(header)과 바닥글(footer)는 fancyhdr 패키지를 사용해서 정의되었다.\n\n\n머리글과 바닥글 적용 파일(홀수 및 짝수 페이지)\n\n_extensions/bit2r/bitPublish/_extension.yml 파일에 다음과 같이 설정되어 있습니다.\n\n\\usepackage{fancyhdr}\n\\pagestyle{fancy}\n\n중간 생략\n\n\\fancyhf{}\n\\fancyhead[EL]{\\changesize \\numberfont --- bitPublish를 이용하여}\n\\fancyhead[OR]{\\changesize \\numberfont 한글 책 조판하기 ---}\n\\fancyfoot[EL]{{\\pagefont\\thepage}{\\hskip4mm}{\\changesize \\leftmark}}\n\\fancyfoot[OR]{{\\changesize \\rightmark}{\\hskip4mm}{\\pagefont\\thepage}}\n\n만약에 머리글과 바닥글의 모양을 바꾸려면 직접 라텍 스크립트를 수정하면 한다. 책 제목을 바꾸기 위해서는 fancyhead의 EL과 OR을 변경한다.\n\n4.3.4 글줄 사이\n줄간격, 행간 등으로 부르는 글줄 사이(line spacing)는 1.5로 설정되어있다. 수정이 필요하다면, _extensions/bit2r/bitPublish/bitPublish.tex 파일의 다음 행을 수정한다.\n\n%% 줄간격 정의\n\\linespread{1.5}\n\n\n4.3.5 bitPublish 서식\nbitPublish는 본문에서 예제, 연습문제, 주의, 정보, 인용 등을 표현할 수 있는 여러 LaTeX 서식을 지원한다. 서식은 다음과 같은 구조의 라텍 환경(enviroment)으로 제공된다.\n\n\\begin{enviroment name}[optional argument]{main argument}\n  text of enviroment\n\\end{enviroment name}\n\n또한 다음과 같은 라텍 명령(command)으로도 제공된다.\n\n\\command name[optional argument]{main argument} \n\n\n4.3.6 사용자 정의 블록\nbitPublish 서식의 대표적인 기능에 커스텀 블록(custom blocks)(rmcook?)이 있다. 사용자 정의 블록은 보고서나 책의 일부 콘텐츠를 블록으로 정의하여 본문보다 돋보이게 하여 독자가 핵심 포인트를 쉽게 이해할 수 있도록 주목도를 높이는 서식이다.\n사용자 정의 블록은 팬독의 fenced Div blocks 기능을 사용하고, 이 기능은 Div 블록을 HTML과 LaTeX 모두로 변환시키는 역할을 한다.\n\n\n\n다음의 팬독 사용자 정의 블록은,\n\n::: {.verbatim data-latex=\"\"}\nWe show some _verbatim_ text here.\n:::\n\n\nLaTeX 출력일 경우에는 다음과 같이 변환\n\n\\begin{verbatim}\nWe show some \\emph{verbatim} text here.\n\\end{verbatim}\n\n\nHTML 출력일 경우에는 다음과 같이 변환\n\n&lt;div class=\"verbatim\"&gt;\nWe show some &lt;em&gt;verbatim&lt;/em&gt; text here.\n&lt;/div&gt;\n\n\n\n\n\n4.3.7 정보 블록\n정보 블록은 멀티 아웃 포맷을 지원하는데, 다음과 같은 네 개의 유형을 지원한다. 네 개의 유형은 HTML과 LaTeX에서 우주 똑같은 모양은 아니지만, 거의 유사한 모습으로 출력된다.\n\n\n\n정보\n주의\n경고\n팁\n\n\n정보블록\ninformation\ncaution\nwarning\ntip\n\n\n멀티 아웃 포맷을 지원하기 위한 팬독 사용자 정의 블록의 구문은 다음과 같습니다. 그리고 정보 블록에 들어갈 내용은 마크다운 문법으로 기술해야 합니다.\n\n::: {.infobox .&lt;type&gt; data-latex=\"{&lt;type&gt;}{&lt;title&gt;}\"}\ntext of infobox\n:::\n\n네가지 정보블록 중 “정보 블록”만 지면관계상 살펴보자. 본문에서 서술하는 것보다 유용한 정보를 기술하는 데 사용하는 정보(information) 블록 블록은 다음과 같이 사용한다.\n블록 청크의 옵션 중에 data-latex는 LaTeX에 전달하는 인수입니다. 정보(information)를 의미하는 .information와 {information}가 중복으로 기술된 것은, 멀티 아웃 포맷을 위한 것이므로 반드시 이 형식을 따라야 한다.\n\n\n\n\n::: {.infobox .information data-latex=\"{information}{information의 용도}\"}\ninformation은 독자에게 전하고 싶은 정보나 아이디어를 기술하는 데 사용합니다.\n짙은 회색 테두리에 정보를 나타내는 아이콘을 배치하여 주위를 환기시킵니다.\n환경의 내부에는 **Markdown**으로 문장을 기술합니다.\n:::\n\n\n\n\n\n\n\n다음은 정보 블록에서 제목을 생략한 예제다.\n\n\n\n\n::: {.infobox .information data-latex=\"{information}{}\"}\ninformation은 독자에게 전하고 싶은 정보나 아이디어를 기술하는 데 사용합니다.\n짙은 회색 테두리에 정보를 나타내는 아이콘을 배치하여 주위를 환기시킵니다.\n환경의 내부에는 **Markdown**으로 문장을 기술합니다.\n:::\n\n\n\n\n\n\n\n\n4.3.8 이야기 박스\nshadequote 환경을 이용하는데 이야기 박스 구문은 다음과 같다.\n\n\\begin{shadequote}[&lt;alignment&gt;]{&lt;author&gt;}\n  text of quote\n\\end{shadequote}\n\n다음처럼 괄호를 비우면, 저자 이야기를 표시한다.\n\n\\begin{shadequote}{}\n나는 통계계산이 수리영역인 줄만 알았다. 그런데, 이제는 논리적인 사고도 필요한\n논리영역임을 느낀다. 그래서 논리적 사고로 통계적 데이터 분석을 위한 성능 좋은\n연장이 필요하기 시작했다.\n\\end{shadequote}\n\n명사의 명언을 인용하여 이야기할 경우에는 화자의 이름을 첫째 괄호에 기입한다. 이 예제는 화자의 이름을 오른쪽 정렬하였습니다. 정렬은 l, c, r로 표기합니다. 각각 왼쪽, 가운데, 오른쪽 정렬을 의미합니다.\n\n\\begin{shadequote}[r]{안창호}\n진실은 반드시 따르는 자가 있고, 정의는 반드시 이루는 날이 있다.\n\\end{shadequote}\n\n\n\n4.3.9 타이틀 박스\n앞의 예제에서 ’학습목표’를 정의한 박스 서식을 타이틀 박스라 부르기로 한다. 이유는 여러 용도로 사용될 수 있어 목적으로 이름을 특정할 수 없기 때문이다. 학습 시나리오, 학습의 목표든 상관없다. 다음과 같은 라텍 명령으로 제공된다.\n\n\\snbox{text of title}{title fill color}{box fill color}{text of box} \n\n다음 명령은 학습 목표라는 타이틀을 갖는 박스를 생성합니다.\n\n\\snbox{학습 목표}{blue!30}{blue!10}{데이터의 분류 체계로서의 척도를 이해하고, \n이를 기반으로 한 R 데이터 객체를 이해한다. CSV 파일을 읽고, 데이터 프레임 \n객체로 CSV 파일을 생성할 수 있다.}\n\n\n\n4.3.10 예제\nexample 환경을 이용하고 인용 구문은 다음과 같다.\n\n\\begin{example}{number of example}\n  text of example\n\\end{example}\n\n그러나 예제는 다음처럼 생각보다 복잡합니다.\n\n장(chapter)에서 여러 예제가 있어서, 번호를 매겨야 한다.\n\n번호는 자동으로 채번되어야 추가 및 제거 시 번호의 오류를 줄인다.\n\n\n예제를 본문이나 다른 예제에서 참조하는 경우가 있다.\n\n\n크로스-레퍼런스(cross-reference)를 지원해야 한다.\n\n\n\n예제를 위해서 다음과 같이 장(chapter)의 시작부분에 환경변수를 정의해야 합니다. 장의 라벨과 예제의 순번을 위한 카운더를 설정했습니다.\n\n\\label{chap:bitpublish}                    % 장 라벨 정의\n\\newcounter{exam_num_bitpub}               % 새로운 카운터 생성\n\\setcounter{exam_num_bitpub}{0}            % 카운터 값 0으로 초기화\n\n다음은 예제를 위한 환경 설정과 예제를 구현하는 예제입니다. 크로스-레퍼런스를 위해서 예제에 대해서 ex1이라는 라벨을 example 환경 안에서 정의한 것을 주의깊게 보십시오.\n\n\n\\addtocounter{exam_num_bitpub}{1}          % 예제를 위한 카운터 1 증가\n\\begin{example}{\\ref{chap:bitpublish}.\\arabic{exam_num_bitpub}}\n\\examplelabel{ex1}{\\ref{chap:bitpublish}.\\arabic{exam_num_bitpub}}\nbitPublish의 서식 중에서 예제, 연습문제, 주의, 정보, 인용을 만들어 보아라.\n\\end{example}\n\nex1이라는 라벨을 레퍼런스하는 방법은 다음과 같다.\n\n예제 \\ref{ex1} 를 레퍼런스하기 위해서는 레퍼런스 명령 `\\ref{}`를 사용합니다.\n\n예제 2.1를 레퍼런스하기 위해서 레퍼런스 명령 \\ref{}를 사용한다.\n\n4.3.11 연습문제\n기술서나 학습서의 경우에는 연습문제를 제공하는 경우가 많다. bitPublish에서 연습문제 서식은 Exercise 환경을 이용한다.\n\n\\begin{Exercise}\n  text of exercise\n\\end{Exercise}\n\n또한 연습문제의 내용을 위해서 tasks 환경과 task 명령을 사용할 수 있다.\n\n\\begin{tasks}[label](1)\n \\task text of task\n \\task text of task\n\\end{tasks}\n\n다음 명령은 예제 장에서 사용한 연습문제를 기술한 라텍 스크립트다.\n\n\n\\begin{Exercise}\\label{EX2}\n\\noindent 1. 다음의 데이터를 R의 객체로 만들어 보아라.\n\\begin{tasks}[label=(\\arabic*)](1)\n \\task 합격, 불합격, 불합격, 합격, 불합격\n \\task 1등급, 2등급, 3등급, 2등급, 5등급, 3등급, 4등급, 4등급, 3등급, 3등급\n \\task 12㎝, 23㎝, 32㎝, 22㎝, 19㎝, 21㎝, 20㎝\n\\end{tasks}\n\n\\noindent 2. 다음의 데이터 객체를 외부 파일로 출력해 보아라.\n\\begin{tasks}[label=(\\arabic*)](1)\n \\task R의 datas 패키지에 포함되어 있는 women 데이터 프레임을 women.csv 파일로 출력해 보아라.\n \\task (1)의 파일을 다시 읽어 들여서 women2라는 이름의 데이터 프레임을 만들어라.\n\\end{tasks}\n\\end{Exercise}\n\n만약에 연습문제를 별도의 페이지에서 시각하고 싶다면 \\\\clearpage 명령어를 사용하면 됩니다.",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>쿼토 책</span>"
    ]
  },
  {
    "objectID": "dw_book.html#bitpublish-팁",
    "href": "dw_book.html#bitpublish-팁",
    "title": "\n4  쿼토 책\n",
    "section": "\n4.4 bitPublish 팁",
    "text": "4.4 bitPublish 팁\nbitPublish는 LaTeX 기반 솔루션이기 때문에, 좀더 유용하게 사용하기 위해서 LaTeX에 대한 지식과 R 환경에서는 knitr 패키지를 이용해서 쿼토 문서를 마크다운 문서로 랜더링하기 때문에 knitr 청크에 대한 지식도 필요하다. 하지만, 너무 걱정할 필요는 없다. 심도있는 지식이 아닌, 기초적인 지식으로도 충분하게 책을 저작할 수 있고 챗GPT에 책 저작과 관련된 요청사항을 프롬프트로 전달하면 대부분의 문제는 도움을 받을 수 있다. 필자가 책을 저작할 때 자주 사용되는 LaTeX 팁을 공유한다.\n\n4.4.1 이미지 삽입\n이미지 파일을 삽입하기 위해서는 다음처럼 knitr 패키지의 include_graphics() 함수를 사용하는 것을 추천한다. 이 때, knitr 청크는 다음과 같이 사용한다.\n```{r}\n#| label: fig-label\n#| echo: false\n#| out-width: \"90%\"\n#| fig-align: \"center\"\n#| fig-cap: \"이미지 캡션\"\n#| fig-pos: \"htb!\"\n\nknitr::include_graphics(\"이미지 파일이름.png\")\n```\n이 예제는 다음과 같은 작업을 수행한다.\n\n`이미지 파일이름.png’ 파일을 본문에 삽입하는데,\n\n이미지의 크기는 본문 너비의 90%에 해당하게 적용하며, 이미지는 가운데 정렬로 배치함\n\n\n이미지의 캡션은 “이미지 캡션”으로 정의하며,\n크로스-레퍼런스를 위한 라벨의 이름은 `fig-label’로 설정하는데, 라벨의 접두어 `fig-’를 사용한 `fig-라벨이름’의 포맷을 권장함\n\n이미지의 페이지 배치는\n\n이미지를 정확히 해당 위치(here)에 일단 배치,\n여의치 않으면, 그 다음 페이지 가장 윗부분에 배치,\n만약 이것도 여의치 않으면, 그 다음 페이지 가장 아랫 부분에 배치.\n\n\n\n이미지 페이지 배치는 다음과 같은 fig-pos(float?) 옵션으로 지정한다.\n\n\n\n\n\n\n플로트 지정자\n의미\n\n\n\nh\nhere의 약자로, 본문에 위치한 그 자리에 이미지 배치\n\n\nt\ntop의 약자로, 이미지가 위치한 페이지의 가장 윗부분에 배치. 크기가 맞지 않으면 다음 페이지의 가장 윗쪽에 배치\n\n\nb\nbottom의 약자로, 이미지가 위치한 페이지 가장 아래에 이미지 배치. 크기가 맞지 않으면 다음 페이지의 가장 아래에 배치\n\n\np\n이미지가 텍스트 없는 단독 페이지를 따로 만들어 배치\n\n\n!\n적절한 위치 결정을 위해, 적용한 지정자 재정의. 지정자가 나열된 순서에 따라 적절한 위치에 이미지 삽입\n\n\n\n플로트 지정자 예제에서 사용한 “htb!”는 일단 이미지를 정확히 그 위치(h)에 배치하려 하고, 여의치 않으면 다음은 위(t)이기 때문에 그 다음 페이지 가장 윗부분에 배치한다. 만약 그것도 여의치 않으면 그 다음은 아래(b)이기 때문에 그 다음 페이지 가장 아랫 부분에 배치한다.\n그런데 bitPublish에서 fig-pos 기본값3이 “htb!”로 설정되었기 때문에 이 설정을 생략해도 적당한 페이지에 이미지를 배치한다. fig-align 기본값도 “center”로 설정되어 있다.\n\n\n\n\n\n\nfig-pos과 label\n\n\n\n웹 페이지로 배포하는 문서는 페이지로 구분되지 않기 때문에 이미지는 항상 그(here) 자리에 출력되기 때문에 본문에서 “다음 그림처럼”과 같은 표현이 가능합니다만, 페이지가 구분되는 책에서는 이 표현은 적절하지 않다. 왜냐하면 페이지 상황에 따라 이미지가 다음 페이지로 넘어갈 수 있는 등 저작 과정에서는 예측이 불가능하다.\n그래서 ’fig-pos’의 값을 “htb!”으로 설정하고 ’label’을 지정하여 크로스-레퍼런스를 이용해서, “그림 2.1처럼”과 같이 표현하는 것이 권장된다.\n\n\n\n4.4.2 R 그래픽스\nR 스크립트로 그리는 R 그래픽스는 knitr 청크(chunk)를 이용해서, R 스크립트를 실행하여 삽입한다.\n```{r}\n#| label: fig-hist\n#| echo: false\n#| fig-width: 6\n#| fig-height: 4\n#| out-width: \"70%\"\n#| fig-cap: \"정규분포 히스토그램\"\nset.seed(123)\nhist(rnorm(500), col = \"lightblue\", main = \"정규분포의 히스토그램\")\n```\n\n\n\n\n\n\n\n그림 4.1: 정규분포 히스토그램\n\n\n\n\n그런데 R 플롯에 한글이 포함될 경우에 그림 그림 4.1 처럼 한글이 출력되지 않는 문제가 발생된다.\n한글을 정상적으로 출력하기 위해서는 문서의 맨 앞에 다음 스크립트를 추가한다.\n```{r init, include=FALSE}\nsource(here::here(\"_extensions\", \"bit2r\", \"bitPublish\", \"init_environments.R\"))\n```\n그런 후, R 플롯을 그리는 knitr 청크에 nanum 옵션의 값을 true로 추가한다. 이 설정은 나눔스퀘어 폰트를 사용해서 R 플롯을 시각화한다는 것을 의미한다. 다음 스크립트는 그림 \\(\\ref{fig-hist2}\\과\\) 같은 R 그래픽스 플롯을 출력한다.\n```{r}\n#| label: fig-hist2\n#| echo: false\n#| fig-width: 6\n#| fig-height: 4\n#| out-width: \"70%\"\n#| fig-cap: \"정규분포 히스토그램\"\n#| nanum: true\nset.seed(123)\n\nhist(rnorm(500), col = \"lightblue\", main = \"정규분포의 히스토그램\")\n```\n\n\n\n\n\n\n\n그림 4.2: 정규분포 히스토그램\n\n\n\n\n만약 한글이 포함되지 않은 플롯에서 라틴 문자에 사용할 글꼴로 Nimbus Sans L 글꼴을 사용하려면, nimbus 옵션의 값을 true로 추가하면 된다.\n\n4.4.3 ggplot2 그래픽스\nggplot2 그래픽스도 별도의 설정없이 한글이 출력된다. 테마는 hrbrthemes 패키지의 theme_ipsum() 함수를 사용하며, 글꼴은 R 그래픽스와 동일한 방법으로 나눔스퀘어 글꼴을 사용할 수 있다.\n다음 스크립트는 그림 \\(\\ref{fig-hist3}\\과 \\)같은 ggplot2 그래픽스 플롯을 출력한다.\n```{r}\n#| label: fig-hist3\n#| echo: false\n#| fig-width: 6\n#| fig-height: 4\n#| out-width: \"70%\"\n#| fig-cap: \"ggplot2 정규분포 히스토그램\"\n#| nanum: true\nset.seed(123)\nrandom_norm &lt;- data.frame(rnd = rnorm(500))\n\nggplot(random_norm, aes(x = rnd)) +\n  geom_histogram(color = \"darkblue\", fill = \"lightblue\") +\n  labs(title = \"ggplot2의 히스토그램\",\n       subtitle = \"500개 정규분포 난수\")\n```\n\n\n\n\n\n\n\n그림 4.3: ggplot2 정규분포 히스토그램\n\n\n\n\n\n4.4.4 표 삽입\n본문에 표를 삽입하는 방법에 다음처럼 3가지 방법을 사용할 수 있다.\n\n마크다운을 이용한 표\n\n캡션의 핸들링과 라벨의 지정에 취약해서 권하지 않음\n그러나, 캡션과 라벨을 사용하지 않을 때에는 유용함\n\n\nLaTeX을 이용한 표\n\n가장 세밀하게 조정할 수 있으나, LaTeX에 대한 지식이 필요함\n\n\nR을 이용한 표\n\nR에 익숙하면 쉽게 사용할 수 있음\n\n\n\n마크다운을 이용한 표\n마크다운을 이용한 표 생성의 경우에는 캡션이 표 내부에 위치하고, 라벨을 지정할 수 없어서 표를 삽입하는 방법으로 적절하지 않다.\n다음과 같이 표를 정의합니다. 캡션과 라벨을 사용하지 않을 때에는 유용합니다.\n| 기본값  | 왼쪽 정렬 | 가운데 정렬 | 오른쪽 정렬 |\n|---------|:----------|:-----------:|------------:|\n|내용 1   |내용 2     |내용 3       |내용 4       |\n|내용 5   |내용 6     |내용 7       |내용 8       |\n|내용 9   |내용 10    |내용 11      |내용 12      |\n\nTable: 마크다운 기반 표    \n\n마크다운 기반 표\n\n기본값\n왼쪽 정렬\n가운데 정렬\n오른쪽 정렬\n\n\n\n내용 1\n내용 2\n내용 3\n내용 4\n\n\n내용 5\n내용 6\n내용 7\n내용 8\n\n\n내용 9\n내용 10\n내용 11\n내용 12\n\n\nLaTeX을 이용한 표\nLaTeX을 이용한 표를 삽입하는 방법은 LaTeX 스크립트를 기술하는 것이다. 다음처럼 테이블을 생성하는 LaTeX 스크립트를 기술한다.\n\n\n\\begin{table}[htb!]\n\\centering\n\\begin{tabular}[]{llcr}\n\\toprule\n기본값  & 왼쪽 정렬 & 가운데 정렬 & 오른쪽 정렬 \\\\\n\\midrule\n내용 1 & 내용 2  & 내용 3   & 내용 4    \\\\\n내용 5 & 내용 6  & 내용 7   & 내용 8    \\\\\n내용 9 & 내용 10 & 내용 11  & 내용 12   \\\\\n\\bottomrule\n\\end{tabular}\n\\caption{\\label{tab-latex}LaTex 기반 표}\n\\end{table}\n\nR을 이용한 표\nR을 이용해서 표를 만드는 방법에 대표적인 것이 knitr 패키지 kable() 함수와 kableExtra 패키지 kable_styling() 함수를 사용하는 방법이다. 그러나 이 방법은 캡션의 위치가 표의 위에 위치하는 것과 아직 쿼토에서 크로스-레퍼런스가 지원되지 않는 관계로 gt 패키지 gt() 함수를 사용한다. 이 함수로 크로스-레퍼런스가 지원되지 않았으나, as_latex_with_caption() 함수가 이를 지원한다. 이 함수는 bitPublish에서 제공하는 사용자 정의 함수다.\n다음은 표 \\(\\ref{tab-r}\\를 \\)생성한다.\n\n```{r}\n#| echo: false\ntab &lt;- tibble::tribble(\n  ~기본값, ~`왼쪽 정렬`, ~`가운데 정렬`, ~`오른쪽 정렬`,\n  \"내용 1\", \"내용 2\", \"내용 3\", \"내용 4\",\n  \"내용 5\", \"내용 6\", \"내용 7\", \"내용 8\",\n  \"내용 9\", \"내용 10\", \"내용 11\", \"내용 12\"\n)\n\ntab |&gt; \n  gt::gt() |&gt; \n  gt::cols_align(align = \"left\", columns = `왼쪽 정렬`) |&gt; \n  gt::cols_align(align = \"center\", columns = `가운데 정렬`) |&gt; \n  gt::cols_align(align = \"right\", columns = `오른쪽 정렬`) |&gt;\n  as_latex_with_caption(label = \"tab-r\", caption = \"R 기반 표\")\n```\n\n4.4.5 수식 입력\n수식 입력은 Latex의 수학 공식을 입력하는 TeX 문법을 따른다.\n인라인 수식의 경우에는 \\$와 \\$ 사이에서 수식을 정의하고, 한 라인 전체에 수식을 사용하기 위해서는 \\$\\$와 \\$\\$ 사이에서 수식을 정의한다.\n\n데이터가 $x_1, x_2, x_3, \\cdots, x_n$일 때, 도수분포표는 다음과 같이 만든다.\n\n데이터가 \\(x_1, x_2, x_3, \\cdots, x_n\\)일 때, 도수분포표는 다음과 같이 만든다.\n\n누적상대도수: \n$$\nC F_k=\\sum_{i=1}^k f_i^R=\\frac{F_k}{n}\n$$\n\n누적상대도수: \\[\nC F_k=\\sum_{i=1}^k f_i^R=\\frac{F_k}{n}\n\\] ## 찾아보기 등록\nLaTeX의 찾아보기(인덱싱) 기능을 활성화하기 위해, 이미 bitPublish는 프리엠블에 다음처럼 makeidx 패키지를 로드하고 있다.\n\n\\usepackage{makeidx}\n\n또한 프리엠블에서는 찾아보기 기능을 활성화하기 위해서 다음의 명령을 포함했다.\n\n\\makeindex\n\n그리고 문서에 찾아보기 색인을 표시하기 위한 다음의 명령어를 사용해야 하는데,\n\n\\printindex\n\n이 명령어는 _extensions/bit2r/bitPublish/_extension.yml 파일에 다음과 같이 설정되어 있다.\n\ninclude-after-body:  \n  - text: |      \n      \\printindex  \n\n그러므로 찾아보기에 색인 등록을 위해서는 저자가 작성할 본문에 다음 인덱스 명령을 사용하기만 하면 된다.\n\n\\index{key}\n\n다음 예는 찾아보기 색인에 척도를 등록하고 LaTeX이 알아서 해당 문장이 위치한 페이지를 찾아보기 색인과 연결해 준다.\n\n그 현상에 숫자를 부여한 것을 척도\\index{척도}라 한다.\n\n\n\n\n\n\n\n찾아보기에서의 언더라인의 표현\n\n\n\nLaTeX에서는 언더라인(_)은 특수문자로 인식된다. 그래서 문자로서 언더라인을 입력하려면 역슬래시(\\)를 붙여야 한다. 그러므로 \\index{key} 명령의 key 값에 언더라인이 있다면 다음처럼 역슬래시를 붙여 표현해야 한다.\n\\index{include\\_graphics()}\n\n\n\n4.4.6 자동조사 처리\n예제, 그림, 표 등에 라벨을 지정해서 크로스-레퍼런스를 구현하면 저작자는 번호의 증감에 신경쓸 필요가 없다. 그림과 그림 사이에 또 하나의 그림을 삽입하거나, 또는 기존 그림을 제거함으로서 빠뀌게 될 참조 번호를 수정할 필요가 없다. LaTeX이 알아서 번호를 수정해주기 때문이다.\n다음과 같이 출력되는 본문이 있다고 가정하자.\n그림 2.3과 같이 정규분포를 따르는 히스토그램을 그린다.\n그런데 앞 부분에 크로스-레퍼런스를 적용한 그림 하나를 추가하면 이 문장은 다음과 같이 바뀐다.\n그림 2.4과 같이 정규분포를 따르는 히스토그램을 그린다.\n그림에 크로스-레퍼런스를 적용해서 그림의 번호 3이 4로 정상적으로 변경되었는데, 조사가 어색하다. `그림 2.4과’가 아니라 `그림 2.4와’로 출력되야하기 때문이다. 왜냐하면 우리말 조사에는 다음과 같은 규칙이 있기 때문이다. 앞단어의 끝소리의 자소에 따라 다음처럼 조사가 결정되기 때문이다.(kim2007?)\n\n\n\n\n\n\n\n\n\n\n\n앞단어 끝소리\n와 / 과\n을 / 를\n이 / 가\n은 / 는\n(이)라\n(으)로\n\n\n\n리을(ㄹ)\n과\n을\n이\n은\n이라\n로\n\n\nㄹ 아닌 종성\n과\n을\n이\n은\n이라\n으로\n\n\n중성\n와\n를\n가\n는\n라\n로\n\n\n\nLaTeX이 크로스-레퍼런스에서 계산되는 아라비아 숫자의 한글 독음 끝소리 자소에 따라 자동으로 자동조사 처리를 하기 위해서는, 크로스-레퍼런스를 위한 \\ref{} 명령에 붙는 조사에 역 슬래시(\\)불여주면 된다.\n다음은 크로스-레퍼런스에서 번호가 계산되었다는 전제로 자동조사 처리를 테스트한 사례다.\n\n그림 2.3\\와 그림 2.4\\은 같이 정규분포를 따르는 히스토그램을 그린다. \n그림 2.3\\과 그림 2.4\\는 같이 정규분포를 따르는 히스토그램을 그린다.\n\n그림 2.3\\와 그림 2.4\\은 같이 정규분포를 따르는 히스토그램을 그린다.\n그림 2.3\\과 그림 2.4\\는 같이 정규분포를 따르는 히스토그램을 그린다.\n\n4.4.7 참고문헌 등록\n참고문헌(bibliography) 등록은 LaTeX의 biblatex 패키지를 이용한다. 이 패키지를 사용할 수 있는 설정은 이미 되어 있으니, ‘bitPublish를 이용하여 한글 책 조판하기’ 예제를 위한 다음의 `_quarto.yml’을 참고하여 참고문헌 등록을 적용한다.\nbook:\n  title: \"bitPublish를 이용하여 한글 책 조판하기\"\n  chapters:\n    - index.qmd\n    - chap_exams.qmd\n    - chap_intro_bitpublish.qmd\n    - references.qmd\nbibliography: references.bib\nlink-citations: false\n상기 YAML 헤더에서 chapters 옵션은 책에 장을 추가하는데 ‘references.qmd’ 파일이 참고문헌 등록에 해당하는 파일이다. 이 설정은 참고문헌을 나타내는 시작 페이지의 제목을 “참고문헌”으로 표기한다.\n\n그리고 참고문헌에 등록하기 위해서는 YAML 헤더에 bibliography 옵션에 기술된 ‘references.bib’ 파일에 참고문헌을 정의한다.\n다음은 ‘references.bib’ 파일에 정의된 일부분으로 참고한 도서와 웹 사이트의 사례다.\n@book{rstat,\n  author = {유충현, 이상호},\n  title = {R을 이용한 통계학 이해},\n  year = {2013},\n  publisher = {자유아카데미}\n}\n\n@misc{quarto,\n  author = {posit},\n  title = {Welcome to Quarto},\n  howpublished = {\\url{https://quarto.org/}},\n  note = {Accessed: 2023-05-15}\n}\n‘references.bib’ 파일에 참고문헌을 정의했다고 `참고문헌’이라는 제목의 참고문헌에 등록되지 않는다. 참고문헌에 등록하기 위해서는, 참고한 본문 내용에 인용(citation) 명령을 적용해야 한다.\n다음과 같은 LaTeX 인용 명령을 사용한다.\n\\cite{key}\n다음의 \\\\cite{} 명령은 ‘참고 문헌’ 페이지에 참고한 문헌에 대한 정보를 기술하고, 인용된 본문에 링크를 연결해준다.\nQuarto 홈페이지의 Quarto에 대한 소개\\cite{quarto}는 다음과 같다. 이러쿵 저러쿵...\n마크다운에도 인용을 위한 다음과 같은 명령이 있다.\n[@key]\n그러므로 다음은 앞에서의 LaTeX 명령과 동일한 작업을 수행한다.\nQuarto 홈페이지의 Quarto에 대한 소개[@quarto]는 다음과 같다. 이러쿵 저러쿵...\n\n\\begin{shadequote}{}\n인용의 경우에는 LaTeX 명령보다 마크다운 명령을 사용할 것을 권장합니다. 왜냐하면 bitPublish가 현재는 LaTeX 기반의 PDF 파일 포맷만 지원하지만, 향후 HTML, ePub 포맷과 같은 전자책 저작도 지원할 계획입니다. 호환을 위한 LaTeX 명령을 자제하는 것이 좋습니다.\n\\end{shadequote}",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>쿼토 책</span>"
    ]
  },
  {
    "objectID": "dw_book.html#footnotes",
    "href": "dw_book.html#footnotes",
    "title": "\n4  쿼토 책\n",
    "section": "",
    "text": "serif 폰트는 바탕체 폰트를 의미합니다. 글자의 획에서 부리처럼 날카롭게 튀어나온 부분을 세리프(serif)라 합니다. 영어는 로만체, 한국어의 경우에는 과거에 명조체라는 이름으로 통용되던 바탕체 서체를 의미합니다.↩︎\nserif 폰트는 돋움체 폰트를 의미합니다. 프랑스어로 sans는 “~가 없이”라는 뜻으로, sans-serif는 세리프가 없는 서체입니다. 한국어의 경우에는 과거에 고딕체라는 이름으로 통용되던 돋움체 서체를 의미합니다.↩︎\n“htb!”을 기본값으로 설정하기 위해서는, 뒷부분에서 설명할 플롯에서의 한글 폰트 적용을 위한 init_environments.R 파일을 로드하는 설정을 전제로 한다.↩︎",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>쿼토 책</span>"
    ]
  },
  {
    "objectID": "dw_website.html",
    "href": "dw_website.html",
    "title": "5  웹사이트와 블로그",
    "section": "",
    "text": "5.1 프로젝트 생성\n쿼토(quarto) 설치하고 정적 웹사이트 제작을 위한 프로젝트를 준비한다. 문서로 웹사이트 개발을 위한 RStudio IDE를 통합개발환경으로 선택한 경우 File → New Project ... → Project Type 에서 Quarto Website를 선택한다.\n다음 단계로 웹사이트가 담길 디렉토리를 지정하고 웹사이트 디렉토리를 생성하고 Create Project 버튼을 를 클릭한다. 쿼토 웹사이트 프로젝트가 생성되면 웹사이트 제작을 위한 기본 골격이 제시된다. _quarto.yml 파일에 웹사이트 기본 정보가 담겨지고 각 웹페이지는 index.qmd, about.qmd 파일로 저작한다.",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>웹사이트와 블로그</span>"
    ]
  },
  {
    "objectID": "dw_website.html#project-setup",
    "href": "dw_website.html#project-setup",
    "title": "5  웹사이트와 블로그",
    "section": "",
    "text": "그림 5.1: (정적) 웹사이트 프로젝트 선택과정\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n그림 5.2: 쿼토 웹사이트 프로젝트 생성",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>웹사이트와 블로그</span>"
    ]
  },
  {
    "objectID": "dw_website.html#project-writing",
    "href": "dw_website.html#project-writing",
    "title": "5  웹사이트와 블로그",
    "section": "5.2 웹사이트 저작",
    "text": "5.2 웹사이트 저작\n문서의 구조를 정의하는 _quarto.yml 파일에 웹사이트 문법을 적용하여 웹페이지는 .qmd 파일, 외양은 .css 혹은 .scss 파일에 정리한다. 관련하여 웹사이트를 구성하는 이미지, 동영상, 소리를 비롯한 각종 자산(assets)도 웹페이지에 잘 담기도록 저작한다.\n쿼토 웹사이트 프로젝트는 웹사이트 기본골격을 다음 파일과 디렉토리를 통해 제공된다. _site/ 디렉토리는 쿼토 웹사이트를 컴파일하게 되면 자동 생성된다. _site/ 디렉토리에 index.qmd 파일을 컴파일한 index.html 파일을 비롯한 정적 웹사이트 저작을 위한 각종 파일과 디렉토리로 채워진다.\n쿼토 웹사이트를 컴파일하는 방식은 Ctrl + Shift + K 단축키를 누르거나, 상단 Render 버튼을 클릭하거나, CTRL + SHIFT + B 단축키를 누르거나, Build에 Render Website를 클릭한다.\n\n_quarto.yml\nindex.rmd\nabout.rmd\n_site/\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n그림 5.3: 로컬 웹사이트 컴파일\n\n\n\n_site/ 디렉토리는 정적 웹사이트가 배포되는 디렉토리로,\n기본적으로 http://netlify.com/를 상정한 경우 _site/를 사용하지만, docs/로 바꿔주게 되면 GitHub Pages 웹호스팅으로 사용하여 배포할 수 있게 된다. GitHub Pages 배포를 위해 _quarto.yaml 파일에 output-dir: docs을 추가하게 되면 정적 웹사이트가 _docs 폴더에 담기게 된다.\n요약하면 _quarto.yml 파일을 열어 output_dir: 설정이 없는 경우 output_dir: docs로 지정하고, 이미 존재하는 경우 output_dir: 값을 _site → docs으로 변경한다. 그리고 나서 쿼토 웹사이트를 빌드시키면 웹사이트 전체가 docs/ 디렉토리에 저장된다. 이것을 GitHub 저장소에 업로드하거나 push 해서 올리게 되면 블로그 웹사이트가 https://&lt;사용자명&gt;.github.io/&lt;저장소명&gt;/index.html을 통해 배포된다.\n\n\nproject:\n  type: website\n\n\n\nproject:\n  type: website\n  output-dir: docs",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>웹사이트와 블로그</span>"
    ]
  },
  {
    "objectID": "dw_website.html#theme-distill",
    "href": "dw_website.html#theme-distill",
    "title": "5  웹사이트와 블로그",
    "section": "5.3 외양 - 폰트, 색상 등",
    "text": "5.3 외양 - 폰트, 색상 등\n지금까지 전반적인 웹사이트 생성과 웹페이지 콘텐츠 작성과 관련된 전반적인 작업흐름에 집중했다면 글꼴, 색상 등 외양을 바꾸면 근사한 웹사이트로 탈바꿈시킬 수 있다. 특히 쿼토는 부츠트랩 5(Bootstrap 5)를 지원하기 때문에 SCSS 변수 설정을 통해 멋진 웹사이트를 꾸밀 수 있다.\n글꼴만 한글로 바꿔 tidyverse.css를 저장한다. 기본 아이디어는 구글 글꼴 웹사이트 https://fonts.google.com/ 에서 한글 글꼴을 가져와서 웹사이트 제목과 텍스트에 글꼴을 저작자의 선택에 맞춰 반영한다. 수정한 tidyverse.css 파일 일부는 다음과 같다.\n@import url('https://fonts.googleapis.com/css2?family=Sunflower');\n@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR');\n@import url('https://fonts.googleapis.com/css2?family=Gaegu');\n\nhtml {\n  /*-- Main font sizes --*/\n  --title-size:      50px;\n  --body-size:       1.06rem;\n  --code-size:       14px;\n  --aside-size:      12px;\n  --fig-cap-size:    13px;\n  /*-- Main font colors --*/\n  --title-color:     #000000;\n  --header-color:    rgba(0, 0, 0, 0.8);\n  --body-color:      rgba(0, 0, 0, 0.8);\n  --aside-color:     rgba(0, 0, 0, 0.6);\n  --fig-cap-color:   rgba(0, 0, 0, 0.6);\n  /*-- Specify custom fonts ~~~ must be imported above   --*/\n  --heading-font:    'Sunflower', sans-serif;\n  --mono-font:       \"DM Mono\", monospace;\n  --body-font:       'Noto Sans KR', sans-serif;\n  --navbar-font:     'Gaegu', cursive;\n}",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>웹사이트와 블로그</span>"
    ]
  },
  {
    "objectID": "dw_website.html#deployment-setup",
    "href": "dw_website.html#deployment-setup",
    "title": "5  웹사이트와 블로그",
    "section": "5.4 웹사이트 배포",
    "text": "5.4 웹사이트 배포\n\n5.4.1 GitHub Pages 출판\nhttps://&lt;사용자명&gt;.github.io/ 저장소는 매우 특별한 GitHub 저장소다. 따라서, GitHub 저장소 명칭을 &lt;사용자명&gt;.github.io 으로 생성해야 한다. 예를 들어, statkclee.github.io 와 같이 사용자계정을 github.io와 붙여 먼저 판다. 그리고 나서, 상단 Settings로 들어간 다음 GitHub Pages 설정을 한다. 이때 GitHub 저장소의 특정 디렉토리 docs/ 디렉토리에 담긴 내용 전부가 정적 웹사이트에 게시되는 내용이 된다. 즉, docs/index.html → https://&lt;사용자명&gt;.github.io/&lt;저장소명&gt;/index.html로 바뀌어 웹사이트 생성 및 배포가 완료된다.\n\n\n\n정적 웹사이트 GitHub Pages 연결\n\n\n\n\n5.4.2 Quarto Pub 출판\nQuarto Pub 출판과정은 Quarto CLI를 통해 이뤄진다. RStudio의 내부 터미널을 사용하는 것을 권장하는데, 이유는 RStudio와 Quarto가 잘 통합되어 있어, 간편하게 출판 작업을 진행할 수 있기 때문이다. 1\n#| eval: false\n$ quarto publish quarto-pub\n? Authorize (Y/n) › \n❯ In order to publish to Quarto Pub you need to\n  authorize your account. Please be sure you are\n  logged into the correct Quarto Pub account in \n  your default web browser, then press Enter or \n  'Y' to authorize.\n첫번째 출판하게 되면 인증작업을 수행하고 나면 _publish.yml 파일이 하나 생성된다.\n#| eval: false\n- source: project\n  quarto-pub:\n    - id: 1fa3ab1f-c010-453a-aaf2-f462bd074a66\n      url: 'https://quartopub.com/sites/statkclee/quarto-ds'\n이제 모든 준비가 되었기 때문에 다음 명령어로 작성한 출판 문서를 포함한 웹사이트를 로컬에서 미리 확인 한 후에 Quarto Pub으로 전자출판한다. 윈도우에서는 RStudio 내부 Terminal CLI를 사용하는 것을 권장한다.\n#| eval: false\n$ quarto preview\n$ quarto publish quarto-pub",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>웹사이트와 블로그</span>"
    ]
  },
  {
    "objectID": "dw_website.html#블로그",
    "href": "dw_website.html#블로그",
    "title": "5  웹사이트와 블로그",
    "section": "5.5 블로그",
    "text": "5.5 블로그",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>웹사이트와 블로그</span>"
    ]
  },
  {
    "objectID": "dw_website.html#footnotes",
    "href": "dw_website.html#footnotes",
    "title": "5  웹사이트와 블로그",
    "section": "",
    "text": "Quarto Pub↩︎",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>웹사이트와 블로그</span>"
    ]
  },
  {
    "objectID": "dw_slideshow.html",
    "href": "dw_slideshow.html",
    "title": "\n6  PPT 슬라이드\n",
    "section": "",
    "text": "6.1 헬로월드\n쿼토는 기본적으로 프로젝트를 기반으로 시작하기 때문에 프로젝트를 하나 생성한다. RStudio를 실행하고 우측 상단 Project:(None)을 클릭하여 New Project를 새로운 디렉토리를 만들어 생성한다.\n프로젝트가 생성되면 File → New File → Quarto Presentation...을 클릭하여 쿼토 슬라이드 .qmd 문서파일을 생성한다.\nCtrl + Shift + k 단축키를 눌러 .qmd 파일을 웹슬라이드로 제작할 수 있다. 웹슬라이드 파일명을 helloworld.qmd로 저장한다.\n다운로드 예제 PPT 파일",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>PPT 슬라이드</span>"
    ]
  },
  {
    "objectID": "dw_slideshow.html#헬로월드",
    "href": "dw_slideshow.html#헬로월드",
    "title": "\n6  PPT 슬라이드\n",
    "section": "",
    "text": "그림 6.1: 슬라이드 제작을 위한 프로젝트 생성\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n그림 6.2: 쿼토 프리젠테이션 파일 생성\n\n\n\n\n\n첫번째 웹슬라이드 제작과정",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>PPT 슬라이드</span>"
    ]
  },
  {
    "objectID": "dw_slideshow.html#슬라이드-문법",
    "href": "dw_slideshow.html#슬라이드-문법",
    "title": "\n6  PPT 슬라이드\n",
    "section": "\n6.2 슬라이드 문법",
    "text": "6.2 슬라이드 문법\n쿼토 슬라이드는 pandoc의 마크다운 문법을 기반으로 하고 있으며 reveal.js의 슬라이드 문법을 사용할 수 있다. reveal.js의 슬라이드 문법은 쿼토 프리젠테이션을 참고한다.\n\n6.2.1 슬라이드 생성\n# 기호는 h1 큰제목 슬라이드, ## 기호는 h2 중간제목을 갖는 슬라이드를 생성하여 하나 사고체계를 갖는 발표장표를 구성하고 마찬가지로 또다른 # 기호는 h1 큰제목 슬라이드, ## 기호는 h2 중간제목을 갖는 슬라이드를 생성하면 또 다른 사고체계를 갖는 발표장표를 구성할 수 있다.\n\n\n---\ntitle: \"습관\"\nauthor: \"홍길동\"\nformat: revealjs\n---\n\n# 아침\n\n## 기상\n\n- 알람 끄기\n- 침대에서 일어나기\n\n## 아침 식사\n\n- 콩나물국 먹기\n- 커피 마시기\n\n# 저녁\n\n## 저녁 식사\n\n- 삼겹살과 된장찌개\n- 소주 마시기\n\n## 잠들기\n\n- 양치질 하기\n- 잠자리에 들기\n\n\n\n\n\n\n\n6.2.2 2 칼럼\nPPT 발표자료는 가로 길이가 세로 길이보다 넓은 경우가 대부분이라 2칼럼으로 화면을 분할하는 경우가 많다. 쿼토 슬라이드는 .columns 클래스와 width 속성을 이용하여 2칼럼을 구현한다.\n\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n### 왼쪽 ...\n\n텍스트\n:::\n\n::: {.column width=\"60%\"}\n### 오른쪽 ...\n\n텍스트\n:::\n\n::::\n\n\n\n\n\n\n\n6.2.3 한줄씩 보여주기\nincremental 선택옵션을 사용해서 한줄씩 순차적으로 보여주는 것이 가능하다. 영어로 increnetal reveal 혹은 increamental list 기능이라고 한다. 기본설적은 슬라이드 내의 번호 및 글머리 기호 목록이 한 번에 모두 표시된다. incremental 옵션을 사용하면 한 번에 하나씩 표시된다. 코드에 .nonincremental를 넣게 되면 한줄씩 보여주는 기능을 비활성화 할 수 있다.\n\n\n---\ntitle: \"습관\"\nauthor: \"홍길동\"\nformat:\n  revealjs:\n    incremental: true\n---\n\n# 한줄씩 보여주기\n\n## 한국 R 사용자회 커뮤니티\n\n::: {.incremental}\n\n- Facebook 페북 그룹\n\n- 서울 R 미트업\n\n:::\n\n\n## Seoul R User Group\n\n::: {.nonincremental}\n\n- Facebook Group\n\n- Seoul R Meetup\n\n:::\n\n\n\n\n\n\n\n6.2.4 코드와 그래프\n쿼토 슬라이드는 코드와 그래프를 한 슬라이드에 표시할 수 있다. 코드와 출력결과(표, 그래프, 실행결과 등)을 나란히 표시하거나 출력을 지연하여 다른 슬라이드에 표시하는 것은 강의나 발표에 일반적으로 사용되는 기법이다. 쿼토 슬라이드는 output-location 선택옵션 통해 한줄로 기능 구현이 가능하다. output-location 선택옵션은 fragment, slide, column, column-fragment를 지원하기 때문에 필요에 맞춰 발표자료에 적용한다. output-location: column을 설정하면 코드와 출력결과 그래프가 한 슬라이드에 나타나는데 코드를 중복없이 깔끔하게 작성한다는 점이 큰 장점이다.\n\n\n## 코드 출력결과\n\n#| output-location: column\n#| echo: true\n\nlibrary(ggplot2)\n\nmtcars |&gt; \nggplot(aes(x = wt, y = mpg)) +\n  geom_point() +\n  theme_linedraw()",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>PPT 슬라이드</span>"
    ]
  },
  {
    "objectID": "dw_dashboard.html",
    "href": "dw_dashboard.html",
    "title": "\n16  대쉬보드\n",
    "section": "",
    "text": "16.1 대쉬보드 제작과정\n대쉬보드 제작을 순차적으로 진행할 수도 있지만 경우에 따라서는 병렬도 동시작업도 가능하다. 가장 일반적인 순차적 대쉬보드 제작과정은 다음과 같다. 먼저, 전세계와 한국의 코로나19 데이터를 수집하고 수집된 데이터를 분석 가능한 형태로 데이터를 전처리하여 대쉬보드 각 구성요소에 맞게 데이터셋을 맞춘다. 대시보드 UI/UX 디자인을 계획하면서 적절한 시각화 도구(highcharter, leaflet, plotly)에 대한 기술적인 검토도 함께 진행한다. (kulkarni2019building?)\n데이터와 UI/UX 디자인과 기술검토가 마무리된 다음, 대시보드 구성요소를 본격적으로 highcharter, ValueBox, DT 테이블, Plotly 그래프 등으로 개발한다. 대쉬보드 외양을 정의하는 대시보드 브랜딩과 디자인 작업은 CSS/SCSS 스타일링 작업을 통해 진행된다. 대시보드 테스트 단계는 모든 구성요소가 올바르게 작동하는지 테스트하고, 완성된 대시보드를 깃헙 페이지 웹사이트에 배포한다. 이후 자동화 및 업데이트 운영 및 유지보수 단계에서 데이터가 실시간으로 갱신되도록 자동화시키고 신규 개발 코드와 UI/UX 코드도 CI/CD를 통해 자동화한다.",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>대쉬보드</span>"
    ]
  },
  {
    "objectID": "dw_dashboard.html#대쉬보드-제작과정",
    "href": "dw_dashboard.html#대쉬보드-제작과정",
    "title": "\n16  대쉬보드\n",
    "section": "",
    "text": "대쉬보드 제작 흐름",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>대쉬보드</span>"
    ]
  },
  {
    "objectID": "dw_dashboard.html#corona-virus-dashboard",
    "href": "dw_dashboard.html#corona-virus-dashboard",
    "title": "\n16  대쉬보드\n",
    "section": "\n16.2 코로나19 대쉬보드",
    "text": "16.2 코로나19 대쉬보드\n코로나19 대시보드 제작은 여러 단계로 구성된다. 먼저, 코로나19 데이터를 사용할 수 있는데 데이터는 coronavirus 데이터 팩키지로 제작되어 데이터 수집 과정이 간소화되고 이미 잘 구성되어 있어 데이터 수집에 따른 공수를 크게 줄일 수 있다. 데이터를 수집한 후, flexdashboard를 주요 엔진으로 사용하여 대시보드를 제작한다. flexdashboard는 R 마크다운을 기반으로 하며, 다양한 시각화 도구와 통합이 쉽다.\n\n16.2.1 데이터셋\n코로나 19 데이터셋은 존스 홉킨스 대학(Johns Hopkins University)과 세계보건기구(WHO)에서 제공되는 두가지 형태로 제공되고 있지만 존스 홉킨스 대학 데이터셋이 WHO 데이터셋 보다 더 많은 호응을 받아 coronavirus 데이터 패키지를 사용한다.\n\n\ncoronavirus: The coronavirus dataset\n\nCOVID-19: Novel Coronavirus (COVID-19) Cases, provided by JHU CSSE\n\n\n\ncovid: Novel Coronavirus(2019-nCoV) updates from WHO daily reports\n\nPDF WHO 보고서\n\n\n\n```{r install-dataset}\nlibrary(tidyverse)\n# install.packages(\"coronavirus\") \n# devtools::install_github(\"RamiKrispin/coronavirus\")\nlibrary(coronavirus)\n\ndata(\"coronavirus\")\n\ncoronavirus &lt;- coronavirus %&gt;% \n  janitor::clean_names() %&gt;% \n  rename(country = country_region,\n         province = province_state)\n```\n\n16.2.2 대쉬보드 디자인\n데이터 과학 요소가 들어간 대쉬보드 제작을 위한 UI 설계안을 작성한다. 디자인 작업을 완료한 후, 와이어프레임(wireframe)을 중심으로 데이터 과학 요소가 포함된 대시보드 UI 설계작업을 진행한다.\n\n\n코로나19 대쉬보드 UI 설계\n\n아이콘과 디자인 요소를 위해 Font Awesome, Ionicons, Bootstrap, Bootstrap과 같은 라이브러리를 활용하여 다양한 아이콘과 UI 컴포넌트를 통해 대시보드 시각적 표현을 풍부하게 한다.\n작성한 wireframe을 기반으로 flexdashboard 문법에 맞춰 대시보드 구성요소를 적절히 배치하고 R 마크다운 코드로 대시보드를 구현한다. 전체적으로 ValueBox를 대시보드 상단에 배치하고, 아래 두 그래프 영역에 필요한 그래프를 삽입하고 전세계와 한국을 탭(tabset)으로 구분하여 표현하여 대쉬보드 복잡성을 단순화한다.\n\n\nflexdashboard 배치도(layout)\n\n\n---\nlayout: page\ntitle: \"데이터 과학을 위한 저작도구: Computational Documents\"\nsubtitle: \"대쉬보드(Dashboard)\"\nauthor:\n    name: \"[Tidyverse Korea](https://www.facebook.com/groups/tidyverse/)\"\ndate: \"2024-02-09\"\noutput:\n  html_document: \n    toc: yes\n    toc_float: true\n    highlight: tango\n    code_folding: show\n    number_section: true\n    self_contained: true\neditor_options: \n  chunk_output_type: console\n---\n\n전세계 {data-icon=\"fa-globe\"}\n===================================\n\nRow {data-width=150} \n--------------------------------------------\n\n### 확진자수\n\n::: {.cell}\n\n```{.r .cell-code}\ninfected &lt;- 100\nvalueBox(infected, icon = \"fa-procedures\")\n```\n:::\n\n### 사망자수\n\n::: {.cell}\n\n```{.r .cell-code}\ndeath &lt;- 20\nvalueBox(death, icon = \"fa-skull\")\n```\n:::\n\n### 회복자수\n\n::: {.cell}\n\n```{.r .cell-code}\nrecovered &lt;- 30\nvalueBox(recovered, \n         icon = \"fa-walking\",\n         color = ifelse(recovered &gt; 10, \"warning\", \"primary\"))\n```\n:::\n\n\nColumn {data-height=350}\n-------------------------------------\n\n### Chart 1\n\n\n\n### Chart 2\n\n\n한국 {data-icon=\"fa-map\"}\n===================================\n\n-- 이하 동일\n\n16.2.3 시각화 구성요소\n막대그래프: 코로나19\ncoronavirus 데이터 팩키지에서 수집한 코로나 관련 데이터를 “경주하는 막대그래프” 형태로 시각화하기 위해, 먼저 gapminder의 경주 막대그래프 사례를 참조한다. 이 사례를 통해 어떻게 데이터를 준비하고 그래프를 구성할지 아이디어를 얻는다. (reynolds2019racing?)\n\n\ngapminder: 경주하는 막대그래프\n\n데이터 준비가 완료되면, 정적 막대그래프를 먼저 생성하고 애니메이션 기능을 추가하여 동적인 경주 막대그래프를 완성한다. 애니메이션을 작성한 후에는 .gif 파일 형식으로 저장하고 대시보드에 불러와 그래프 영역에 채워넣는다.\n```{r}\nlibrary(gganimate) \noptions(gganimate.nframes = 100)\n\n## 데이터 \ncorona_ranked_by_date &lt;- coronavirus %&gt;% \n  filter(type == 'confirmed') %&gt;% \n  group_by(country, date) %&gt;% \n  summarise(confirmed = sum(cases)) %&gt;% \n  ungroup() %&gt;% \n  group_by(country) %&gt;% \n  arrange(date) %&gt;% \n  mutate(cum_confirmed = cumsum(confirmed)) %&gt;% # 국가별 누적환자수\n  ungroup() %&gt;% \n  group_by(date) %&gt;% \n  arrange(date, -cum_confirmed) %&gt;% # 일별 상위 국가 선정\n  mutate(rank = 1:n()) %&gt;% \n  filter(rank &lt;=7) %&gt;% \n  ungroup()\n\n## 테마\nlibrary(extrafont)\nloadfonts()\n\ncorona_theme &lt;- theme_classic(base_family = \"NanumGothic\") +\n  theme(legend.position = \"none\") +\n  theme(axis.text.y = element_blank()) +\n  theme(axis.ticks.y = element_blank()) +\n  theme(axis.line.y = element_blank()) +\n  theme(legend.background = element_rect(fill = \"gainsboro\")) +\n  theme(plot.background = element_rect(fill = \"gainsboro\")) +\n  theme(panel.background = element_rect(fill = \"gainsboro\"))\n\ncorona_plot &lt;- corona_ranked_by_date %&gt;% \n  ggplot() +\n    aes(xmin = 0 ,  \n        xmax = cum_confirmed) +  \n    aes(ymin = rank - .45,  \n        ymax = rank + .45,  \n        y = rank) +\n    facet_wrap(~date) +\n    geom_rect(alpha = .7) +\n    aes(fill = country) +\n    scale_fill_viridis_d(option = \"magma\",\n                       direction = -1) +\n    scale_x_continuous(\n      limits = c(-15000, 80000)) +\n    geom_text(col = \"gray13\",  \n          hjust = \"right\",  \n          aes(label = country),  \n          x = -50) +\n    labs(fill = NULL) +  \n    labs(x = '감염자수') +  \n    labs(y = \"\") +  \n    scale_y_reverse() +\n    corona_theme\n\ncorona_gif &lt;- corona_plot +\n  facet_null() +\n  aes(group = country) +\n  geom_text(x = 55000 , y = -7,  \n          family = \"NanumGothic\",  \n          aes(label = as.character(date) ),  \n          size = 10, col = \"grey18\")  +\n  gganimate::transition_time(date)\n\ncorona_gif # anim_save(\"images/corona.gif\", corona_gif, duration=0.1)\n\nknitr::include_graphics('images/corona.gif') \n```\n\n16.2.4 공간정보 시각화\nleaflet 라이브러리를 활용하여 공간정보 시각화 작업을 수행한다. 먼저, coronavirus 데이터 팩키지에서 수집한 코로나 관련 데이터 중 위경도 정보를 추출하여 leaflet에 입력하여 지도 위에 표시한다. leaflet의 다양한 기능을 활용하여 coronavirus 데이터에 담긴 공간정보를 인터랙티브 시각화를 구현한 후 leaflet 지도를 대시보드 일부로 통합한다.\n```{r}\nlibrary(leaflet)\nlibrary(janitor)\n\ncoronavirus %&gt;% \n  mutate(geo_name = glue::glue(\"{country} {province}\")) %&gt;% \n  select(-country, -province) %&gt;% \n  group_by(geo_name, lat, long, type) %&gt;%\n    summarise(cases = sum(cases, na.rm = TRUE)) %&gt;% \n    spread(type, cases, fill=0) %&gt;% \n    leaflet() %&gt;%\n    addTiles() %&gt;% \n    addProviderTiles(providers$OpenStreetMap) %&gt;% \n    addMarkers(lng=~long, lat=~lat, clusterOptions = markerClusterOptions(),\n                     popup = ~ as.character(paste0(\"&lt;strong&gt; 코로나19 현황: \", geo_name, \"&lt;/strong&gt;&lt;br&gt;\",\n    \"-----------------------------------------------------------&lt;br&gt;\",\n                                                   \"&middot; 감염: \", scales::comma(confirmed), \"&lt;br&gt;\",\n                                                   \"&middot; 사망: \", scales::comma(death), \"&lt;br&gt;\",\n                                                   \"&middot; 회복: \", scales::comma(recovered), \"&lt;br&gt;\")))\n```",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>대쉬보드</span>"
    ]
  },
  {
    "objectID": "dw_dashboard.html#corona-korea",
    "href": "dw_dashboard.html#corona-korea",
    "title": "\n16  대쉬보드\n",
    "section": "\n16.3 한국 대쉬보드",
    "text": "16.3 한국 대쉬보드\n\n16.3.1 데이터셋\n한국 코로나19관련 데이터를 MBC 장슬기 기자의 도움으로 이성규, “미디어고토사”에서 찾을 수 있었다. 데이터를 google sheet에 정리해 두어서 googlesheets4의 도움으로 수월하게 입수할 수 있다.\n문제는 일자별로 데이터 정리가 체계적으로 되어 있지 않고, 코로나 관련 대쉬보드를 구성할 때 한계가 있다.\n```{r}\n## 데이터셋 --------------------\nlibrary(googlesheets4)\nlibrary(tidyverse)\nlibrary(lubridate)\n\ncv_kor &lt;- read_sheet('https://docs.google.com/spreadsheets/d/1fODH5PZJw9jxwV2GRe85BRQgc3mxdyyIpQ0I6MDJKXc/edit#gid=0')\n\ncv_kor_df &lt;- cv_kor %&gt;% \n  select(날짜, 확진자=`누적 확진자수`, 검사자 = `누적 검사자수`, 사망자, 회복자=`누적 격리해제`) %&gt;% \n  arrange(날짜) %&gt;% \n  mutate(일자 = as.Date(날짜)) %&gt;% \n  group_by(일자) %&gt;% \n  summarise(검사자 = last(검사자),\n               확진자 = last(확진자),\n               사망자 = last(사망자),\n               회복자 = last(회복자)\n            )  %&gt;% \n  padr::pad(.)\n```\n\n16.3.2 대쉬보드 구성\n전세계 코로나 사례와 다르게 검사자수가 포함되어 있어 이를 valueBox에 포함시킨다. 지역정보가 없기 때문에 이를 DT 표로 대신하는데 몇가지 인터랙티브 기능을 추가해서 기본 정렬에 추가하여 칼럼별 검색 및 다양한 파일 형태로 다운로드 가능하도록 한다. 일자별로 구성된 시계열 데이터 특성을 적극 활용하여 선그래프를 인터랙티브하게 구성한다.\n\n\n한국 대쉬보드 구성\n\n\n16.3.3 시각화 구성요소\n시각화 구성요소로 valueBox, DT, plotly를 선택했기 때문에 이를 순차적으로 모듈화시켜 개발한 후에 대쉬보드에 적용시킨다.\n\n16.3.4 valueBox()\n\n검사자, 확진자, 사망자, 회복자를 valueBox로 만들어 현황을 파악하기 편하게 구성한다. webshot을 사용하면 굳이 화면을 캡쳐하지 않아도 R마크다운 코드에서 직접 가능하게 된다.\n\n\nvalueBox\n\n\n16.3.5 표와 그래프\n인터랙티브 표를 사용하게 되면 일단 기본기능으로 들어가 있는 정렬외에 searchHighlight를 사용해서 검색 기능을 넣고, dom = 'Bfrtip'을 통해 다양한 형태로 데이터를 내려받을 수 있도록 한다.\n```{r}\ncv_kor_df  &lt;-  \n  read_rds(\"data/cv_kor_df.rds\")\n\ncv_kor_df %&gt;%\n  arrange(desc(일자)) %&gt;% \n  DT::datatable(filter = 'top',  \n          options = list(   searchHighlight = TRUE, pageLength = 15,\n                            dom = 'Bfrtip',\n                            buttons = c('copy', 'csv', 'excel', 'pdf', 'print')),\n          extensions = 'Buttons') %&gt;% \n  DT::formatRound(c(\"검사자\", \"확진자\", \"사망자\", \"회복자\"), digits=0)\n```\nplotly 라이브러리를 사용하면 정적 그래프를 쉽게 인터랙티브 그래프로 변환할 수 있다. 정적 그래프의 데이터와 설정을 plotly 형식으로 변환시키면 기본적인 인터랙티브 기능이 적용된다. 선 그래프나 막대 그래프에서는 데이터 포인트에 마우스를 가져가면 해당 값이 표시되고, 그래프를 드래그하여 끌어 확대하거나 축소할 수도 있다.\n```{r kor-df-viz}\nkorea_theme &lt;- theme_classic(base_family = \"NanumGothic\") +\n  theme(legend.position = \"none\") +\n  theme(legend.background = element_rect(fill = \"gainsboro\")) +\n  theme(plot.background = element_rect(fill = \"gainsboro\")) +\n  theme(panel.background = element_rect(fill = \"gainsboro\"))\n\ncv_kor_plot &lt;- cv_kor_df %&gt;% \n  gather(유형, 사람수, -일자) %&gt;% \n  mutate(유형 = factor(유형, levels=c(\"검사자\", \"확진자\", \"회복자\", \"사망자\"))) %&gt;% \n  ggplot(aes(x=일자, y=사람수, color=유형)) +\n    geom_line() +  \n    geom_point() +\n    facet_wrap(~유형, scale=\"fixed\") +\n    scale_y_continuous(labels = scales::comma_format(scale = 1)) +\n    korea_theme +\n    labs(x=\"\", y=\"\") +\n    scale_color_viridis_d(option = \"magma\",\n                     direction = -1) \n\nplotly::ggplotly(cv_kor_plot)\n```",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>대쉬보드</span>"
    ]
  },
  {
    "objectID": "dw_dashboard.html#배포-대쉬보드",
    "href": "dw_dashboard.html#배포-대쉬보드",
    "title": "\n16  대쉬보드\n",
    "section": "\n16.4 배포 대쉬보드",
    "text": "16.4 배포 대쉬보드\n대시보드 제작이 완료되면 인터넷에 공개하기 위해 gh-pages를 사용해 웹사이트에 배포한다. gh-pages는 GitHub에서 제공하는 무료 웹 호스팅 서비스로, R 마크다운 파일을 HTML 형식으로 변환해 웹사이트를 만들 수 있다. gh-pages를 사용하면 웹사이트를 만들기 위한 별도의 서버를 구축할 필요가 없다.\n배포 과정은 먼저 GitHub 저장소를 생성하고 대시보드 모든 파일을 업로드한 다음 GitHub 설정에서 gh-pages를 활성화하고 대시보드가 포함된 브랜치를 선택한다. 설정이 완료되면 GitHub은 자동으로 웹사이트를 생성하고 해당 URL을 제공한다.\n코로나19 대시보드는 인터넷에 자유롭게 접근 가능하며, 누구나 코로나19 현황을 쉽게 파악하고 이해하도록 도움을 준다. 대쉬보드는 코로나19 대쉬보드 웹사이트에서 확인할 수 있다.\n\n\n\n\n\n\n\n\n코로나19 전세계 현황\n\n\n\n \n\n\n\n\n코로나19 한국 현황\n\n\n\n\n\nflexdashboard 코로나19 대쉬보드",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>대쉬보드</span>"
    ]
  }
]