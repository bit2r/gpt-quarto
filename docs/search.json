[
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "\n1  저작환경 설정\n",
    "section": "",
    "text": "1.1 쿼토 설치\n쿼토(Quarto) 웹사이트에서 Quarto CLI 엔진과 통합개발도구(IDE)를 설치한다. 쿼토 CLI를 지원하는 IDE는 VS Code, RStudio, Jupyter, VIM/Emacs 와 같은 텍스트 편집기가 포함된다. IDE까지 설치를 했다면 문학적 프로그래밍(literate programming)을 통해 사람이 저작하는 마크다운(Markdown)과 기계가 저작하는 프로그래밍 언어(R/Python/SQL/줄리아/자바스크립트)를 결합한 다양한 문서저작을 시작할 수 있다.",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>저작환경 설정</span>"
    ]
  },
  {
    "objectID": "setup.html#쿼토-설치",
    "href": "setup.html#쿼토-설치",
    "title": "\n1  저작환경 설정\n",
    "section": "",
    "text": "그림 1.2: 쿼토 도구모음\n\n\n\n1.1.1 윈도우 설치\n쿼토(Quarto)는 윈도우를 비롯하여 맥, 리눅스도 지원한다. 다른 운영체제에 쿼토를 설치하는 방법도 유사하기 때문에 윈도우를 기준으로 설치방법을 살펴보자. 윈도우 운영체제에 설치하기 위해서는 몇 가지 단계를 거쳐야 한다.\n\n1.1.2 쿼토 다운로드\n먼저 Quarto 공식 웹사이트에서 윈도우용 설치 파일을 다운로드한다. 웹사이트 “Download Quarto CLI” 윈도우 버전을 선택하여 다운로드한다.\n\n\n\n\n\n그림 1.3: 쿼토 다운로드 화면\n\n\n\n1.1.3 쿼토 설치\n다운로드한 파일을 더블클릭 실행하여 설치를 진행한다. 설치 마법사가 나타나면 지시에 따라 설치를 완료하면 된다. 설치가 완료되면 환경 변수에 쿼토 설치 경로를 등록해야 한다. ‘제어판’을 열고 ’시스템과 보안’으로 이동한 다음 ’시스템’을 선택한다. ’고급 시스템 설정’을 클릭한 후 ’환경 변수’ 버튼을 누른다. ‘시스템 변수’에서 ’Path’ 변수를 찾아 Quarto의 설치 경로를 추가한다. 일반적인 경로는 C:\\Users\\&lt;사용자계정명&gt;\\AppData\\Local\\Programs\\Quarto\\bin과 같을 수 있다.\n\n\n\n\n\n그림 1.4: 쿼토 설치완료\n\n\n\n1.1.4 쿼토 CLI\n마지막으로 환경 변수 설정이 올바르게 이루어졌는지 확인하기 위해 명령 프롬프트나 터미널을 열어 quarto --version 혹은 quarto --help 명령을 입력한다. 올바른 버전 번호가 출력되면 설치가 성공적으로 완료된 것이다.\n\n\n\n\n\n그림 1.5: 쿼토 CLI 실행화면\n\n\n\n\n\n\n\n\n윈도우 시스템의 경우 초기 윈도우에서 쿼토 실행명령이 quarto.cmd 이였으나 quarto.exe도 지원된다. 즉, 제어판 → 환경 변수 설정 … 에서 \"C:\\Users\\사용자명\\AppData\\Local\\Programs\\Quarto\\bin 디렉토리를 등록한 후 quarto 명령어를 사용한다.\n\nSys.which(\"quarto\")\n                                                                  quarto \n\"C:\\\\Users\\\\사용자명\\\\AppData\\\\Local\\\\Programs\\\\Quarto\\\\bin\\\\quarto.exe\"",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>저작환경 설정</span>"
    ]
  },
  {
    "objectID": "setup.html#부조종사",
    "href": "setup.html#부조종사",
    "title": "\n1  저작환경 설정\n",
    "section": "\n1.6 부조종사",
    "text": "1.6 부조종사\nRStudio에서 GitHub 부조종사(Copilot) 기능을 활용할 수 있도록 저자를 포함하여 수많은 개발자들이 요청하여 2021년 11월 28일 최초 등록된 이슈(#10148)가 2023년 7월 18일 베타버전으로 Rstudio 일일 빌드 (Daily Builds)를 통해 첫 공개되었다. GitHub 부조종사(Copilot)를 Rstudio에서 사용하기 위해서는 특별한 버전 Rstudio, 즉 일일 빌드 (Daily Builds)가 필요하였으나 현재는 각자 운영체제에 맞는 RStudio Desktop 버전을 다운로드한 후 설치하게 되면 기본적으로 부조종사 기능을 사용할 수 있다. 기본적으로 GitHub 부조종사 기능은 구독서비스로 매월 일정액($10)을 지불해야 사용할 수 있다.\n\nTools -&gt; Global Options -&gt; Copilot -&gt; Enable Github Copilot\n\n설치가 완료되면 Rstudio를 실행하고 상단 메뉴에서 ‘Tools’를 선택한 다음 ’Global Options’을 클릭하면, 왼쪽 사이드바에서 ’Copilot’을 선택하고 ’Enable GitHub Copilot’ 체크박스를 선택한 다음 ’Sign In’을 클릭하고 나타나는 링크에서 인증 코드를 입력한다. ’Authorize Github Copilot Plugin’을 클릭하여 인증 과정을 완료하면 설정이 완료된다.\n\n\n\n\n\n그림 1.13: GitHub 부주종사 설치과정\n\n\nGitHub Copilot를 Rstudio에서 사용해보면, 작성하려는 코드(Ghost Text)가 회색으로 예측되어 나타난다. ‘Tab’ 키를 눌러 탭완성(Tab Completion) 기능으로 제시한 코드를 수락하여 개발을 이어간다.",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>저작환경 설정</span>"
    ]
  },
  {
    "objectID": "setup.html#rstudio-ide",
    "href": "setup.html#rstudio-ide",
    "title": "\n1  저작환경 설정\n",
    "section": "\n1.2 RStudio IDE",
    "text": "1.2 RStudio IDE\nRStudio IDE는 처음 데이터 과학 R 프로그래밍 언어를 위한 통합개발환경으로 시작하였으나 이제는 파이썬을 비롯하여 SQL, Observable JS 등 데이터 과학 전분야를 담당하고 있다. 특히, 데이터 분석, 시각화 및 문서 작업을 간편하게 할 수 있도록 다양한 도구와 기능을 제공할 뿐만 아니라, Shiny 웹 애플리케이션 개발, Plumber를 통한 API 개발, 쿼토(Quarto)/R 마크다운을 활용해 다양한 데이터 과학 산출물을 제작할 수 있다. 또한, Git 버전 관리 시스템과 통합되어 코드 이력을 쉽게 추적하고 관리할 수 있고 GitHub과 연결하여 협업기능도 지원한다. 앞서 살펴본 GitHub 부조종사(Copilot) 유료구독을 한 경우 Rstudio와 연결하여 챗GPT로 유명한 생성형 AI를 통해 텍스트 및 다양한 프로그래밍 언어로 코드를 생성할 수 있다.\n그림 1.6 에 RStudio IDE 설치과정이 나와 있다. 먼저, R 프로그래밍 언어 공식 웹사이트인 CRAN에서 R을 다운로드하여 설치한다. 그 다음, RStudio 공식 웹사이트에서 사용자의 운영 체제에 맞는 RStudio IDE 버전을 다운로드한다. 다운로드한 설치 파일을 실행하여 설치 과정을 진행하며, 일반적으로 기본 설정으로 설치하는 것이 좋다. 설치가 완료되면 RStudio를 실행하여 R과 함께 사용한다.\n\n\n\n\n\n그림 1.6: RStudio IDE 설치과정\n\n\nRStudio 코드 편집기는 자동 완성, 구문 강조, 맞춤법 검사 등 기능을 제공하여 개발자 편의를 향상시켰고, GUI 데이터 뷰어를 통해 데이터프레임과 데이터 객체를 직접적으로 시각적으로 살펴볼 수 있으며, 내장 패키지 관리 시스템을 통해 R 패키지도 손쉽게 설치하고 관리할 수 있다.\n웹앱 Shiny 애플리케이션 개발과 테스트도 가능하고, 문서화 프로그래밍을 차세대 R 마크다운 쿼토(Quarto)를 이용하여 코드, 데이터, 그래프를 하나의 문서로 통합하여 구현할 수 있을 뿐만 아니라 팬독(Pandoc)을 통해 다양한 형태 문서를 자동으로 생성할 수 있다.\n\n\n\n\n\n그림 1.7: RStudio 문서화 프로그래밍 사례\n\n\n\n1.2.1 비주얼 마크다운 편집기\n비주얼(visual) 마크다운 기능을 사용하게 되면 과학/기술 문서 작성의 용이성 뿐만 아니라 인용(Citation), 문학적 프로그래밍(literate programming) 을 통한 재현가능한 과학문서 구현, 팬독(Pandoc)을 사용하여 텍스트와 코드로 PDF, HTML, 워드 등 다양한 문서 동시 생성이 가능하다.\n\n\n\n\n\n그림 1.8: RStudio 비주얼 마크다운 편집기능\n\n\n\n1.2.2 단축키\n데이터 과학에서 통합개발환경(Integrated Development Environment, IDE)은 코드 기반의 제품과 서비스 개발 효율성과 효과성을 극대화에 매우 큰 기여를 한다. IDE는 코딩, 디버깅, 컴파일, 배포 등 프로그램 개발에 필요한 다양한 작업을 한 곳에서 수행할 수 있게 통합함으로써 개발자가 보다 집중하고 효율적으로 작업할 수 있는 환경을 제공한다. 단축키를 통해 개발자는 반복적인 작업을 빠르고 효율적으로 수행함으로써 전체적인 작업 속도와 생산성을 크게 높일 수 있다.\n특히, RStudio는 데이터 과학 분야에서 널리 사용되는 프로그래밍 언어인 R을 위한 특화된 통합 개발환경을 제공한다. RStudio는 R 언어 특성에 맞춰진 다양한 기능과 도구를 통합하여, 데이터 과학자와 연구자들이 데이터 분석, 시각화, 모형개발 작업을 보다 효율적으로 수행할 수 있도록 돕는다. RStudio에서 코드 작성, 편집 및 실행을 보다 빠르고 효율적으로 수행하기 위해 많이 사용되는 단축키는 다음과 같다.\n\n\n표 1.1: RStudio에서 자주 사용되는 단축키\n\n\n\n단축키\n윈도우\n맥\n\n\n\n마지막 명령어\n↑\n↑\n\n\n마지막 매칭 명령어\n^ + ↑\n⌘ + ↑\n\n\n자동 탭완성\n↹\n↹\n\n\n\n—- 실행 —-\n\n\n\n선택영역 실행\n^ + ⏎\n⌘ + ⏎\n\n\nSource\n^ + ⇧ + S\n⌘ + ⇧ + S\n\n\nSource + 메아리(Echo)\n^ + ⇧ + ⏎\n⌘ + ⇧ + ⏎\n\n\n\n—- 화면 전환 —-\n\n\n\n코딩 패널창 전환\n^ + 1\n^ + 1\n\n\n콘솔 패널창 전환\n^ + 2\n^ + 2\n\n\n\n—- 코딩 단축키 —-\n\n\n\n&lt;-\n⎇ + -\n⌥ + -\n\n\n%&gt;%\n^ + ⇧ + M\n⌘ + ⌥ + M\n\n\n주석처리\n^ + ⇧ + C\n^ + ⌥ + C\n\n\n주석제거\n^ + ⇧ + /\n^ + ⌥ + /\n\n\n실행취소\n^ + Z\n⌘ + Z\n\n\n다시 실행\n^ + ⇧ + Z\n⌘ + ⇧ + Z\n\n\n단축키 참조\n⎇ + ⇧ + Z\n⌥ + ⇧ + Z\n\n\n다중커서\n^ +⎇ + ↑\n^ + ⌥ + ↑\n\n\n\n^ +⎇ + ↓\n^ + ⌥ + ↓\n\n\n\n^ +⎇ + 클릭\n^ + ⌥ + 클릭\n\n\n\n—- 찾기 및 바꾸기 —-\n\n\n\n줄 찾아가기\n⇧ + ⎇ + G\n⌘ + ⇧ + ⌥ + G\n\n\n찾기 바꾸기\n^ + F\n⌘ + F\n\n\n파일에서 찾기\n^ + ⇧ + F\n⌘ + ⇧ + F\n\n\n모두 접기\n⎇ + O\n⌘ + ⌥ + O\n\n\n모두 펴기\n⎇ + ⇧ + O\n⌘ + ⌥ + ⇧ + O",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>저작환경 설정</span>"
    ]
  },
  {
    "objectID": "setup.html#출판-플랫폼",
    "href": "setup.html#출판-플랫폼",
    "title": "\n1  저작환경 설정\n",
    "section": "\n1.3 출판 플랫폼",
    "text": "1.3 출판 플랫폼\n데이터 과학 분야에서 산출물을 공유하고 출판하는 것은 매우 중요한 단계로 효과적인 출판과 비용적인 면을 고려하여 최적 플랫폼과 도구를 선정한다. 데이터 과학 분야를 개척한 RStudio IDE로 과거 R 마크다운 산출물을 RPubs에 출판한 경험이 있다면, Quarto Pub은 그와 유사한 경험을 제공한다. 다른 대안으로는 netlify, GitHub Pages, RStudio Connect 등이 있다.\n\n\n\n\n\n그림 1.9: 쿼토 출판",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>저작환경 설정</span>"
    ]
  },
  {
    "objectID": "setup.html#프로그래밍-언어",
    "href": "setup.html#프로그래밍-언어",
    "title": "\n1  저작환경 설정\n",
    "section": "\n1.4 프로그래밍 언어",
    "text": "1.4 프로그래밍 언어\n\\(\\LaTeX\\), Sweave, R마크다운을 사용한 경험이 있다면 재현가능하고 추적가능한 과학기술 문서 제작의 장점을 경험했을 것이다. 쿼토는 기존 문서 \\(\\LaTeX\\), 프로그래밍 언어 R 언어 뿐만 아니라 파이썬, 자바스크립트, 줄리아(Julia) 언어도 지원한다.\n\n1.4.1 R 언어\nR 언어를 공식 웹사이트인 CRAN에서 사용하는 운영 체제에 맞는 R 버전을 선택하여 다운로드 받는다. 그림 1.10 처럼 설치과정은 기본 옵션을 따르며, 필요에 따라 추가 옵션을 조정할 수 있다. 설치가 완료되면 R 언어만 사용할 수 있고, R 언어 전용 편집기 RStudio를 설치하고 엔진으로 방금 설치한 R 언어를 선택하면 수월하게 R 프로그래밍을 시작할 수 있다.\n\n\n\n\n\n그림 1.10: R 설치 과정\n\n\n\n1.4.2 파이썬\n파이썬을 설치하는 과정은 먼저 파이썬 공식 웹사이트에 접속해 운영 체제에 맞는 파이썬 설치 파일을 다운로드한다. 파이썬 버전은 RStudio에서 reticulate를 통해 검증된 파이썬 3.11 버전 사용을 권장한다. 다운로드한 설치 파일을 실행한 후, 설치 과정에서 ‘Add Python to PATH’ 옵션을 선택하는 것이 좋다. 안내에 따라 설치를 진행하면 설치를 완료할 수 있다.\n\n\n\n\n\n그림 1.11: 파이썬 설치 과정\n\n\n파이썬을 설치한 이유는 파이썬 프로그래밍 언어로 작업한 결과물을 문서에 자동으로 넣고 재현가능하고 추적가능한 과학기술 문서를 만들기 위함이다. RStudio에서 파이썬 코드를 사용하려면 코드 덩어리(code chunk)에 파이썬 코드를 넣고 다음과 같이 설치한 파이썬을 Python Interpreter에 지정한다. 바닐라 파이썬 뿐만 아니라 가상환경에서 파이썬, 콘다 환경에서 파이썬을 지정할 수 있다.\n\nTools -&gt; Global Options -&gt; Python -&gt; Python Interpreter\n\n\n\n\n\n\n그림 1.12: 파이썬 RStudio 연결\n\n\n파이썬 프로그램이 제대로 실행되는지 쿼토 문서(.qmd)를 하나 만들어 다음과 같은 파이썬 코드 덩어리를 넣고 실행해본다.\n\n\n파이썬 코드 덩어리\n```{python}\nprint(\"Hello, 파이썬!\")\n```\n\n\n실행 결과\n\n#&gt; Hello, 파이썬!",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>저작환경 설정</span>"
    ]
  },
  {
    "objectID": "setup.html#latex-환경설정",
    "href": "setup.html#latex-환경설정",
    "title": "\n1  저작환경 설정\n",
    "section": "\n1.6 \\(\\LaTeX\\)` 환경설정",
    "text": "1.6 \\(\\LaTeX\\)` 환경설정\n라텍 설치와 사용은 처음에는 다소 복잡하게 느껴질 수 있다. 일반적으로 라텍 배포판(예: TeX Live, MiKTeX)을 설치한 뒤, 텍스트 에디터(예: TeXShop, TeXworks)를 선택하여 작업환경을 구성한다. 설치가 완료되면, .tex 파일을 생성하고 라텍 명령을 통해 PDF를 컴파일한다.\n환경변수 설정, 패키지 관리, 글꼴 설정 등 세부적인 환경설정이 필요하다. 특히 한글 문서를 처리할 경우에는 ko.TeX나 CTeX와 같은 한글을 지원하는 패키지를 별도로 설치하고 한글 글꼴도 설정해야 한다.",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>저작환경 설정</span>"
    ]
  },
  {
    "objectID": "setup.html#latex-설치",
    "href": "setup.html#latex-설치",
    "title": "\n1  저작환경 설정\n",
    "section": "\n1.5 \\(\\LaTeX\\) 설치",
    "text": "1.5 \\(\\LaTeX\\) 설치\n라텍(\\(\\LaTeX\\)) 설치와 사용은 처음에는 다소 복잡하게 느껴질 수 있다. 일반적으로 라텍 배포판(예: TeX Live, MiKTeX)을 설치한 뒤, 텍스트 에디터(예: TeXShop, TeXworks)를 선택하여 작업환경을 구성한다. 설치가 완료되면, .tex 파일을 생성하고 라텍 명령을 통해 PDF를 컴파일한다.\n환경변수 설정, 패키지 관리, 글꼴 설정 등 세부적인 환경설정이 필요하다. 특히 한글 문서를 처리할 경우에는 ko.TeX나 CTeX와 같은 한글을 지원하는 패키지를 별도로 설치하고 한글 글꼴도 설정해야 한다.\nTinyTeX은 TeX Live를 기반으로 한 경량, 이식성 좋고, 사용하기 쉬운 라텍 배포판으로 라텍 설치와 관련된 일반적인 불편함을 해결하기 위해 만들어졌고, 특히 “이휘 쉬에(Yihui Xie)”가 개발하여 R과 R 마크다운 통합이 잘 되어 있다.\n다른 라텍 배포판들이 수 기가바이트(GB)의 크기를 갖지만, TinyTeX은 설치 크기가 작고 간단한 설치 과정을 제공으로 쉽지만 미려한 문서를 원하는 사용자들에게 인기가 많다. 특히, R과의 통합도 잘 이루어져 있어, 라텍 문서를 컴파일할 때 누락된 라텍 패키지도 자동으로 설치해주는 기능이 많은 사랑을 받고 있다.\n보통 TexLive에 기반을 둔 tinytex 를 사용하는데 한글을 사용하는 입장에서는 kotex를 설치하는 방법도 모색이 필요하다. 유니코드 문자를 처리하기 위해서 xelatex을 쿼토 라텍 기본엔진으로 지정하면 xelatex을 통해 CJK 문자가 포함된 PDF 파일 제작이 가능하다.\n쿼토를 설치하면 quarto install tinytex 명령어로 TinyTeX을 쉽게 설치할 수 있고, 설치 정보는 quarto tools info tinytex으로 파악이 가능하다.\n$ quarto install tinytex\nInstalling tinytex\n[✓] Downloading TinyTex v2023.09\n[✓] Unzipping TinyTeX-v2023.09.tar.gz\n[✓] Moving files\n[✓] Verifying tlgpg support\n[✓] Default Repository: https://mirrors.rit.edu/CTAN/systems/texlive/tlnet/\nInstallation successful\n\n$ quarto tools info tinytex\n{\n  \"name\": \"TinyTeX\",\n  \"installed\": true,\n  \"version\": \"v2023.09\",\n  \"directory\": \"/home/statkclee/.TinyTeX\",\n  \"bin-directory\": \"/home/statkclee/.TinyTeX/bin/x86_64-linux\",\n  \"configuration\": {\n    \"status\": \"ok\"\n  }\n}\nkotex 패키지 주요 장점 중 하나는 한글 관련 문제를 해결할 수 있는 다양한 라텍 패키지와 기본 한글 글꼴을 내장하고 있어 한글 문서 작성이 훨씬 편리하다. 하지만, tinytex를 기본 라텍 엔진으로 사용할 경우, 누락된 패키지로 인해 추가 작업이 어려울 수 있다. 이러한 문제를 해결하기 위해 tinytex::parse_install() 함수를 사용하면, 오류가 발생한 텍스트를 붙여넣을 때 자동으로 필요한 패키지를 설치해 준다. 설치과정에서 오류 사항이 담긴 .log 파일을 tinytex::parse_install() 함수에 인자로 넣어주면, 자동으로 필요한 패키지를 설치해 준다.\n\n# log 파일이 hello_world.log\ntinytex::parse_install(\"hello_world.log\")\n\ntinytex::parse_install(\n  text = \"! LaTeX Error: File `titlepic.sty' not found.\"\n)\n\n\n\n\n\n\n\ntinytex 설치\n\n\n\n윈도우 환경에서 쿼토로 PDF 파일 생성할 때 다음과 같은 오류가 발생하여 로그에 기록될 경우 tinytex R 패키지를 설치하고 tinytex::install_tinytex() 명령어로 tinytex를 다시 설치한다.\nrunning xelatex - 1\n\nNo TeX installation was detected.\n\nPlease run 'quarto install tinytex' to install TinyTex.\nIf you prefer, you may install TexLive or another TeX distribution.",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>저작환경 설정</span>"
    ]
  },
  {
    "objectID": "setup_quarto.html",
    "href": "setup_quarto.html",
    "title": "1  쿼토(Quarto)",
    "section": "",
    "text": "1.1 싱글 소싱 출판저작\n데이터 과학을 비롯한 과학기술 분야 출판저작이 다른 분야와 약간 다를 수 있지만, 출판의 기본적인 접근 방식은 대체로 유사하다고 볼 수 있다. 특히, 싱글 소싱(Single Sourcing)1 방식을 통해 콘텐츠 저작부터 디자인, 협업, 검수, 최종 출판물 관리까지 일원화하고 자동화한다면, 중복작업과 낭비를 줄이는 동시에 재현 가능성을 높일 수 있어 과학기술 출판저작물에 있어 가장 이상적인 방법으로 평가받고 있다.\n싱글 소싱 저작 방식은 데이터, 코드, 수식, 다이어그램, 텍스트 등 다양한 저작물 구성요소를 하나의 소스에서 관리함으로써, 수정이나 업데이트가 필요할 때 일관성을 유지하면서 효율적으로 저작작업을 수행할 수 있어 연구 결과의 정확성과 신뢰성을 높이기 위한 재현가능한 글쓰기를 중시하는 과학기술 분야에서 특히 강조되고 있으며, 싱글 소싱을 통한 자동화 생산성을 중시하는 비즈니스 글쓰기에서도 점차 글로벌 표준으로 자리를 잡아가고 있다.\ngraph LR;\n    style A fill:#f9d71c,stroke:#333,stroke-width:2px;\n    style B fill:#f9d71c,stroke:#333,stroke-width:2px;\n    style C fill:#ff6b6b,stroke:#333,stroke-width:2px;\n    style J fill:#c4e17f,stroke:#333,stroke-width:2px;\n    style K fill:#c4e17f,stroke:#333,stroke-width:2px;\n    style L fill:#c4e17f,stroke:#333,stroke-width:2px;\n\n    classDef officeStyle fill:#f9d71c,stroke:#333,stroke-width:2px;\n    class AA,AB officeStyle;\n\n    A[콘텐츠 저작] --&gt; B[디자인]\n    B --&gt; C[출판]\n    \n    C --&gt; J[PDF]\n    C --&gt; K[HTML]\n    C --&gt; L[워드/한글/PPT]\n  \n   \n    J --&gt; W[논문/보고서]\n    J --&gt; X[\"(전자)책\"]\n    \n    K --&gt; Y[웹사이트/블로그]\n    K --&gt; Z[대쉬보드]\n    \n    L --&gt; AA[비즈니스 문서]\n    L --&gt; AB[과학기술 문서]",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>쿼토(Quarto)</span>"
    ]
  },
  {
    "objectID": "setup_quarto.html#작업흐름",
    "href": "setup_quarto.html#작업흐름",
    "title": "1  쿼토(Quarto)",
    "section": "1.2 작업흐름",
    "text": "1.2 작업흐름\n기존 R .Rmd 파일과 파이썬 .ipynb 파일을 .qmd 파일로 통일시킨 것은 쿼토의 주요 특징 중 하나이다. 이러한 통합은 다양한 프로그래밍 언어를 사용하는 복잡한 작업 흐름을 단순화시킬 수 있고 협업을 촉진한다. 저작자는 마크다운을 사용하여 콘텐츠를 작성하고, 프로그래밍 코드는 R, 파이썬, 자바스크립트, 줄리아 등 프로그래밍 언어로 작성한다. 텍스트와 프로그래밍 코드는 팬독(pandoc)을 통해 마크다운 변환이 자동으로 이루어지기 때문에 후속 작업에 대해 걱정할 필요가 없다. 싱글 소싱 개념이 팬독을 통해 자동화되어 원하는 저작 결과물을 효율적이고 빠르게 얻을 수 있어 저작작업 생산성을 크게 향상시키는 장점이 있다.\n\nR파이썬\n\n\n\n\n\n\n\n\n그림 1.2: 쿼토 - R\n\n\n\n\n\n\n\n\n\n\n\n그림 1.3: 쿼토 - 파이썬",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>쿼토(Quarto)</span>"
    ]
  },
  {
    "objectID": "setup_quarto.html#쿼토-해부",
    "href": "setup_quarto.html#쿼토-해부",
    "title": "1  쿼토(Quarto)",
    "section": "1.3 쿼토 해부",
    "text": "1.3 쿼토 해부\n쿼토는 데이터 과학 문서 작성의 새로운 패러다임을 제시하며, R마크다운의 후속임을 자처하고 있다. 10년 이상의 knitr 경험을 바탕으로 개발되었고, 최근에는 RStudio Visual 편집 기능을 통해 위지위그(What You See Is What You Get) 패러다임도 적극 수용함으로써 저작자는 복잡한 코드 작성 없이도 직관적으로 문서를 작성할 수 있게 되었다.\n쿼토는 다양한 통합개발환경(IDE)과 호환성을 지원하고 있다. R 사용자는 RStudio IDE를, 파이썬 경험이 풍부한 사용자는 파이참, 범용 소프트웨어 개발 경험을 가지신 분은 VS코드, 이맥스/VIM 등과 통합하여 사용할 수 있고, 쿼토 CLI를 통해 IDE에서 쉽게 저작물을 다양한 형태로 출판할 수 있다.\n쿼토는 다양한 프로그래밍 언어를 지원하여 문서 내에 계산(Computation) 기능을 쉽게 통합할 수 있는 현존하는 얼마 안되는 문학적 프로그래밍 저작도구다. R, 파이썬, SQL, 자바스크립트 등을 활용해 그래프, 표, 다이어그램, 인터랙티브 산출물을 문서에 반영하여 한층 진화된 디지털 문서 저작을 지원한다.\n쿼토는 데이터 과학자, 개발자, 과학기술 연구원, 사무노동자 등 다양한 분야의 종사자분들로부터 챗GPT 인공지능 시대 자동화를 통한 사무업무 생산성 도구로 자리매김하고 있다.\n\n\n\n\n\n\n그림 1.4: 쿼토 작업흐름\n\n\n\n쿼토 저작은 메타데이터(전문, front matter), 텍스트, 코드라는 세 가지 주요 구성요소로 이뤄진다. 쿼토는 문학적 프로그래밍과 자동화 패러다임을 적극 반영하여 데이터 과학 프로그래밍과 과학기술 문서 작성을 더 효율적이고 일관된 방식으로 저작하고 출판할 수 있도록 지원한다.\n\n메타데이터 (YAML): YAML은 “YAML Ain’t Markup Language”의 약자로, 데이터를 구조화하는 언어이다. 쿼토에서 이를 활용하여 문서 전문(Front Matter)을 구성한다. 문서 상단에 위치하며 문서 제목, 작성자, 날짜, 문서 형식 등을 포함하며 문서의 전반적인 설정과 구성을 담당한다.\n텍스트 (마크다운): 마크다운은 2004년에 아론 스워츠와 존 그루버에 의해 개발된 언어로, HTML과 같은 복잡한 마크업 언어 대신 사용되는 간단한 형식의 문서 작성 도구다. 복잡한 디자인보다 콘텐츠 구조와 의미에 중점을 두기 때문에, 문서 저작자는 외양보다 내용에 더 집중할 수 있다.\n코드 (knitr, jupyter): knitr는 R 코드를 문서에 통합할 수 있는 패키지, jupyter는 파이썬 사용자에게 인기 있는 패키지이다. 쿼토에서는 이 두 패키지를 활용하여 작성된 코드를 문서에 포함시킬 수 있다. 데이터 분석, 통계값, 그래프, 다이어그램, 지도 등 다양한 코딩 결과물을 문서에 반영시킬 수 있다.\n\n\n\n\n\n\n\n그림 1.5: 쿼토 문서 구성요소\n\n\n\n\n1.3.1 YAML\nYAML(발음은 야믈)은 R 마크다운과 쿼토에서 주로 사용되는 경량언어다. YAML은 문서 전문(front matter) 부분에 위치해 코드와 텍스트로 구성된 문서 본문보다 먼저 위치하며, 문서 메타데이터를 설정하는 역할을 수행한다. 쿼토에서 YAML을 이용해 문서 제목, 작성자, 날짜, 문서 형식, 레이아웃 등을 정의한다. YAML은 키와 값이 콜론(:)으로 구분되는 키값(key-value) 쌍을 사용해 각종 문서 설정정보를 표현하여 전반적인 문서 설정과 구성을 쉽게 관리한다.\n\n\n\n\n키값 쌍\n---\nkey: value\n---\n\n\n\n\n\n문서출력형식 PDF 지정\n---\nformat: pdf\n---\n\n\n\nYAML을 이용한 문서 전문 작성은 가독성이 뛰어나 읽고 이해하기 쉽다는 장점이 있다. 특히 복잡한 문서 구조나 설정을 지정할 때 유용하며, 중첩된 선택옵션 같은 복잡한 구조도 들여쓰기를 통해 명확하게 표현할 수 있다. YAML은 재사용성이 뛰어나서 같은 설정 값을 여러 곳에서 사용해야 할 경우, 하나의 YAML 파일만 수정하면 모든 곳에 적용될 수 있어 시간과 노력을 크게 절약할 수 있다. 텍스트 기반인 만큼 Git과 같은 버전 제어 시스템과도 잘 통합되어, 여러 저자가 공동으로 작업할 때 진가를 발휘하지만, 들여쓰기에 민감하여 실수로 공백을 잘못 넣었을 경우 오류가 발생할 수 있어 주의가 필요하다.\nYAML은 기본적으로 KEY: Value 형태로 구성되어 있지만, 이러한 단순한 구조 덕분에 매우 편리하고 유용하다. YAML을 통한 문서 저작을 경험하게 되면 YAML의 편리성과 유용함을 더 깊게 이해하게 된다.\n\n\n\nCLI PDF 지정\n$ quarto render document.qmd --to pdf\n\n\n\n\n\nYAML 문서형식 PDF\n---\nformat: pdf\n---\n\n\n\nquarto render 명령을 사용하여 document.qmd 파일을 HTML 형식으로 제작하는 예시에서 CLI 옵션 -M code fold:true을 사용하여 코드 섹션을 접을 수 있게 만들었다. 이러한 설정을 YAML로 바꾸면, 설정 파일 내에 format 섹션을 생성하고 그 안에 html을 정의한다. 그 후, html 포맷 설정에 목차 생성(toc: true)과 코드 접기 기능(code-fold: true)을 추가한다.\nCLI 옵션을 직접 입력하는 것과 비교하여 YAML 파일에 설정을 담는 것이 훨씬 깔끔하고 우아하다. CLI에서 많은 선택옵션을 직접 입력하면 명령어가 길어져 가독성이 떨어지고, 나중에 어떤 옵션을 사용했는지 확인하기 어렵다. 하지만 YAML 파일을 사용하면, 모든 설정을 한 곳에서 명확하게 관리할 수 있어 유지보수가 쉽고, 공동 저작자들과 공유와 협업에도 유리하다.\n\n\n\nCLI 코드접기\n$ quarto render document.qmd --to html -M code fold:true\n\n\n\n\n\nYAML 코드접기\n---\nformat: \n  html:\n    toc: true\n    code-fold: true\n---\n\n\n\n\n1.3.2 탭 자동완성\nRStudio나 VSCode와 같은 통합개발환경(IDE)에서 제공하는 탭-자동완성(Tab Completion) 기능은 YAML 전문코드를 작성할 때 매우 유용하다. 이 기능을 사용하면, 저작자는 첫 글자나 몇몇 글자를 타이핑한 후에 탭 키를 눌러 가능한 모든 명령어, 변수, 함수 이름 등을 볼 수 있다. 이로 인해 오타의 가능성이 줄어들고 문서 저작 속도가 향상된다. 특히 RStudio에서는 Ctrl + space 단축키를 사용하여 YAML 전문코드를 작성할 때 가능한 키값을 선택할 수 있는 목록을 제공한다. 이러한 기능은 문서 저작 과정을 효율적으로 만들어 준다.\n\n\n\n\n\n\n\n\nYAML 키 설정\n\n\n\n\n \n\n\n\n\n\n탭 자동완성 선택확정\n\n\n\n\n\n\n그림 1.6: RStudio YAML 자동완성",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>쿼토(Quarto)</span>"
    ]
  },
  {
    "objectID": "setup_quarto.html#r-마크다운과-쿼토",
    "href": "setup_quarto.html#r-마크다운과-쿼토",
    "title": "1  쿼토(Quarto)",
    "section": "1.4 R 마크다운과 쿼토",
    "text": "1.4 R 마크다운과 쿼토\nFAQ for R Markdown Users\n쿼토는 “차세대 R 마크다운”이라는 별명에 걸맞게 R 마크다운의 다양한 패키지와 기능을 지원하고 있다. 그러나 쿼토의 개발 기간이 R 마크다운보다 상대적으로 짧기 때문에 아직은 R 마크다운의 모든 기능을 지원하지 않는다. 그럼에도 불구하고, 쿼토는 지속적으로 지원 범위를 확장하고 있으며, 고유한 기능도 추가하고 있다. 이러한 점들은 쿼토가 R 마크다운 생태계에 어떤 새로운 가치를 더하고 있는지를 잘 보여준다. 쿼토 1.4 버전에 대쉬보드(dashboards)가 추가되어 R 마크다운 기능 대부분을 지원하게 되었다. 다음 표 1.1 에서 쿼토와 R 마크다운을 다양한 문서 기능별로 비교하고 있다.\n\n\n\n표 1.1: R 마크다운과 쿼토 비교\n\n\n\n\n\n기능\nR 마크다운\n쿼토(Quarto)\n\n\n\n\n파일형식\nhtml_document / pdf_document / word_document\nhtml / pdf / docx\n\n\n비머(Beamer)\nbeamer_presentation\nbeamer\n\n\n파워포인트(PPT)\npowerpoint_presentation\npptx\n\n\n웹 슬라이드\nxaringan / ioslides / revealjs\nrevealjs\n\n\n고급 레이아웃\ntufte / distill\nQuarto Article Layout\n\n\n상호 참조\nhtml_document2 / pdf_document2 / word_document2\nQuarto Crossrefs\n\n\n웹사이트/블로그\nblogdown / distill\nQuarto Websites / Quarto Blogs\n\n\n책\nbookdown\nQuarto Books\n\n\n인터랙티브 문서\nShiny Documents\nQuarto Interactive Documents\n\n\n페이지 HTML\npagedown\n출시 예정\n\n\n학술 논문\nrticles\nQuarto Journal Articles\n\n\n대쉬보드\nflexdashboard\n\n\n\n인터랙티브 자습서\nlearnr\n계획 없음\n\n\n\n\n\n\n\n\n\n\n\n\n위지위그 vs 위지윔\n\n\n\n위지위그(WYSIWYG: What You See Is What You Get)는 “보는 대로 얻는다”는 의미로, 사용자가 문서를 편집할 때 화면에 보이는 형태가 최종 출력물과 동일하게 나오는 편집 방식이다. 대다수 현대 워드 프로세서에서 위지위그 방식을 사용하고 있다. 사용자에게 직관적이고 쉽게 접근할 수 있는 인터페이스를 제공하기 때문이다.\n그러나 위지위그 방식에도 단점은 있다. 마크다운, TeX 같은 텍스트 기반 편집 방식은 문서 호환성과 범용성을 위해 쓰이는 반면, 위지위그 저작방식은 호환성과 범용성을 다소 희생할 수 밖에 없다. 특히 복잡한 문서나 웹 페이지를 작성하는 경우, 코딩방식으로 전환하여 수작업으로 최적화를 시도하더라도 완벽한 해결이 어렵다. 예를 들어, 위지위그 편집기에서 문서를 작성하면 뒷단에 불필요한 코드나 태그가 자동으로 생성되어 문서 최적화를 방해하며, 시간이 지남에 따라 누적되어 호환성과 재현성에 심각한 문제를 야기한다. 2 3\n위지윔(WYSIWYM: What You See Is What You Mean)은 “당신이 보는 것은 당신이 뜻하는 것이다”라는 의미로, 위지위그(WYSIWYG) 방식의 한계를 극복하기 위해 나온 대안 편집 방식이다. 위지윔 방식에서는 사용자가 무엇을 의미하는지를 중점으로 두어, 본래의 코드 구조를 더 명확하게 알 수 있다. 코드 의미를 직접적으로 반영하여, 불필요한 요소 없이 효율적으로 문서를 작성할 수 있는 장점이 있다.\nRStudio의 Visual 편집 기능은 위지윔 지향점을 잘 반영하고 있다. 사용자는 복잡한 코드나 태그 없이도 의미 있는 문서 구조를 쉽게 생성하고 관리할 수 있어 문서 최적화와 호환성을 높일 수 있으며, 더욱 높은 문서 저작 생산성을 달성할 수 있다.\n오픈 소스 LaTeX 편집기인 LyX는 위지윔 방식을 초기부터 채택하여 사용자에게 코드 본래 구조와 의미를 명확하게 파악할 수 있는 인터페이스를 제공했다. 이러한 접근법은 복잡한 수식이나 과학적인 문서를 작성할 때 특히 유용하며,  복잡성을 낮추면서도 강력한 기능을 최대한 활용할 수 함으로써 위지위그 한계를 극복했다는 평가를 받고 있다.\n\n\n\n\n\n\n\n문서 컴파일\n위지위그\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHyde, Adam. 2021. “Single Source Publishing - A investigation of what Single Source Publishing is and how this ‘holy grail’ can be achieved”. https://coko.foundation/articles/single-source-publishing.html.",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>쿼토(Quarto)</span>"
    ]
  },
  {
    "objectID": "setup_quarto.html#paradigm",
    "href": "setup_quarto.html#paradigm",
    "title": "1  쿼토(Quarto)",
    "section": "1.5 저작방식 패러다임",
    "text": "1.5 저작방식 패러다임\n위지위그(WYSIWYG: What You See Is What You Get)는 “보는 대로 얻는다”는 의미로, 사용자가 문서를 편집할 때 화면에 보이는 형태가 최종 출력물과 동일하게 나오는 편집 방식이다. 대다수 현대 워드 프로세서에서 위지위그 방식을 사용하고 있다. 사용자에게 직관적이고 쉽게 접근할 수 있는 인터페이스를 제공하기 때문이다.\n그러나 위지위그 방식에도 단점은 있다. 마크다운, TeX 같은 텍스트 기반 편집 방식은 문서 호환성과 범용성을 위해 쓰이는 반면, 위지위그 저작방식은 호환성과 범용성을 다소 희생할 수 밖에 없다. 특히 복잡한 문서나 웹 페이지를 작성하는 경우, 코딩방식으로 전환하여 수작업으로 최적화를 시도하더라도 완벽한 해결이 어렵다. 예를 들어, 위지위그 편집기에서 문서를 작성하면 뒷단에 불필요한 코드나 태그가 자동으로 생성되어 문서 최적화를 방해하며, 시간이 지남에 따라 누적되어 호환성과 재현성에 심각한 문제를 야기한다. 2 3\n위지윔(WYSIWYM: What You See Is What You Mean)은 “당신이 보는 것은 당신이 뜻하는 것이다”라는 의미로, 위지위그(WYSIWYG) 방식의 한계를 극복하기 위해 나온 대안 편집 방식이다. 위지윔 방식에서는 사용자가 무엇을 의미하는지를 중점으로 두어, 본래의 코드 구조를 더 명확하게 알 수 있다. 코드 의미를 직접적으로 반영하여, 불필요한 요소 없이 효율적으로 문서를 작성할 수 있는 장점이 있다.\nRStudio의 Visual 편집 기능은 위지윔 지향점을 잘 반영하고 있다. 사용자는 복잡한 코드나 태그 없이도 의미 있는 문서 구조를 쉽게 생성하고 관리할 수 있어 문서 최적화와 호환성을 높일 수 있으며, 더욱 높은 문서 저작 생산성을 달성할 수 있다.\n오픈 소스 LaTeX 편집기인 LyX는 위지윔 방식을 초기부터 채택하여 사용자에게 코드 본래 구조와 의미를 명확하게 파악할 수 있는 인터페이스를 제공했다. 이러한 접근법은 복잡한 수식이나 과학적인 문서를 작성할 때 특히 유용하며,  복잡성을 낮추면서도 강력한 기능을 최대한 활용할 수 함으로써 위지위그 한계를 극복했다는 평가를 받고 있다.\n\n\n\n\n\n\n\n문서 컴파일\n위지위그",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>쿼토(Quarto)</span>"
    ]
  },
  {
    "objectID": "setup_quarto.html#main-features",
    "href": "setup_quarto.html#main-features",
    "title": "1  쿼토(Quarto)",
    "section": "1.6 워드 프로세서 4",
    "text": "1.6 워드 프로세서 4\n워드 프로세서(Word Processor)는 문서 제작을 위한 소프트웨어로, 시각적으로 잘 구성된 인터페이스와 다양한 편집 기능을 제공한다. 사용자는 이러한 기능을 통해 원하는 형태와 구조를 갖는 문서를 쉽게 저작할 수 있다. 워드 프로세서는 글자 스타일, 문단 구성, 이미지 삽입, 표 만들기 등 다양한 기능이 포괄적으로 제공되며, 윈도우에 기본 제공되는 메모장(Notepad) 텍스트 편집기보다 훨씬 더 풍부한 문서 작성이 가능하다. 2023년 9월 1일부로 윈도우에서 무료로 제공되던 워드패드(WordPad)에 대한 지원도 없어지고 윈도우에서도 제거될 것이라는 발표가 있었다. 따라서, 서식이 필요한 문서를 저작할 경우 MS 워드(Word)나 아래한글과 같은 워드 프로세서를 사용해야 된다.\n아래한글은 국내에서 널리 사용되는 워드 프로세서 중 하나로, 한국 문화와 업무 환경에 맞춰 특화된 기능을 제공한다. 정부나 공공기관에서 사용하는 특별한 문서 양식을 미리 저장해 두어, 사용자가 양식을 찾는 데 시간을 쓰지 않고 글쓰기에 바로 집중할 수 있도록 큰 도움을 주었다.\n\n\n\n\n\n\n\n국산 워드 프로세서\n해외 워드 프로세서",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>쿼토(Quarto)</span>"
    ]
  },
  {
    "objectID": "setup_quarto.html#latex-editor",
    "href": "setup_quarto.html#latex-editor",
    "title": "1  쿼토(Quarto)",
    "section": "1.7  편집기",
    "text": "1.7  편집기\n 편집기는 운영체제나 사용자의 필요에 따라 다양한 선택옵션이 존재한다. 특히, 클라우드 기반 Overleaf, 설치형 TeXstudio, 데이터 과학에 특화된 RStudio IDE가 대표적이다. 편집기들은 에 특화되었거나, 일부  기능을 분리하여 사용자 요구에 맞춰 활용할 수 있다.\n\n\n\n 편집기 다양성\n\n\nOverleaf는 초기에 ShareLaTeX 서비스로 시작해 현재는 클라우드 기반의  편집 기능을 제공한다. 클라우드 특성을 살려 문서의 공유와 협업이 용이하다는 점이 큰 장점이다.\nTeXstudio는 Texmaker 후속으로 오픈 소스  편집기로 제공된다. 사용자는 TeXstudio 웹사이트에서 다운로드 받아 설치할 수 있으며, GitHub texstudio 저장소를 통해 한국어 현지화 작업에도 참여할 수 있다.\n\n\n\n\n\n\n\n클라우드 편집기\n설치형 편집기\n\n\n\n\n\n\n\n\n\n\n\n\n\nHyde, Adam. 2021. “Single Source Publishing - A investigation of what Single Source Publishing is and how this ‘holy grail’ can be achieved”. https://coko.foundation/articles/single-source-publishing.html.",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>쿼토(Quarto)</span>"
    ]
  },
  {
    "objectID": "setup_quarto.html#footnotes",
    "href": "setup_quarto.html#footnotes",
    "title": "1  쿼토(Quarto)",
    "section": "",
    "text": "“싱글 소싱(Single Sourcing)”은 하나의 원본 콘텐츠를 여러 형식이나 채널에 적용할 수 있도록 하는 문서 작성 및 관리 방법이다. 콘텐츠를 한 번만 작성하고 다양한 출력 형식(예: PDF, 웹 페이지, PPT, 모바일 앱 등)으로 변환하게 되면, 콘텐츠 일관성 유지 및 업데이트와 관리가 훨씬 효율적이다.↩︎\n위키백과, “위지위그”↩︎\n나무위키, “WYSIWYG”↩︎",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>쿼토(Quarto)</span>"
    ]
  }
]