[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "챗GPT 쿼토",
    "section": "",
    "text": "서문\n책 첫장을 펼쳐주신 여러분, 과학기술 문서 작성의 새로운 지평, 쿼토(Quarto)의 세계로 오신 것을 환영합니다. (전동)타자기가 주류를 이루던 세상에서 워드프로세서(아래한글, MS 워드)는 혁신적인 변화를 가져왔다. 정적 문서 저작에 최적화된 아래한글 및 MS 워드를 대신하여 웹출판과 과학기술 저작에 강점이 있는 R마크다운이 등장하면서 과학기술 문서 작성 패러다임을 크게 변화시켰다. 이후 챗GPT 생성형 AI가 등장하면서 생산성이 비약적으로 높아지게 되었으며 차세대 R마크다운 쿼토가 꾸준히 버전을 높이면서 챗GPT와 쿼토의 조합은 과학기술 저작의 새로운 지평을 열고 있다. 이제 한국어도 문제없이 지원하게 되면서 우리곁에 성큼 다가왔다.\n아래한글과 마이크로소프트 워드를 대신한 저작도구로 논문 제작에 탁월한 \\(\\LaTeX\\), R 언어로 다양한 데이터 과학 문서 저작의 신기원을 개척한 R마크다운(RMarkdown)에 대해 들어봤을 것이다. R마크다운이 R언어만 지원했다면, 쿼토는 R 언어에서만 누릴 수 있는 다양한 기능들을 엔진을 통해 파이썬, 줄리아, 자바스크립트(OJS), SQL 등 거의 모든 프로그래밍 언어로 확대했다. 10년이 넘는 기간 동안 R마크다운이 탐색한 과학기술 문서 저작의 경험을 바탕으로 더욱 편리하고 강력한 문서 저작 환경을 제공한다.\n이 책은 과학기술 저작 위기와 디지털 전환시대 글쓰기가 왜 쉽지 않은지에 대한 원인을 살펴보고, 재현가능한 과학기술 저작을 위한 쿼토 환경 설정부터 다루며 시작한다. 문서를 구성하는 다양한 구성요소로 표, 그래프, 수식, 다이어그램 등을 먼저 살펴보고, 서로다른 특징을 갖는 5가지 프로그래밍 언어와 문서언어 마크다운을 별도 장으로 떼서 심도 깊이 살펴본다. 다음으로 마크다운과 프로그래밍 언어, 다양한 문서 구성요소를 통해 콘텐츠가 준비되면 시각적으로 미려하고 전달력을 높일 수 있는 색상과 글꼴 등 외양에 대한 기본 내용을 다룬다. 이어서 가장 제작 난이도가 낮은 블로그/웹사이트, 슬라이드쇼(PPT), 전자책, 대시보드, 변수 설정 문서(Parameterized document) 순으로 제작하는 방법을 다루고, 마지막으로 챗GPT 생성형 AI와 쿼토를 조합하여 간단한 이력서 작성과 복잡한 영화시나리오 작성하는 방법을 소개하며 마무리한다.\n“챗GPT 쿼토”는 단순히 기술적 사용법을 가르치는 것을 넘어, 데이터 과학과 챗GPT AI 융합이 저작과 사고체계에 어떤 영향을 미칠 수 있는지에 대한 깊은 통찰도 함께 제공한다. 여러분이 이 책을 통해 쿼토와 챗GPT 힘을 이해하고, 자신만의 창의적이고 혁신적인 방법으로 활용하는 데 도움이 되기를 기대한다.",
    "crumbs": [
      "서문"
    ]
  },
  {
    "objectID": "index.html#책의-구성",
    "href": "index.html#책의-구성",
    "title": "챗GPT 쿼토",
    "section": "책의 구성",
    "text": "책의 구성\n“챗GPT 쿼토”는 쿼토와 챗GPT를 활용한 문서화 기법과 응용 방법을 단계별로 소개하는 총 5부로 구성된 책이다. 쿼토의 등장 배경부터 환경 설정, 문서의 기본 요소, 템플릿과 테마, 저작물 제작, 챗GPT 활용법까지 다양한 주제를 다룬다.\n1부 ’시작을 위한 준비’에서는 기술적 기초를 다지는 내용으로, 재현 가능한 환경 구축, 심각한 현재 디지털 저작환경, 쿼토 소개, 쿼토 설치방법을 설명한다. 쿼토를 사용해 문서를 작성하고데 필요한 기본 지식을 제공한다.\n2부 ’기본요소’는 문서를 구성하는 주요 구성요소를 다루고 있다. 문서 구성요소에는 서식, 표, 그래프, 그림, 다이어그램, 수식, 프로그래밍 코드 등이 포함된다. 서식으로 마크다운 문법, 프로그래밍 코드로 과학기술에서 활용도가 높은 대표적인 프로그래밍 언어인 R, 파이썬, SQL, 자바스크립트(OJS), 줄리아를 포함했다. 다양한 문서를 작성할 때 필요한 핵심 요소들을 쿼토를 이용해 다양하고 풍성하게 콘텐츠를 제작하게 된다.\n3부 ’템플릿과 테마’는 문서의 시각적 요소에 초점을 두어 콘텐츠를 미려하게 만들고 전달력을 높인다. 문서의 기본이 되는 글꼴과 색상에 대해 자세히 다루고 그래프와 표를 상징하는 그래프 문법과 표 문법을 구현한 ggplot, gt 패키지를 통해 사용자 경험을 향상시키는 방법을 제시하고 있다.\n4부 ’저작물’에서는 앞서 제작한 문서화 구성요소와 템플릿과 테마를 통해 제작된 콘텐츠를 쿼토를 사용해 웹사이트/블로그, 슬라이드쇼(PPT), 대시보드, 책 등 다양한 매체로 제작하는 방법을 다룬다. 또한 변수 설정 문서(Parameterized Document)를 통해 입력값에 따라 달리 출력되는 문서 자동화 방법도 소개한다.\n마지막 5부에서 챗GPT 생성형 AI 기술을 활용한 창의적 글쓰기, 이력서 작성, 영화 시높시스 작성 등 실제 응용 사례를 다룬다. 챗GPT 생성형 AI 기술과 콘텐츠 제작에 강점이 있는 쿼토를 결합하여 다양한 문서 저작물을 효육적으로 제작하는 방법을 제시한다. 구인업체 인사담당자에게 눈길을 끌 수 있는 깔끔하면서 인상적인 이력서지만 이력서 제작자 입장에서 다양한 구인업체에 맞춰 유지보수에 강점이 있는 국영문 이력서 제작방법과 함께 챗GPT 생성형 AI 기술을 적극 활용한 영화 시놉시스 제작부터 최종 산출물에 이르는 과정을 단계별로 설명한다.",
    "crumbs": [
      "서문"
    ]
  },
  {
    "objectID": "index.html#감사의-글",
    "href": "index.html#감사의-글",
    "title": "챗GPT 쿼토",
    "section": "감사의 글",
    "text": "감사의 글\n이 책이 탄생할 수 있도록 도움을 주신 여러분께 깊은 감사의 마음을 표합니다.\n이 책이 출간되는데 있어 이들 모든 분들의 도움 없이는 어려웠을 것입니다. 그동안의 관심과 지원에 깊은 감사를 드리며, 이 책이 데이터 과학의 발전과 독자들에게 도움이 될 수 있기를 바라는 마음으로 마무리하겠습니다.",
    "crumbs": [
      "서문"
    ]
  },
  {
    "objectID": "setup_reproducible.html",
    "href": "setup_reproducible.html",
    "title": "1  과학기술 위기",
    "section": "",
    "text": "1.1 무서운 일화\n과학기술 연구자들이 국가 예산을 받아 밤낮으로 연구하여 훌륭한 결과를 얻게 되어 유명한 저널에 논문을 제출했다. 심사 과정에서 심사자들이 새로운 그래프와 연관된 추가 분석을 요구했다. 연구자들은 심사자들 의견을 반영하여 수정 작업에 들어가 새로운 그래프를 만들었지만, 이전 그래프와 일관성이 없다는 것을 파악하게 되었고, 더 문제가 되는 것은, 원래 결과를 만들 때 사용했던 일부 데이터를 유실했을 뿐만 아니라, 분석에 사용된 핵심 변수도 기억나지 않는다는 것이다. 그렇게 원고는 서랍 속에 방치된 채로 현재까지 남아 있다.\n미국 국립과학재단(NSF) 과학분야 복제 가능성(replicability) 소위(2015)에 따르면, 과학은 출판된 문헌형태로 중요한 역할이 기대되는 발견에 대해 재현가능성을 정기적으로 평가해야 한다. 재현을 가능하고(possible), 효율적(efficient), 유익하게(infromative) 만들기 위해, 연구자들은 데이터 수집, 관찰한 결과를 분석 가능한 데이터로 변환,데이터 분석에 사용된 절차 세부사항을 충분히 문서화해야만 한다.\n재현성은 원래 연구자가 동일한 재료를 사용하여 이전 연구 결과를 복제할 수 있는 능력으로 볼 수 있다. 다시 말해, 다른 연구자가 원본 데이터와 동일한 분석 파일을 사용하고 같은 통계 분석을 수행하여 동일한 결과를 도출할 수 있어야 한다. 재현성은 과학적 발견이 엄격하고 신뢰할 수 있으며 유익한 것으로 간주되기 위한 최소한의 필요 조건이다.",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>과학기술 위기</span>"
    ]
  },
  {
    "objectID": "setup_reproducible.html#무서운-일화",
    "href": "setup_reproducible.html#무서운-일화",
    "title": "1  과학기술 위기",
    "section": "",
    "text": "그림 1.1: Jorge Cham 원작 PhD Comics 1869",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>과학기술 위기</span>"
    ]
  },
  {
    "objectID": "setup_reproducible.html#재현-불가능한-연구-문제",
    "href": "setup_reproducible.html#재현-불가능한-연구-문제",
    "title": "1  과학기술 위기",
    "section": "1.2 재현 불가능한 연구 문제",
    "text": "1.2 재현 불가능한 연구 문제\n최근 몇 년 사이, 많은 과학연구에서 재현이 어렵다는 사실이 밝혀지면서 이 문제가 점점 더 큰 관심을 끌고 있다. 실제로, 2016년 ’네이처’에서 실시한 설문 조사 결과에 따르면, 모든 과학 영역에서 재현 불가능한 실험이 주요한 문제로 지적되고 있다.(Baker 2016) \n\n\n\n\n\n\n그림 1.2: 과학자 1,500명이 재현성 뚜껑을 열었다.\n\n\n\n\n\n\n\n\n\n재현 불가능한 R&D 연구 원인\n\n\n\n\n실험 수행방법과 데이터 생성 과정에 대한 상세한 문서화 부족\n연구에서 원래 결과를 도출하기 위해 사용된 데이터에 접근 불가능.\n결과를 만들어낸 원본 소프트웨어 접근 불가능.\n원본 결과를 생성할 때 사용된 소프트웨어 환경(예: 패키지, 버전) 재현 어려움.",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>과학기술 위기</span>"
    ]
  },
  {
    "objectID": "setup_reproducible.html#재현성-복제성-강건성-일반화",
    "href": "setup_reproducible.html#재현성-복제성-강건성-일반화",
    "title": "1  과학기술 위기",
    "section": "1.3 재현성, 복제성, 강건성, 일반화",
    "text": "1.3 재현성, 복제성, 강건성, 일반화\n재현성(reproducibility)은 최소한의 요구 사항으로, “충분히 좋은” 컴퓨팅 방식으로 해결될 수 있다. 하지만, 과학적 발견에 대한 복제성(replicability)/강건성(robustness)/일반화(generalizability)는 연구 부정 행위, 의심스러운 연구 관행(p-해킹2, HARKing3, 선별 취사4), 부주의한 방법론, 기타 의식적 또는 무의식적 편향을 포함하여 더 큰 우려사항이다. \n\n\n\n\n\n\n그림 1.3: 재현성(reproducibility), 복제성(replicability), 강건성(robustness), 일반화(generalizability)\n\n\n\n\n재현성(reproducibility): 동일한 데이터에 동일한 분석 단계를 수행했을 때 일관되게 같은 답이 나오면 그 결과는 재현 가능한 것으로 간주한다.\n복제성(replicability): 서로 다른 데이터에 동일한 분석을 수행했을 때 유사한 결과을 얻을 수 있다면, 그 결과는 복제성이 있는 것으로 간주한다.\n강건성(robustness): 동일한 데이터을 다른 분석 절차(예를 들어, R 파이프라인과 Python 파이프라인)에 적용하여 같은 연구 질문에 대한 유사하거나 동일한 답을 얻을 수 있다면, 그 결과는 견고한 것으로 간주한다. 견고한 결과는 작업이 특정 프로그래밍 언어의 특수성에 의존하지 않는다는 것을 반증한다.\n일반화(generalizability): 복제성과 강건함 결합함으로써 일반화된 결과를 도출할 수 있다. 다른 소프트웨어 구현과 다른 데이터셋을 사용한 분석이 일반화된 결과를 제공하지 않는다는 점에 유의한다. 연구 질문의 다양한 측면에 대해 작업이 얼마나 잘 적용되는지를 알기 위해서 훨씬 더 많은 단계를 필요로 한다. 일반화는 결과가 특정 데이터나 분석 파이프라인 버전에 의존하지 않는다는 것을 이해하는 데 중요한 단계다.\n\n만약 그동안의 논의가 충분히 설득력이 없다고 느껴진다면, 마코베츠(Markowetz 2015)가 제시한 ‘재현가능한 작업을 해야 하는 이기적인 이유’ 다섯 가지를 참고할 수 있다.\n\n데이터 손실과 재난을 막는데 도움이 된다.\n논문 작성 과정이 훨씬 수월하다.\n심사자들이 연구자의 관점을 이해하도록 도움을 준다.\n연구의 지속성을 높여준다.\n명성을 구축하는 데 도움이 된다.",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>과학기술 위기</span>"
    ]
  },
  {
    "objectID": "setup_reproducible.html#재현성-구현-시점",
    "href": "setup_reproducible.html#재현성-구현-시점",
    "title": "1  과학기술 위기",
    "section": "1.4 재현성 구현 시점",
    "text": "1.4 재현성 구현 시점\n재현성과 투명성이 본인 이익에 부합한다고 가정해 보자. 그렇다면 재현성을 고민해야되는 가장 좋은 시기는 언제일까? \n정답은 연구 생명주기 전체를 통틀어 첫날부터다! 프로젝트를 시작하기 전에 R, 파이썬, Git 같은 도구를 배워야 할 수도 있다. 분석을 하는 동안 너무 오래 방치한다면, 두 달 전에 무엇을 했는지 기억을 되살리는데 시간을 많이 낭비하게 된다. 논문을 작성할 때는 갱신된 숫자, 표, 그림도 필요하다. 논문의 공동 저자로 참여할 때 본인 이름이 들어간 논문에 제시된 분석이 제대로 구현되었는지 확인하고 싶기도 하고, 논문을 심사할 때는 저자들이 결론에 이르는 과정을 모르면 저자들이 제시한 결과에 대해 제대로 된 판단을 내릴 수도 없다.\n알렉산더(Alexander 2023)는 더 나은 재현성을 향한 3단계를 다음 같이 제안하고 있다.\n\n전체 작업흐름이 문서화 되어 있는지 확인한다.\n\n\n원시 데이터는 어떻게 얻었으며, 다른 사람들이 지속적으로 접근할 수 있는가?\n원시 데이터를 분석된 데이터로 변환하기 위해 어떤 구체적인 단계를 밟았으며, 다른 사람들과 공유하는 방법은 있는가?\n어떤 분석이 이루어졌으며, 어떤 코드/스크립트가 사용되었으며, 공유하는 방법은 무엇인가?\n최종 논문이나 보고서는 어떻게 작성되었으며, 제3자가 과정을 어느 정도 따라할 수 있는가?\n\n\n다음 요구 사항을 점진적으로 달성하려고 노력한다.\n\n전체 작업흐름을 다시 실행할 수 있는가?\n제3자가 전체 작업흐름을 다시 실행할 수 있는가?\n“미래의 본인”이 전체 작업흐름을 다시 실행할 수 있는가?\n“미래의 제3자”가 전체 워크플로우를 다시 실행할 수 있는가?\n\n최종 논문이나 보고서에서 데이터, 방법, 작업흐름 한계에 대한 논의를 포함한다.\n\n\n\n\n\n\n\n재현성 피라미드\n\n\n\n디지털로 구현되는 논문은 컴퓨터 환경, 코드, 데이터, 문서화, 논문/보고서로 구성되며, 이들은 재현가능한 연구의 다양한 측면을 나타낸다. 이러한 요소들은 모여 피라미드 구조를 이루며, 게재된 논문은 이 피라미드의 꼭대기에 해당된다. 재현가능한 논문/보고서는 각 단계의 재현성에 기여함으로써 연구의 신뢰성과 투명성을 높이는 데 중요한 역할을 합니다.\n \n\n\n\n\n\n\n그림 1.4: 재현성 피라미드",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>과학기술 위기</span>"
    ]
  },
  {
    "objectID": "setup_reproducible.html#연습문제",
    "href": "setup_reproducible.html#연습문제",
    "title": "1  과학기술 위기",
    "section": "연습문제",
    "text": "연습문제\n\n객관식\n\n재현 가능한 연구의 목표는 무엇인가?\n\n동일한 데이터와 분석으로 결과를 재현\n새로운 데이터로 다른 결과를 얻기\n실험 조건을 변경하여 다른 결과 확인\n데이터 없이 이론만으로 결과 예측\n\n\n\n재현성, 복제성, 견고함, 일반화 중 연구의 최소한의 요구 사항은 무엇인가?\n\n복제성\n견고함\n일반화\n재현성\n\n\n\n재현 불가능한 연구의 주요 원인 중 하나는 무엇인가?\n\n데이터와 실험 방법의 충분한 문서화 부족\n너무 많은 데이터 수집\n실험 도구의 고장\n연구자의 전문성 부족\n\n\n\n\n서술형\n\n연구에서 재현성을 확보하기 위해 연구자들이 취해야 할 조치들에 대해 설명해보세요.\n\n\n과학기술 연구에서 재현성을 높이는 데 중요한 역할을 하는 요소들은 무엇이 있을까요?\n\n\n\n\n\nAlexander, Rohan. 2023. Telling Stories with Data: With Applications in R. CRC Press.\n\n\nBaker, Monya. 2016. “1,500 scientists lift the lid on reproducibility”. Nature 533 (7604): 452–54. https://doi.org/10.1038/533452a.\n\n\nCurty, Renata, Torin White, Ian Lessing, Greg Janee, Julien Brun, 와/과 kristi Liu. 2024. “Introduction to Reproducible Publications with RStudio”. Carpentries. https://github.com/carpentries-incubator/reproducible-publications-quarto.\n\n\nMarkowetz, Florian. 2015. “Five selfish reasons to work reproducibly”. Genome Biology 16 (1): 274. https://doi.org/10.1186/s13059-015-0850-7.",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>과학기술 위기</span>"
    ]
  },
  {
    "objectID": "setup_reproducible.html#footnotes",
    "href": "setup_reproducible.html#footnotes",
    "title": "1  과학기술 위기",
    "section": "",
    "text": "The Carpentries에서 인큐베이션하고 있는 RStudio를 사용한 재현가능한 출판 소개(Introduction to Reproducible Publications with RStudio)를 번역하여 작성되었다.↩︎\np-해킹(p-hacking)은 연구자가 데이터를 여러번 분석하여 우연히 유의미한 결과를 얻는 행위를 의미한다. 예를 들어, 연구자가 많은 다양한 통계적 검증을 시도하고 그 중에서만 유의미한 결과를 보고하는 것이 해당된다.↩︎\nHARKing (Hypothesizing After the Results are Known, 결과를 알고 난 후 가설 설정)은 연구자가 데이터를 분석한 후 결과를 보고 나서야 가설을 세우는 것을 말한다.↩︎\nCherry-picking (체리피킹)은 연구자가 자신의 주장이나 이론을 지지하는 데이터만 선택적으로 사용하고, 반대되는 데이터는 무시하는 행위를 지칭한다.↩︎",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>과학기술 위기</span>"
    ]
  },
  {
    "objectID": "setup_markdown_mess.html",
    "href": "setup_markdown_mess.html",
    "title": "2  심각한 현재 상황",
    "section": "",
    "text": "2.1 세가지 패러다임\n문자전용 도구와 그림을 위한 도구 사이 간격을 보여주는 한가지 흔적이 문자와 그림을 제어하기 위한 별도 언어개발에서 찾아볼 수 있다. 플로터는 일반적으로 제도 언어(drawing language) 로 제어된다. 다음 예를 보면 이해가 쉽다.\n“펜을 위로, (x, y) 위치로 이동, 펜을 아래로, 다시 해당 위치만큼 이동한다”\n반면에, 라인 프린터는 조판 언어(Typesetting language)를 사용하여 제어된다. 이 언어를 통해 저자는 컴퓨터에게 “두 번째 큰 제목을 설정하라”나 “특정 단어를 이탤릭체로 표시하라”와 같은 지시를 할 수 있다. 이러한 지시를 받은 컴퓨터는 단어 위치와 형식을 자동으로 결정한다. 조판 언어를 통해 문자 배치와 스타일을 정교하게 제어할 수 있게 되었다.\n이 기간 동안, 문서 외양이 아닌 콘텐츠(content)에 중점을 둔 세 번째 유형의 언어가 등장했다. 의사나 변호사들은 환자 진료기록이나 판례를 효율적으로 검색하고자 했으나, 1970년 당시 컴퓨터는 자연어 처리 능력이 턱없이 부족했다. 당시 최고의 기술력을 자랑하던 IBM과 같은 컴퓨터 기업들이 마크업 언어를 개발했다. 마크업 언어를 통해 사람들은 문서 의미, 즉 시맨틱(semantic)을 명시적으로 표현할 수 있게 되었다. 마크업 언어는 문서 내용과 구조를 명확하게 기술하게 되면서, 정보 검색과 데이터 관리에 있어 새로운 가능성을 열었다.",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>심각한 현재 상황</span>"
    ]
  },
  {
    "objectID": "setup_markdown_mess.html#세가지-패러다임",
    "href": "setup_markdown_mess.html#세가지-패러다임",
    "title": "2  심각한 현재 상황",
    "section": "",
    "text": "PU;\nPA200,150;\nPD;\nPA250,250;\n\n.t2 Section Heading\n\nEmpty lines separate\n.it paragraphs\nand lines starting with '.' are commands.\n\n&lt;person&gt;Derstmann&lt;/person&gt; still questions the importance of &lt;chemical&gt;methane&lt;/chemical&gt; release\nin &lt;event&gt;the Fukuyama disaster&lt;/event&gt;.",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>심각한 현재 상황</span>"
    ]
  },
  {
    "objectID": "setup_markdown_mess.html#패러다임-충돌",
    "href": "setup_markdown_mess.html#패러다임-충돌",
    "title": "2  심각한 현재 상황",
    "section": "2.2 패러다임 충돌",
    "text": "2.2 패러다임 충돌\n세 가지 패러다임은 1970년대 레이저 프린터 발명 이후에 충돌했고, 그 긴장감은 1980년대 고해상도 컴퓨터 화면과 1990년대 월드 와이드 웹에 의해 더욱 확대되었다. 한편으로 대부분의 사람들은 단순히 글을 저작하는 것이 목표다. 예를 들어, 이 단어는 여기에, 저 단어는 저기에 놓거나, 일부 단어는 녹색으로, 다른 단어는 이탤릭체로 만들고 싶어하는 것이 전부다. 우리나라에서 아래아한글, 전세계적으로 맥사용자는 맥라이트, 윈도우 사용자는 마이크로소프트 워드, 리눅스 사용자는 리브레오피스 라이터(LibreOffice Writer)나 오픈오피스 라이터(OpenOffice Writer)와 같은 위즈윅(WYSIWIG) 편집기가 이러한 저자들의 욕구를 충족시켰지만, 이런 방식으로 만들어진 문서는 두가지 결점을 갖고 있다. \n\n융통성이 없다(rigid). 누군가 수작업으로 배치를 바꾸고 나서, 페이지 크기를 변경하면, 수고로운 작업을 다시 해야 한다.\n불분명하다. 컴퓨터에 무언가 이택릭으로 표현하도록 지시하면, 해당 문구가 책제목인지, 혹은 새로운 용어를 정의하는지 분간할 수 없다.\n\n즉, 아래아한글과 워드 같은 위지윅 편집기로 생성된 문서는 종종 특정 플랫폼이나 소프트웨어에 종속되어 다른 시스템에서 문서를 편집하거나 여는 것조차 불가능하다. 이유는 위지윅 편집기가 주로 시각적인 표현에 중점을 두다보니 아래아한글, 워드 문서파일 자체적으로 복잡한 내부 구조를 가지고 있고 문서 내용과 구조를 명확하게 구분하지 않아서 문서 내용을 다른 형식으로 변환하거나 자동화하는 것이 어렵다.\n조판 언어와 마크업 언어는 앞서 언급한 두 가지 문제를 해법을 제시한다. 저자는 텍스트나 그림 외관과 페이지 내 위치에 대한 직접적인 지시를 내리는 대신, 그것들이 어떤 유형인지—예를 들어 제목이나 새로운 용어인지—컴퓨터에게 알려준다. 컴퓨터는 입력을 받은 후에 그것들의 외관과 위치를 결정하여 표현한다. 이러한 방식으로 의미(시맨틱)와 외관을 분리하면, 저자는 “모든 두 번째 제목을 16포인트 나눔고딕체로 왼쪽 정렬하라”와 같이 지시를 내리면, 스타일도 일관되게 쉽고 빠르게 변경시킬 수 있다.\n하지만, 이런 접근법도 결점은 있다:\n\n컴퓨터는 텍스트를 이해하지 못하기 때문에 항상 인간과 같은 방식으로 텍스트를 배치하지는 않는다. 따라서 사람들은 나중에 문서 유연성이 떨어지더라도 직접 변경하고 싶어 하는 경우가 많다. 예를 들어, 논문을 작성할 때 컴퓨터가 자동으로 생성한 목차나 참고문헌 위치가 저자 의도와 맞지 않을 수 있다. 이런 경우, 저자가 수동으로 목차를 조정하면, 나중에 문서 다른 부분을 수정할 때 목차도 다시 수동으로 조정해야 하는데 이렇게 되면 원래 자동화를 통해 얻을 수 있던 유연성이 사라지게 된다.\n문서의 의미를 지정하는 것은 대부분의 사람들에게 낯선 일이며 제목을 몇 번 확대하는 것보다 훨씬 더 많은 작업이 필요하다. 예를 들어, 연구 논문을 작성하고 제목과 부제목을 강조하고 싶다고 가정해 보자. 아래아한글을 사용한다면 제목 텍스트를 선택하고 “굵게”와 “글자 크기 키우기” 버튼을 클릭하기만 하면 된다. 하지만, \\(\\LaTeX\\)이나 마크다운 같은 마크업 언어를 사용한다면, 제목을 특정 코드로 감싸서 그것이 ’제목’임을 \\(\\LaTeX\\)에서 \\title{나의 연구 논문}과 같이 작성해야 한다. 마크업 언어에 익숙하지 않은 저자는 불필요한 추가 작업처럼 느껴지고 전혀 직관적이지 않다.\n저자가 입력한 내용을 해석하고 표시할 내용을 파악하는 데는 컴퓨터 시간이 오래 걸린다. 왜 문서가 의도한 바를 반영하지 못하는지 알아내는데는 몇배 시간이 든다. 이것이 정확하게 프로그램을 디버깅하는 것과 같은 상황이고 디버깅은 대체로 쉽지 않은 작업이다. 예를 들어, PPT 슬라이드에 제목과 몇 개의 항목을 넣었을 때 컴퓨터가 자동으로 항목 크기를 줄인다. 이에 불만족해 수동으로 크기를 다시 조절하게 되는데, 원인은 컴퓨터가 사용자 의도를 완벽히 이해하지 못하기 때문에 발생된다.\n\n지금까지 그 누구도 상기 문제를 모두 피하는 무언가를 발명하지는 못했다. 기 때문에 저작을 할 때면 오늘날 과학기술 연구자를 비롯한 많은 저자분들이 다양하고 혼동되는 선택지를 강요받게 되었다:\n\n아래아한글, 리브레오피스, 마이크로소프트 워드 같은 데스크톱 위지윅 도구: 편지와 같은 간단한 문서를 만드는 가장 쉬운 방법이지만, 유연성이 떨어지고, 수식이나 버전 관리 시스템과 호환성이 좋지 않다.\n구글 독스 같은 웹기반 위지윅 도구: 워드나 한글, 리브레오피스와 비슷한 신속성을 갖추면서 협업도 수월(왜냐하면 모든이가 문서 사본 하나만 공유하기 때문)하지만, 여전히 유연성이 떨어지고 개인 정보를 민간 기업에 의존하는 것에 대한 불안감이 증가하고 있다.\n데스크톱 라텍(\\(\\LaTeX\\)): 강력한 조판언어로 수식과 참고문헌 관리기능이 뛰어나고, 텍스트 형식으로 문서를 작성하기 때문에 버전 관리와도 잘 호환되지만, 지금까지 학습하기 가장 복잡하고, 텍스트와 그림을 원하는 곳에 배치시키는 작업에 많은 시간이 소요된다. \nAuthorea,Overleaf 같은 웹기반 도구: 위지윅 편집 인터페이스를 저자에게 제공하지만 문서는 \\(\\LaTeX\\)으로 저장되고, 변경사항을 타이핑해서 넣을 때마다 실시간으로 화면에 다시 출력해서 보여준다.\nHTML: 웹의 기본언어로 \\(\\LaTeX\\)보다 훨씬 (훨씬) 더 단순하지만, 훨씬 더 적은 기능을 제공한다: 주석, 참고문헌 관리, 절마다 번호매기기 같은 단순한 기능도 직접적으로 지원되지 않는다. CSS3는 브라우저에 어떻게 표시할지 지시하는 언어로 복잡한 것으로 유명하다.\n\n\n마크다운: 일반-텍스트 전자우편 관례를 사용하여 HTML 간소화 대안으로 개발되었다. 빈줄은 문단을 구분하고, 이탤릭체로 만드는데 *별표*로 감싸는 등등. HTML보다 더 적은 작업을 수행하지만, 타이핑 양은 훨씬 더 적지만, 불행하게도 거의 모든 마크다운 구현결과물이 자체적인 기능이 추가되어서 “마크다운 표준”은 모순어법으로 볼 수 있다. \n\n마크다운은 \\(\\LaTeX\\)과 HTML의 중간 정도의 복잡성을 갖고 있고, \\(\\LaTeX\\)과 마찬가지로 텍스트 파일로 저장되기 때문에 버전 관리 시스템과 잘 호환된다. HTML과 마크다운 모두 직접적으로 수식을 지원하지 않지만, 플러그인 혹은 팩키지가 존재해서 저자가 \\(\\LaTeX\\)-유형 수식을 문서에 삽입할 수 있다.\n저작 도구를 선택할 때 마지막으로 고려할 점은 \\(\\LaTeX\\) 같은 데스크톱 텍스트 기반 시스탑과 재현가능 문서저작을 지원하는 연산기능을 관리하는 다른 도구를 적절히 통합시키는 것이다. 적어도 지금으로는 전형적인 지구물리학 혹은 생물정보학 파이프라인과 구글 독스 혹은 리브레오피스를 통합하는 것이 훨씬 더 복잡하다. 예를 들어, 데이터가 변경될 때 그림이 자동으로 갱신되는 것을 들 수 있다.",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>심각한 현재 상황</span>"
    ]
  },
  {
    "objectID": "setup_markdown_mess.html#엎친-데-덮친-격",
    "href": "setup_markdown_mess.html#엎친-데-덮친-격",
    "title": "2  심각한 현재 상황",
    "section": "2.3 엎친 데 덮친 격",
    "text": "2.3 엎친 데 덮친 격\n위지윅과 조판/마크업 구분은 실제 파일형식보다 도구로 작업하는 것과 더 연관되어 있다. .docx 파일은 실제로 \\(\\LaTeX\\), HTML, 마크다운 파일처림 조판 명령어와 텍스트가 혼재되어 있다. 차이점은 조판/마크업 언어로 작성된 명령어는 사람이 읽을 수 있는 텍스트로 저장된다는 것이다. 이것이 함의하는 바는 유닉스 명령-라인 유틸리티가 처리할 수 있다는 점이다. (스택오버플로우에서 지적한 것처럼, 실제로 얼마나 많은 작업 수행할지에 대해 한계가 존재한다) 이와 비교해서, 아래아한글, 마이크로소프트 워드, 리브레오피스에 내장된 서식 명령어는 특정한 전용 프로그램을 위해, 특정 프로그램에 의해서 제작되었다. 따라서, grep 같은 일반-텍스트 도구로는 처리가 되지 않는다.\n구글 독스도 마찬가지다. 서식 명령어가 문서에 내장되어서 사용자 브라우저 자바스크립트에 의해 실행되어 사용자가 상호 작용하는 렌더링 페이지를 생성한다. 저장형식이 \\(\\LaTeX\\)이라는 점을 제외하면, Authorea와 Overleaf 도 동일하다. \n강성 프로그래머는 위지윅 도구와 텍스트가 아닌 형식을 조롱할 수도 있지만, 그들도 완벽하지 않다. 마이크로소프트 워드와 한글과 컴퓨터 아래아한글은 수십년 동안 존재해왔고, 그 기간 동안 문서 형식이 몇 번이나 바뀌었다. 그럼에도 불구하고, 명령줄을 선호하는 개발자는 이를 대체할 도구를 개발하지 못했다. 결과적으로, 버전제어 시스템 대부분은 세계에서 가장 널리 사용되는 문서 형식을 처리할 수 없다. 예를 들어, Git 같은 시스템은 두개 다른 버전의 마이크로소프트 워드 파일 혹은 아래아한글 파일을 만났을 때 “차이가 있음” 정도만 제시할 수 있을 뿐이다. 이러한 상황은 미래 더 큰 생산성을 희망하며 수년 동안 효율적으로 사용해온 도구를 포기해야 한다는 것을 의미한다. 결국 버전 관리 도입은 미래의 생산성 향상을 위해 자신과 동료들이 수년간 생산적으로 사용해 온 도구를 버려야 하는 결과를 초래한다.\n상기 논의는 저자가 논문과 편지만 작성하다고 가정했지만, 과학연구자는 자주 본인 작업을 시연하는데, 포스터와 슬라이드를 만들어야 하는 경우가 많다. 파워포인트는 말이 필요없는 발표도구의 여왕으로 많은 사람들이 파워포인트 때문에 발표가 엉망이 되어다고 비판하지만, 이것은 마치 시적 표현이 좋지 못한 것을 만연필 핑계를 대는 것에 비견된다. 파워포인트와 파워포인트 유사도구는 컴퓨터 화면을 마치 칠판처럼 사람들이 쉽게 사용할 수 있게 만들었다. 글머리표 목록으로 구성된 너무나도 지루한 슬라이드를 쭉 생성할 수도 있지만, 쉽고 자유롭게 이미지, 도표, 텍스트를 섞어 사용할 수도 있다. \\(\\LaTeX\\)과 HTML로 그런 작업을 수행할 수 있지만, 어느 쪽도 그다지 쉽지는 않다. 사실, \\(\\LaTeX\\)이나 HTML 모두 어려워서 대부분 사람들은 신경도 쓰지 않는다. 설사 그런 작업을 수행하더도, 그래픽적 요소는 문서의 중요부분이라기 보다 외부 삽입에 불과하다.\n논문과 발표자료를 함께 생각하면 다소 불편한 상황에 있음을 인지하게 된다. 다른 한편으로, 논문과 발표자료는 연구 프로젝트에서 핵심적인 부분으로 코드와 데이터처럼 공유되고 추적관리되어야 한다. 다른 한편으로 스테픈 터너(Stephen Turner)는 다음과 같이 언급했다:\n\n공동작업하는 지친 물리연구원에게 문서를 컴파일하는 개념을 설명하려고 한다고 보자. 그전에 일반 텍스트와 워드 프로세싱 사이 차이점을 설명해야 된다. 그리고 텍스트 편집기도 잊으면 안된다. 그리고 나서 마크다운/\\(\\LaTeX\\) 컴파일러. 그리고 BibTEX Git 그리고 GitHub 등등. 그러는 동안에 연구원은 다른 곳에서 호출 연락을 받을 것이다…\n… 달리 설득시킬만큼 노력하지만, 과학컴퓨팅 외부 사람들과 협업할 때, 이러한 얼개를 갖고 논문 협업을 하는 장벽이 너무나도 높아서 단순히 극복이 되지 않는다. 좋은 취지는 제쳐두고, 항상 “검토 메뉴에 변경내용 추적을 갖는 워드 문서만 주세요” 혹은 그와 유사하게 끝나게 된다.\n\n가까운 장래에도 저작자 상당수는 순수 텍스트 조판 도구로 바꾸기 보다는 계속해서 위지윅 편집기를 사용할 것이다. Authorea와 Overleaf 같은 하이브리드 시스템이 절벽을 완만한 경사로로 바꿀 것이고, 프로그래머가 궁극적으로 다른 99% 사용자가 선호하는 문서저작에 관심을 가질 것이지만 수년에 걸친 작업량이 될 것이다. \n저작자 대부분이 이미 아래아한글, 마이크로소프트 워드 같은 데스크톱 위지윅 시스템과 구글 독스같은 클라우드 대체 소프트웨어와 친숙하기 때문에 기존 관행이 바뀌기는 어렵다. 하지만, 웹사이트와 블로그를 위한 마크다운, 논문 원고저작을 위한 \\(\\LaTeX\\)이 여전히 영향력이 강하다. 웹 문서작업에 마크다운으로 HTML 문서를 저작하는데 큰 어려움이 없지만, 논문 원고저작에 마크다운을 사용하면 학술지 대부분은 받아주지 않고, 이미 \\(\\LaTeX\\)을 사용하고 있는 동료 저작자가 \\(\\LaTeX\\)을 버리고 마크다운을 채택할 가능성도 낮고, 저작자들이 문서작업에서 원하는 상당수 기능(예를 들어, 참고문헌 서지관리)을 구현하지 못하고 있다. 반면에 \\(\\LaTeX\\)은 PDF 형식으로 컴파일할 수 있고, 그림과 표 레이아웃을 잘 처리하고 버전 제어 시스템과 호환되며, 다양한 문헌 관리 소프트웨어와도 호환되지만 블로그와 웹사이트로 대표되는 웹 출판에 적합하지 않다.",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>심각한 현재 상황</span>"
    ]
  },
  {
    "objectID": "setup_markdown_mess.html#연습문제",
    "href": "setup_markdown_mess.html#연습문제",
    "title": "2  심각한 현재 상황",
    "section": "연습문제",
    "text": "연습문제\n\n객관식\n\n문제: 타자기가 발명되었을 때의 주요 변화는 무엇이었나요?\n\n문자와 그림의 구분이 명확해졌다.\n중산층에게 ’인쇄’가 가능해졌다.\n마크업 언어가 개발되었다.\n필경사의 중요성이 증가했다.\n\n\n\n문제: 마크업 언어의 주요 기능은 무엇인가요?\n\n문자 배치와 스타일을 정교하게 제어한다.\n문서의 의미와 구조를 명확하게 기술한다.\n그래픽적 요소를 쉽게 삽입할 수 있다.\n위지윅 편집을 가능하게 한다.\n\n\n\n문제: 라텍(\\(\\LaTeX\\))의 주요 장점은 무엇인가요?\n\n사용하기 매우 쉽다.\n수식과 참고문헌 관리 기능이 뛰어나다.\n자동 목차 생성이 용이하다.\n위지윅 편집을 지원한다.\n\n\n\n\n서술형\n\n문제: 현대 문서 작성에서 마주치는 주요 문제점들과 그 원인에 대해 설명해보세요.\n\n\n문제: 1970년대 레이저 프린터 발명 이후 충돌한 세 가지 주요 패러다임과 그 결과로 나타난 문제점들에 대해 설명해보세요.\n\n\n\n\n\nWilson, Greg. 2016. “Modern Scientific Authoring”. Carpentries. https://swcarpentry.github.io/modern-scientific-authoring/.",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>심각한 현재 상황</span>"
    ]
  },
  {
    "objectID": "setup_markdown_mess.html#footnotes",
    "href": "setup_markdown_mess.html#footnotes",
    "title": "2  심각한 현재 상황",
    "section": "",
    "text": "카펜트리 현대 과학기술 저작(Modern Scientific Authoring)을 번역한 것입니다.↩︎\n플로터(plotter): 그래프나 도형, CAD, 도면 등을 출력하기 위한 대형 출력장치다.↩︎\n종속형 시트, 캐스케이딩 스타일 시트(Cascading Style Sheets, CSS) - 종속형 시트 또는 캐스케이딩 스타일 시트(Cascading Style Sheets, CSS)는 마크업 언어가 실제 표시되는 방법을 기술하는 언어로, W3C의 표준이며, 레이아웃과 스타일을 정의할 때의 자유도가 높다.↩︎",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>심각한 현재 상황</span>"
    ]
  },
  {
    "objectID": "setup_quarto.html",
    "href": "setup_quarto.html",
    "title": "\n3  쿼토(Quarto)\n",
    "section": "",
    "text": "3.1 싱글 소싱 출판\n데이터 과학과 과학기술 분야의 출판저작은 다른 분야와 약간 다를 수 있지만, 출판의 기본적인 접근 방식은 대부분 유사하다고 볼 수 있다. 싱글 소싱(Single Sourcing)1 방식은 콘텐츠 저작부터 디자인, 협업, 검수, 최종 출판물 관리까지 일원화하고 자동화하는 방법으로, 중복 작업과 낭비를 줄이고 재현 가능성을 높이는 데 있어 과학기술 출판저작물에 이상적인 방법으로 평가받고 있다.\n싱글 소싱 저작 방식은 데이터, 코드, 수식, 표, 그래프, 다이어그램, 텍스트 등 다양한 저작물 구성 요소를 하나의 소스코드로 관리함으로써, 수정이나 업데이트가 필요할 때 일관성을 유지하면서 효율적으로 출판작업을 수행할 수 있다. 과학기술 분야에서 연구결과의 정확성과 신뢰성을 높이는 재현 가능한 글쓰기에 중점을 두는 경향과도 맞닿아 있다.\n챗GPT와 같은 생성형 AI 저작의 증가로 다양한 형태의 출판저작물을 정확하고 신속하게 제작하는 기능이 점점 더 중요해지고 있다. 특히, 싱글 소싱을 통한 자동화는 비즈니스 글쓰기 분야에서 중요성을 더해가고 있으며, 콘텐츠 일관성과 콘텐츠 제작 효율성 향상에 큰 기여를 하고 있다. 향후, AI 기반 글쓰기와 싱글 소싱 결합은 출판저작 과정을 더욱 빠르고 정확하게 만들어 전 세계적으로 글로벌 표준으로 자리매김할 것으로 예상된다. 그리고 과거 개발자와 비개발자로 나뉘어서 서로 다른 도구를 사용해서 문서 및 산출물을 생산했지만 이러한 구분은 생성형 AI의 보급으로 프로그램을 작성하는 것과 글을 저작하는 것의 차이는 점점 줄어들 것으로 예상된다.\ngraph LR;\n    style A fill:#f9d71c,stroke:#333,stroke-width:2px;\n    style B fill:#f9d71c,stroke:#333,stroke-width:2px;\n    style C fill:#ff6b6b,stroke:#333,stroke-width:2px;\n    style J fill:#c4e17f,stroke:#333,stroke-width:2px;\n    style K fill:#c4e17f,stroke:#333,stroke-width:2px;\n    style L fill:#c4e17f,stroke:#333,stroke-width:2px;\n\n    classDef officeStyle fill:#f9d71c,stroke:#333,stroke-width:2px;\n    class AA,AB officeStyle;\n\n    A[콘텐츠 저작] --&gt; B[디자인]\n    B --&gt; C[출판]\n    \n    C --&gt; J[PDF]\n    C --&gt; K[HTML]\n    C --&gt; L[워드/한글/PPT]\n  \n   \n    J --&gt; W[논문/보고서]\n    J --&gt; X[\"(전자)책\"]\n    \n    K --&gt; Y[웹사이트/블로그]\n    K --&gt; Z[대쉬보드]\n    \n    L --&gt; AA[비즈니스 문서]\n    L --&gt; AB[과학기술 문서]\n\n\n\n\n그림 3.3: 싱글 소싱 저작 방식",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>쿼토(Quarto)</span>"
    ]
  },
  {
    "objectID": "setup_quarto.html#작업흐름",
    "href": "setup_quarto.html#작업흐름",
    "title": "\n3  쿼토(Quarto)\n",
    "section": "\n3.2 작업흐름",
    "text": "3.2 작업흐름\n데이터 과학에서는 다양한 언어가 필요하다. SQL은 자료 추출 과정에, R은 데이터 전처리, 시각화, 통계 및 다변량 분석에, 파이썬은 기계학습과 딥러닝에, 자바스크립트는 인터랙티브 시각화 및 웹 출판에, 그리고 논문 출판에는 \\(\\LaTeX\\)(Knuth 1984)이 필요하다. R마크다운이 RStudio에서 유사한 작업흐름을 제공했지만, 오직 R 언어만 지원하는 한계가 있었다. 쿼토는 R, 파이썬, 자바스크립트, 줄리아 등 기본적으로 4가지 언어를 지원하지만, 대부분의 데이터 과학 문제는 R과 파이썬으로 해결할 수 있다. 쿼토의 주요 특징 중 하나는 기존 R knitr .Rmd 파일과 파이썬 주피터 .ipynb 파일을 .qmd 파일로 통합한 것이다. 저자 입장에서 보면 RStudio, 주피터 노트북, VS코드 등 특정 언어에 친화적인 개발환경에 얽매일 필요가 없게 되어 하나의 저작도구에서 마크다운, R, 파이썬 등 다양한 언어를 사용할 수 있게 되었다.\n이러한 통합은 복잡한 작업 흐름을 단순화하고 서로 다른 언어를 사용하는 개발자와 연구자 간의 협업을 촉진할 수 있다. 사람과의 커뮤니케이션을 위해 제작되는 일반적인 텍스트는 마크다운으로 작성되고, 기계와 커뮤니케이션을 위해 제작되는 프로그래밍 코드는 R, 파이썬, 자바스크립트, 줄리아 등으로 작성된다. 쿼토는 사람과 기계와의 커뮤니케이션을 위해 제작된 콘텐츠를 컴파일하여 팬독 입력값으로 쓰일 수 있는 마크다운으로 변환시킨다. 팬독은 마크다운을 최종 출력물(PDF, HTML, 워드, PPT 등)로 변환하는 역할을 담당한다. 싱글 소싱 개념이 과거 특정 언어(\\(\\LaTeX\\), R 마크다운 등) 중심에서 전개된 것을 쿼토가 마크다운과 팬독을 중심으로 조율하며 다양한 언어를 지원하는 방향으로 확장한 것으로 볼 수 있다.\n\n\n\n\n\ngraph LR\n    qmd --&gt;  주피터\n    주피터 --&gt;  마크다운\n    마크다운 --&gt;  팬독\n    팬독 --&gt;  pdf\n    팬독 --&gt;  html\n    팬독 --&gt;  docx\n    qmd --&gt;  knitr\n    knitr --&gt; 마크다운\n\n\n\n\n그림 3.4: 저작 컴파일 출판 쿼토 작업흐름",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>쿼토(Quarto)</span>"
    ]
  },
  {
    "objectID": "setup_quarto.html#쿼토-해부",
    "href": "setup_quarto.html#쿼토-해부",
    "title": "\n3  쿼토(Quarto)\n",
    "section": "\n3.3 쿼토 해부",
    "text": "3.3 쿼토 해부\n쿼토는 데이터 과학 문서 작성의 새로운 패러다임을 제시하며, R마크다운의 후속임을 자처하고 있다. 10년 이상의 knitr 경험을 바탕으로 개발되었고, 최근에는 RStudio Visual 편집 기능을 통해 위지위그(What You See Is What You Get) 패러다임도 적극 수용함으로써 저작자는 복잡한 코드 작성 없이도 직관적으로 문서를 작성할 수 있게 되었다. \n쿼토 저작은 메타데이터(전문, front matter), 텍스트, 코드라는 세 가지 주요 구성요소로 이뤄진다. 쿼토는 문학적 프로그래밍과 자동화 패러다임을 적극 반영하여 데이터 과학 프로그래밍과 과학기술 문서 작성을 더 효율적이고 일관된 방식으로 저작하고 출판할 수 있도록 지원한다.\n\n\n메타데이터 (YAML): YAML은 “YAML Ain’t Markup Language”의 약자로, 데이터를 구조화하는 언어이다. 쿼토에서 이를 활용하여 문서 전문(Front Matter)을 구성한다. 문서 상단에 위치하며 문서 제목, 작성자, 날짜, 문서 형식 등을 포함하며 문서의 전반적인 설정과 구성을 담당한다.\n\n텍스트 (마크다운): 마크다운은 2004년에 아론 스워츠와 존 그루버에 의해 개발된 언어로, HTML과 같은 복잡한 마크업 언어 대신 사용되는 간단한 형식의 문서 작성 도구다. 복잡한 디자인보다 콘텐츠 구조와 의미에 중점을 두기 때문에, 문서 저작자는 외양보다 내용에 더 집중할 수 있다.\n\n코드 (knitr, jupyter): knitr는 R 코드를 문서에 통합할 수 있는 패키지, jupyter는 파이썬 사용자에게 인기 있는 패키지이다. 쿼토에서는 이 두 패키지를 활용하여 작성된 코드를 문서에 포함시킬 수 있다. 데이터 분석, 통계값, 그래프, 다이어그램, 지도 등 다양한 코딩 결과물을 문서에 반영시킬 수 있다. \n\n\n\n\n\n\n그림 3.5: 쿼토 문서 구성요소\n\n\n\n3.3.1 YAML\nYAML(발음은 야믈)은 R 마크다운과 쿼토에서 주로 사용되는 경량언어다. YAML은 문서 전문(front matter) 부분에 위치해 코드와 텍스트로 구성된 문서 본문보다 먼저 위치하며, 문서 메타데이터를 설정하는 역할을 수행한다. 쿼토에서 YAML을 이용해 문서 제목, 작성자, 날짜, 문서 형식, 레이아웃 등을 정의한다. YAML은 기본적으로 KEY: Value 형태로 구성되어 있지만, 이러한 단순한 구조 덕분에 매우 편리하고 유용하다. YAML은 키와 값이 콜론(:)으로 구분되는 키값(key-value) 쌍을 사용해 각종 문서 설정정보를 표현하여 전반적인 문서 설정과 구성을 쉽게 관리한다. YAML을 통한 문서 저작을 경험하게 되면 YAML의 편리성과 유용함을 더 깊게 이해하게 된다.\n\n\n키값 쌍\n---\nkey: value\n---\n\n\n\n\n문서출력형식 PDF 지정\n---\nformat: pdf\n---\n\n\n\nYAML을 이용한 문서 전문 작성은 가독성이 뛰어나 읽고 이해하기 쉽다는 장점이 있다. 특히 복잡한 문서 구조나 설정을 지정할 때 유용하며, 중첩된 선택옵션 같은 복잡한 구조도 들여쓰기를 통해 명확하게 표현할 수 있다. YAML은 재사용성이 뛰어나서 같은 설정 값을 여러 곳에서 사용해야 할 경우, 하나의 YAML 파일만 수정하면 모든 곳에 적용될 수 있어 시간과 노력을 크게 절약할 수 있다. 텍스트 기반인 만큼 Git과 같은 버전 제어 시스템과도 잘 통합되어, 여러 저자가 공동으로 작업할 때 진가를 발휘하지만, 들여쓰기에 민감하여 실수로 공백을 잘못 넣었을 경우 오류가 발생할 수 있어 주의가 필요하다.\n\n3.3.2 YAML과 팬독\n.qmd 파일에 문서 설정을 직접 정의함으로써, 저자는 문서가 어떻게 출력될지 쉽게 파악할 수 있다. 파일 자체에 출력 형식이 정의되어 있으면, 해당 파일을 다른 환경이나 사용자에게 보낼 때 별도의 설명이나 추가 명령어 없이 어디서나 동일한 방식으로 출력할 수 있다. 이는 YAML을 통한 복잡한 문서 설정 관리와 명령어 사용 시 출력 형식을 매번 지정할 필요가 없어지는 것을 의미한다. 특히, 같은 문서를 반복적으로 출력할 때 작업 효율성을 높이는 것은 물론, 배치 프로세스나 스크립트를 사용해 여러 문서를 처리할 때 각 문서의 YAML 설정에 따라 자동으로 다양한 형식으로 출력할 수 있다는 장점이 있다.\n쿼토를 사용해 문서를 PDF 형식으로 변환할 때, quarto render document.qmd --to pdf 명령어의 --to pdf 옵션과 .qmd 파일 내 YAML 코드 format: pdf는 같은 기능을 수행한다.\n\n\nCLI PDF 지정\n$ quarto render document.qmd --to pdf\n\n\n\n\nYAML 문서형식 PDF\n---\nformat: pdf\n---\n\n\n\nquarto render 명령을 사용하여 document.qmd 파일을 HTML 형식으로 제작하는 예시에서 CLI 옵션 -M code fold:true을 사용하여 코드 섹션을 접을 수 있게 만들었다. 이러한 설정을 YAML로 바꾸면, 설정 파일 내에 format 섹션을 생성하고 그 안에 html을 정의한다. 그 후, html 포맷 설정에 목차 생성(toc: true)과 코드 접기 기능(code-fold: true)을 추가하는 것으로 바뀐다.\nCLI 옵션을 직접 입력하는 것과 비교하여 YAML 파일에 설정을 담는 것이 훨씬 깔끔하고 우아하다. CLI에서 많은 선택옵션을 직접 입력하면 명령어가 길어져 가독성이 떨어지고, 나중에 어떤 옵션을 사용했는지 확인하기 어렵다. 하지만 YAML 파일을 사용하면, 모든 설정을 한 곳에서 명확하게 관리할 수 있어 유지보수가 쉽고, 공동 저작자들과 공유와 협업에도 유리하다. \n\n\nCLI 코드접기\n$ quarto render document.qmd --to html -M code fold:true\n\n\n\n\nYAML 코드접기\n---\nformat: \n  html:\n    toc: true\n    code-fold: true\n---\n\n\n\n\n\n\n\n\n\n위지위그 vs 위지윔\n\n\n\n위지윅(WYSIWYG: What You See Is What You Get)는 “보는 대로 얻는다”는 의미로, 사용자가 문서를 편집할 때 화면에 보이는 형태가 최종 출력물과 동일하게 나오는 편집 방식이다. 대다수 현대 워드 프로세서에서 위지위그 방식을 사용하고 있다. 사용자에게 직관적이고 쉽게 접근할 수 있는 인터페이스를 제공하기 때문이다.\n그러나 위지위그 방식에도 단점은 있다. 마크다운, TeX 같은 텍스트 기반 편집 방식은 문서 호환성과 범용성을 위해 쓰이는 반면, 위지위그 저작방식은 호환성과 범용성을 다소 희생할 수 밖에 없다. 특히 복잡한 문서나 웹 페이지를 작성하는 경우, 코딩방식으로 전환하여 수작업으로 최적화를 시도하더라도 완벽한 해결이 어렵다. 예를 들어, 위지위그 편집기에서 문서를 작성하면 뒷단에 불필요한 코드나 태그가 자동으로 생성되어 문서 최적화를 방해하며, 시간이 지남에 따라 누적되어 호환성과 재현성에 심각한 문제를 야기한다.2 \n위지윔(WYSIWYM: What You See Is What You Mean)은 “당신이 보는 것은 당신이 뜻하는 것이다”라는 의미로, 위지위그(WYSIWYG) 방식의 한계를 극복하기 위해 나온 대안 편집 방식이다. 위지윔 방식에서는 사용자가 무엇을 의미하는지를 중점으로 두어, 본래의 코드 구조를 더 명확하게 알 수 있다. 코드 의미를 직접적으로 반영하여, 불필요한 요소 없이 효율적으로 문서를 작성할 수 있는 장점이 있다. \nRStudio의 Visual 편집 기능은 위지윔 지향점을 잘 반영하고 있다. 사용자는 복잡한 코드나 태그 없이도 의미 있는 문서 구조를 쉽게 생성하고 관리할 수 있어 문서 최적화와 호환성을 높일 수 있으며, 더욱 높은 문서 저작 생산성을 달성할 수 있다.\n오픈 소스 \\(\\LaTeX\\) 편집기인 LyX는 위지윔 방식을 초기부터 채택하여 사용자에게 코드 본래 구조와 의미를 명확하게 파악할 수 있는 인터페이스를 제공했다. 이러한 접근법은 복잡한 수식이나 과학적인 문서를 작성할 때 특히 유용하며, \\(\\LaTeX\\) 복잡성을 낮추면서도 강력한 기능을 최대한 활용할 수 함으로써 위지위그 한계를 극복했다는 평가를 받고 있다. \n\n\n\n\n\n\n문서 컴파일\n위지위그\n\n\n\n\n\n\n\n\n\n3.3.3 코드 덩어리\n쿼토는 다양한 프로그래밍 언어를 지원하여 문서 내에 계산(Computation) 기능을 쉽게 통합할 수 있는 현존하는 얼마 안되는 문학적 프로그래밍 저작도구다. R, 파이썬, SQL, 자바스크립트 등을 활용해 그래프, 표, 다이어그램, 인터랙티브 산출물을 문서에 반영하여 한층 진화된 디지털 문서 저작을 지원한다. \n쿼토에서 프로그래밍 코드를 포함하는 방식은 .qmd 파일에서 RStudio를 사용한다면 코드 블록을 생성하고자 하는 위치에 커서를 두고 키보드 단축키 Ctrl+Alt+I를 누르면 된다. 여는 괄호({)와 닫는 괄호(}) 사이에 r, python, sql, julia, ojs 뿐만 아니라 mermaid, tikz 등 다양한 언어를 명세할 수 있고 쿼토 문서를 컴파일하면 실행결과를 쿼토 문서에 남길 수 있다.\n인라인 코드 덩어리(inline code chunk)를 통해 문장 내에 작은 코드 조각을 포함시킬 수 있다. 예를 들어, 텍스트 중간에 계산 결과나 변수의 값을 직접 표시하고 싶을 때 유용하다. 쿼토에서 백틱(`)과 r 표시를 사용하여 인라인 코드 덩어리를 표현한다. 예를 들어, 다음 코드를 실행시키면 “파이 값은 3.1415927 이다.”와 같이 표시된다.\n\n\n인라인 코드\n\n파이 값은 `r pi` 이다.\n\n\n\n\n\n실행결과\n파이 값은 3.1415927 이다.\n\n\n\n코드 덩어리(code chunk)는 문서에 한줄이 아닌 여러줄로 구성된 보다 큰 코드 블록을 포함시킬 때 사용된다. 인라인 코드 덩어리와 마찬가지로 코드를 실행하고 결과를 문서에 직접 포함시킬 수 있다.\n쿼토에서 세 개의 백틱(```)과 언어 이름(예: r, python)을 사용하여 R 혹은 파이썬 코드를 여러줄에 걸쳐 작성하고 세 개의 백틱(```)을 마지막에 넣어 닫는다. 예를 들면 R 내장 mtcars 데이터셋 1,2 변수에 대한 요약통계량을 다음과 같이 작성하여 실행시킬 수 있다.\n\n\nR 코드 덩어리\n```{r}\nsummary(mtcars[,1:2])\n```\n\n\n\n\n실행결과\n\n#&gt;       mpg             cyl       \n#&gt;  Min.   :10.40   Min.   :4.000  \n#&gt;  1st Qu.:15.43   1st Qu.:4.000  \n#&gt;  Median :19.20   Median :6.000  \n#&gt;  Mean   :20.09   Mean   :6.188  \n#&gt;  3rd Qu.:22.80   3rd Qu.:8.000  \n#&gt;  Max.   :33.90   Max.   :8.000\n\n\n\n\n\n3.3.4 통합개발환경\n쿼토는 다양한 통합개발환경(IDE)과의 호환성을 지원하고 있다. R 사용자는 RStudio IDE를, 파이썬 사용자는 주피터 노트북/파이참을, 범용 소프트웨어 개발 경험이 있는 사용자는 VS코드/이맥스/VIM 등을 사용해 쿼토와 통합할 수 있다. 또한, 쿼토 CLI를 통해 이러한 IDE에서 저작물을 다양한 형태로 쉽게 출판할 수 있다. \n코딩기반 문서저작에 IDE가 필수적인 이유는 다양하다. IDE는 문서 작성 중 발생할 수 있는 오류를 신속하게 발견하고 수정하는 데 도움을 주며, 자동 완성, 구문 강조, 코드 정리와 같은 기능들을 통해 문서 작성의 생산성을 높일 수 있다. 또한, Git과 같은 버전 관리 시스템과의 통합은 문서의 이력을 관리하고 협업을 용이하게 하며, 다양한 프로그래밍 언어와 마크업 언어를 지원함으로써 사용자가 필요에 따라 다양한 언어로 문서를 즉각 작성할 수 있다. 이러한 장점들로 인해, IDE는 코딩기반 문서저작에 있어 필수불가결한 도구로 자리잡고 있다.\n예를 들면, IDE에서 제공하는 탭-자동완성 기능은 YAML 전문 코드를 작성하는 데 매우 유용하다. 이 기능을 사용하면 저작자는 첫 글자나 몇 글자를 타이핑한 후 탭 키를 눌러 가능한 모든 명령어, 변수, 함수 이름 등을 볼 수 있다. 이는 오타의 가능성을 줄이고 문서 저작 속도를 향상시킨다. 특히 RStudio에서는 Ctrl + space 단축키를 사용해 YAML 전문 코드를 작성할 때 가능한 키값을 선택할 수 있는 목록을 제공한다. 이러한 기능들은 문서 저작 과정을 효율적으로 만들어 준다.\n\n\n\n\n\n\nYAML 키 설정\n\n\n\n \n\n\n\n\n탭 자동완성 선택확정\n\n\n\n\n\n그림 3.6: RStudio YAML 자동완성",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>쿼토(Quarto)</span>"
    ]
  },
  {
    "objectID": "setup_quarto.html#r-마크다운과-쿼토",
    "href": "setup_quarto.html#r-마크다운과-쿼토",
    "title": "\n3  쿼토(Quarto)\n",
    "section": "\n3.4 R 마크다운과 쿼토",
    "text": "3.4 R 마크다운과 쿼토\nR마크다운이 파이썬(배쉬, 줄리아, C, SQL)과 호환되지만, R 마크다운은 주로 R 사용자를 위해 설계되었다. 쿼토는 꼭 R을 필요로 하지 않는다. 3 쿼토는 컴퓨팅을 교체 가능한 언어 “엔진(engine)”으로 실행시킴으로써 다양한 언어를 지원하기 위한 별도의 복잡한 설정이나 추가적인 시스템 구성을 최소화함으로써 사용자가 쉽게 여러 언어를 사용할 수 있게 해주는 내장 기능을 제공한다. 또한, 쿼토는 기존 형식과 호환되도록 설계되어 있기 때문에 대부분의 기존 .Rmd 파일과 주피터 노트북 .ipynb 파일을 쿼토에서 수정 없이 바로 사용할 수 있어 쿼토로의 전환을 수월하게 하고 있다. \n쿼토는 “차세대 R 마크다운”이라는 별명에 걸맞게 R 마크다운의 다양한 패키지와 기능을 지원하고 있다. 그러나 쿼토의 개발 기간이 R 마크다운보다 상대적으로 짧기 때문에 아직은 R 마크다운의 모든 기능을 지원하지 않는다. 그럼에도 불구하고, 쿼토는 지속적으로 지원 범위를 확장하고 있으며, 고유한 기능도 추가하고 있다. 이러한 점들은 쿼토가 R 마크다운 생태계에 어떤 새로운 가치를 더하고 있는지를 잘 보여준다. 쿼토 1.4 버전에 대쉬보드(dashboards)가 추가되어 R 마크다운 기능 대부분을 지원하게 되었다. 다음 표 3.2 에 쿼토와 R 마크다운을 다양한 문서 기능별로 비교되어 있다.\n\n\n\n\n기능\nR 마크다운\n쿼토(Quarto)\n\n\n\n파일형식\n\nhtml_document / pdf_document / word_document\n\n\nhtml / pdf / docx\n\n\n\n비머(Beamer)\nbeamer_presentation\nbeamer\n\n\n파워포인트(PPT)\npowerpoint_presentation\npptx\n\n\n웹 슬라이드\n\nxaringan / ioslides / revealjs\n\nrevealjs\n\n\n고급 레이아웃\n\ntufte / distill\n\nQuarto Article Layout\n\n\n상호 참조\n\nhtml_document2 / pdf_document2 / word_document2\n\nQuarto Crossrefs\n\n\n웹사이트/블로그\n\nblogdown / distill\n\n\nQuarto Websites / Quarto Blogs\n\n\n\n책\nbookdown\nQuarto Books\n\n\n인터랙티브 문서\nShiny Documents\nQuarto Interactive Documents\n\n\n페이지 HTML\npagedown\n출시 예정\n\n\n학술 논문\nrticles\nQuarto Journal Articles\n\n\n대쉬보드\nflexdashboard\nQuarto Dashboards\n\n\n인터랙티브 자습서\nlearnr\n계획 없음\n\n\n\n\n\n표 3.2: R 마크다운과 쿼토 비교",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>쿼토(Quarto)</span>"
    ]
  },
  {
    "objectID": "setup_quarto.html#연습문제",
    "href": "setup_quarto.html#연습문제",
    "title": "\n3  쿼토(Quarto)\n",
    "section": "연습문제",
    "text": "연습문제\n객관식\n\n쿼토(Quarto)는 어떤 언어를 지원하나요?\n\nR과 파이썬만\nR, 파이썬, 줄리아, 자바스크립트\nR과 줄리아만\n자바스크립트와 파이썬만\n\n\n\n\n쿼토의 작명에 영감을 준 것은 무엇인가요?\n\n조선 시대의 인쇄술\n셰익스피어의 연극\n중세 유럽의 책 인쇄 방식\n현대 컴퓨터 프로그래밍\n\n\n\n\n쿼토에서 YAML은 무엇을 위해 사용되나요?\n\n코드 작성\n그래픽 디자인\n문서의 메타데이터 설정\n데이터 분석\n\n\n서술형\n\n쿼토에서 싱글 소싱 출판의 장점은 무엇인가요?\n\n\n쿼토를 사용하는 주된 이유와 그것이 문서 저작에 어떤 영향을 미치는지 설명해주세요.\n\n\n\n\n\nHyde, Adam. 2021. “Single Source Publishing - A investigation of what Single Source Publishing is and how this ‘holy grail’ can be achieved”. https://coko.foundation/articles/single-source-publishing.html.\n\n\nKnuth, Donald E. 1984. “Literate Programming”. Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>쿼토(Quarto)</span>"
    ]
  },
  {
    "objectID": "setup_quarto.html#footnotes",
    "href": "setup_quarto.html#footnotes",
    "title": "\n3  쿼토(Quarto)\n",
    "section": "",
    "text": "“싱글 소싱(Single Sourcing)”은 하나의 원본 콘텐츠를 여러 형식이나 채널에 적용할 수 있도록 하는 문서 작성 및 관리 방법이다. 콘텐츠를 한 번만 작성하고 다양한 출력 형식(예: PDF, 웹 페이지, PPT, 모바일 앱 등)으로 변환하게 되면, 콘텐츠 일관성 유지 및 업데이트와 관리가 훨씬 효율적이다.↩︎\n위키백과, “위지위그”↩︎\nFAQ for R Markdown Users↩︎",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>쿼토(Quarto)</span>"
    ]
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "\n4  저작환경 설정\n",
    "section": "",
    "text": "4.1 쿼토 환경설정\n쿼토(Quarto) 웹사이트에서 Quarto CLI 엔진과 통합개발도구(IDE)를 설치한다. 쿼토 CLI를 지원하는 IDE는 VS Code, RStudio, 주피터(Jupyter), VIM/Emacs 와 같은 텍스트 편집기가 포함된다. IDE까지 설치를 했다면 문학적 프로그래밍(literate programming)을 통해 사람이 저작하는 마크다운(Markdown)과 기계가 저작하는 프로그래밍 언어(R/Python/SQL/줄리아/자바스크립트)를 결합한 강력한 문서저작을 시작할 수 있다.",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>저작환경 설정</span>"
    ]
  },
  {
    "objectID": "setup.html#쿼토-환경설정",
    "href": "setup.html#쿼토-환경설정",
    "title": "\n4  저작환경 설정\n",
    "section": "",
    "text": "그림 4.2: 쿼토 도구모음\n\n\n\n4.1.1 윈도우 설치\n쿼토(Quarto)는 윈도우를 비롯하여 맥, 리눅스도 지원한다. 다른 운영체제에 쿼토를 설치하는 방법도 유사하기 때문에 윈도우를 기준으로 설치방법을 살펴보자. 윈도우 운영체제에 설치하기 위해서는 몇 가지 단계를 거쳐야 한다. \n\n4.1.2 쿼토 다운로드\n먼저 쿼토 공식 웹사이트에서 윈도우용 설치 파일을 다운로드한다. 웹사이트 “Download Quarto CLI” 윈도우 버전을 선택하여 다운로드한다.\n\n\n\n\n\n그림 4.3: 쿼토 다운로드 화면\n\n\n\n4.1.3 쿼토 설치\n다운로드한 파일을 더블클릭 실행하여 설치를 진행한다. 설치 마법사가 나타나면 지시에 따라 설치를 완료하면 된다. 설치가 완료되면 환경 변수에 쿼토 설치 경로를 등록해야 한다. ‘제어판’을 열고 ’시스템과 보안’으로 이동한 다음 ’시스템’을 선택한다. ’고급 시스템 설정’을 클릭한 후 ’환경 변수’ 버튼을 누른다. ‘시스템 변수’에서 ’Path’ 변수를 찾아 쿼토 설치 경로를 추가한다. 일반적인 경로는 C:\\Users\\&lt;사용자명&gt;\\AppData\\Local\\Programs\\Quarto\\bin과 같을 수 있다. 사용자명이 한글로 되어 있다면 영문으로 수정할 것을 강력히 추천한다. RStudio 등 다른 IDE에서 한글로된 사용자명으로 인해 컴파일이 되지 않은 오류가 발생될 수 있기 때문이다.\n\n\n\n\n\n그림 4.4: 쿼토 설치완료\n\n\n\n4.1.4 쿼토 CLI\n마지막으로 환경 변수 설정이 올바르게 이루어졌는지 확인하기 위해 터미널을 열어 명령 프롬프트로 quarto --version 혹은 quarto --help 명령을 입력한다. 올바른 버전 번호가 출력되면 설치가 성공적으로 완료된 것이다.\n\n\n\n\n\n그림 4.5: 쿼토 CLI 실행화면\n\n\n\n\n\n\n\n\n윈도우 시스템의 경우 초기 윈도우에서 쿼토 실행명령이 quarto.cmd 이였으나 quarto.exe도 지원되어 확장자 없이 quarto 명령어 실행이 가능하다. 즉, 제어판 → 환경 변수 설정 … 에서 \"C:\\Users\\사용자명\\AppData\\Local\\Programs\\Quarto\\bin 디렉토리를 등록한 후 quarto 명령어를 사용한다.\n\nSys.which(\"quarto\")\n                                                                  quarto \n\"C:\\\\Users\\\\사용자명\\\\AppData\\\\Local\\\\Programs\\\\Quarto\\\\bin\\\\quarto.exe\"",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>저작환경 설정</span>"
    ]
  },
  {
    "objectID": "setup.html#rstudio-ide",
    "href": "setup.html#rstudio-ide",
    "title": "\n4  저작환경 설정\n",
    "section": "\n4.2 RStudio IDE",
    "text": "4.2 RStudio IDE\nRStudio IDE는 데이터 과학 R 프로그래밍 언어를 위한 통합개발환경으로 시작하였으나 이제는 파이썬을 비롯하여 SQL, Observable JS, 줄리아 등 데이터 과학 전분야를 담당하고 있다. 특히, 데이터 분석, 시각화 및 문서 작업을 간편하게 할 수 있도록 다양한 도구와 기능을 제공할 뿐만 아니라, Shiny 웹 애플리케이션 개발, Plumber를 통한 API 개발, 쿼토(Quarto)/R 마크다운을 활용해 다양한 데이터 과학 산출물을 편리하게 제작할 수 있다. 또한, Git 버전 관리 시스템과 통합되어 코드 이력을 쉽게 추적하고 관리할 수 있고 GitHub과 연결하여 글로벌 협업기능도 지원한다. GitHub/Microsoft 부조종사(Copilot) 유료구독을 한 경우, Rstudio와 연결하여 챗GPT로 유명한 생성형 AI를 통해 마크다운 텍스트 및 다양한 프로그래밍 언어로 코드를 생성시킬 수 있다. \n그림 4.6 에 RStudio IDE 설치과정이 나와 있다. 먼저, R 프로그래밍 언어 공식 웹사이트인 CRAN에서 R을 다운로드하여 설치한다. 그 다음, RStudio 공식 웹사이트에서 사용자의 운영 체제에 맞는 RStudio IDE 버전을 다운로드한다. 다운로드한 설치 파일을 실행하여 설치 과정을 진행하며, 일반적으로 기본 설정으로 설치하는 것이 좋다. 설치가 완료되면 RStudio를 실행하여 R과 함께 사용한다. R 설치 버전은 R 4.2버전 이상을 추천하는데 그 이전 버전은 데이터와 코드에 한글 인코딩 문제가 생길 수 있기 때문이다.\n\n\n\n\n\n그림 4.6: RStudio IDE 설치과정\n\n\nRStudio 코드 편집기는 자동 완성, 구문 강조, 맞춤법 검사 등 기능을 제공하여 개발자 편의를 향상시켰고, GUI 데이터 뷰어를 통해 데이터프레임과 데이터 객체를 직접적으로 시각적으로 살펴볼 수 있으며, 내장 패키지 관리 시스템을 통해 R 패키지도 손쉽게 설치하고 관리할 수 있다.\n웹앱 Shiny 애플리케이션 개발과 테스트도 가능하고, 문서화 프로그래밍을 차세대 R 마크다운 쿼토(Quarto)를 이용하여 코드, 데이터, 그래프를 하나의 문서로 통합하여 구현할 수 있을 뿐만 아니라 팬독(Pandoc)을 통해 다양한 형태 문서를 자동으로 생성할 수 있다.\n\n\n\n\n\n그림 4.7: RStudio 문서화 프로그래밍 사례\n\n\n\n4.2.1 비주얼 마크다운 편집기\n비주얼(visual) 마크다운 기능을 사용하게 되면 과학기술 문서 작성이 용이하다. 강력한 인용(Citation)기능과 문학적 프로그래밍(literate programming)을 통해 재현가능한 과학 문서를 수월히 구현할 수 있고, 팬독(Pandoc)을 사용하여 텍스트와 코드로 PDF, HTML, 워드 등 다양한 형식의 문서를 동시에 생성할 수도 있다. \n\n\n\n\n\n그림 4.8: RStudio 비주얼 마크다운 편집기능\n\n\n\n4.2.2 단축키\n데이터 과학에서 통합개발환경(Integrated Development Environment, IDE)은 코드 기반의 제품과 서비스 개발 효율성과 효과성을 극대화에 매우 큰 기여를 한다. IDE는 코딩, 디버깅, 컴파일, 배포 등 프로그램 개발에 필요한 다양한 작업을 한 곳에서 수행할 수 있게 통합함으로써 개발자가 보다 집중하고 효율적으로 작업할 수 있는 환경을 제공한다. 단축키를 통해 개발자는 반복적인 작업을 빠르고 효율적으로 수행함으로써 전체적인 작업 속도와 생산성을 크게 높일 수 있다. \n특히, RStudio는 데이터 과학 분야에서 널리 사용되는 프로그래밍 언어인 R을 위한 특화된 통합개발환경을 제공한다. RStudio는 R 언어 특성에 맞춰진 다양한 기능과 도구를 통합하여, 데이터 과학자와 연구자들이 데이터 분석, 시각화, 모형개발 작업을 보다 효율적으로 수행할 수 있도록 개발되었다. RStudio에서 코드 작성, 편집 및 실행을 보다 빠르고 효율적으로 수행하기 위해 많이 사용되는 단축키는 다음과 같다.\n\n\n\n\n단축키\n윈도우\n맥\n\n\n\n마지막 명령어\n↑\n↑\n\n\n마지막 매칭 명령어\n^ + ↑\n⌘ + ↑\n\n\n자동 탭완성\n↹\n↹\n\n\n\n—- 실행 —-\n\n\n\n선택영역 실행\n^ + ⏎\n⌘ + ⏎\n\n\nSource\n^ + ⇧ + S\n⌘ + ⇧ + S\n\n\nSource + 메아리(Echo)\n^ + ⇧ + ⏎\n⌘ + ⇧ + ⏎\n\n\n\n—- 화면 전환 —-\n\n\n\n코딩 패널창 전환\n^ + 1\n^ + 1\n\n\n콘솔 패널창 전환\n^ + 2\n^ + 2\n\n\n\n—- 코딩 단축키 —-\n\n\n\n&lt;-\n⎇ + -\n⌥ + -\n\n\n%&gt;%\n^ + ⇧ + M\n⌘ + ⌥ + M\n\n\n주석처리\n^ + ⇧ + C\n^ + ⌥ + C\n\n\n주석제거\n^ + ⇧ + /\n^ + ⌥ + /\n\n\n실행취소\n^ + Z\n⌘ + Z\n\n\n다시 실행\n^ + ⇧ + Z\n⌘ + ⇧ + Z\n\n\n단축키 참조\n⎇ + ⇧ + Z\n⌥ + ⇧ + Z\n\n\n다중커서\n^ +⎇ + ↑\n^ + ⌥ + ↑\n\n\n\n^ +⎇ + ↓\n^ + ⌥ + ↓\n\n\n\n^ +⎇ + 클릭\n^ + ⌥ + 클릭\n\n\n\n—- 찾기 및 바꾸기 —-\n\n\n\n줄 찾아가기\n⇧ + ⎇ + G\n⌘ + ⇧ + ⌥ + G\n\n\n찾기 바꾸기\n^ + F\n⌘ + F\n\n\n파일에서 찾기\n^ + ⇧ + F\n⌘ + ⇧ + F\n\n\n모두 접기\n⎇ + O\n⌘ + ⌥ + O\n\n\n모두 펴기\n⎇ + ⇧ + O\n⌘ + ⌥ + ⇧ + O\n\n\n\n\n\n표 4.1: RStudio에서 자주 사용되는 단축키",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>저작환경 설정</span>"
    ]
  },
  {
    "objectID": "setup.html#프로그래밍-언어",
    "href": "setup.html#프로그래밍-언어",
    "title": "\n4  저작환경 설정\n",
    "section": "\n4.3 프로그래밍 언어",
    "text": "4.3 프로그래밍 언어\n\\(\\LaTeX\\), Sweave, R마크다운을 사용한 경험이 있다면 재현가능하고 추적가능한 과학기술 문서 제작의 장점을 경험했을 것이다. 쿼토는 문서 저작으로 마크다운과 \\(\\LaTeX\\), 프로그래밍 언어로 R 언어 뿐만 아니라 파이썬, 자바스크립트(OJS), 줄리아(Julia), SQL, Tikz/mermaid 언어도 지원한다. \n\n4.3.1 R 언어\nR 언어를 공식 웹사이트인 CRAN에서 사용하는 운영 체제에 맞는 R 버전을 선택하여 다운로드 받는다. 그림 4.9 처럼 설치과정은 기본 옵션을 따르며, 필요에 따라 추가 옵션을 조정할 수 있다. 설치가 완료되면 R 언어만 사용할 수 있고, R 언어 전용 편집기 RStudio를 설치하고 엔진으로 방금 설치한 R 언어를 선택하면 수월하게 R 프로그래밍을 시작할 수 있다.\n\n\n\n\n\n그림 4.9: R 설치 과정\n\n\n\n4.3.2 파이썬\n파이썬을 설치하는 과정은 먼저 파이썬 공식 웹사이트에 접속해 운영 체제에 맞는 파이썬 설치 파일을 다운로드한다. 파이썬 버전은 RStudio에서 reticulate를 통해 검증된 파이썬 3.11 버전 사용을 권장한다. 다운로드한 설치 파일을 실행한 후, 설치 과정에서 ‘Add Python to PATH’ 옵션을 선택하는 것이 좋다. 안내에 따라 설치를 진행하면 설치를 완료할 수 있다.\n\n\n\n\n\n그림 4.10: 파이썬 설치 과정\n\n\n파이썬을 설치한 이유는 파이썬 프로그래밍 언어로 작업한 결과물을 문서에 자동으로 넣고 재현가능하고 추적가능한 과학기술 문서를 만들기 위함이다. RStudio에서 파이썬 코드를 사용하려면 코드 덩어리(code chunk)에 파이썬 코드를 작성하다. 작성된 코드를 컴파일 시키기 위해서 다음과 같이 설치한 파이썬을 Python Interpreter에 지정한다. 바닐라 파이썬 뿐만 아니라 가상환경에서 파이썬, 콘다 환경에서 파이썬을 지정할 수도 있다.\n\nTools -&gt; Global Options -&gt; Python -&gt; Python Interpreter\n\n\n\n\n\n\n그림 4.11: 파이썬 RStudio 연결\n\n\n파이썬 프로그램이 제대로 실행되는지 쿼토 문서(.qmd)를 하나 만들어 다음과 같은 파이썬 코드 덩어리를 넣고 실행해본다.\n\n\n파이썬 코드 덩어리\n```{python}\nprint(\"Hello, 파이썬!\")\n```\n\n\n실행 결과\n\n#&gt; Hello, 파이썬!",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>저작환경 설정</span>"
    ]
  },
  {
    "objectID": "setup.html#설치",
    "href": "setup.html#설치",
    "title": "\n4  저작환경 설정\n",
    "section": "\n4.4 \\(\\LaTeX\\) 설치",
    "text": "4.4 \\(\\LaTeX\\) 설치\n라텍(\\(\\LaTeX\\)) 설치와 사용은 처음에는 다소 복잡하게 느껴질 수 있다. 일반적으로 \\(\\LaTeX\\) 배포판(예: TeX Live, MiKTeX)을 설치한 뒤, \\(\\LaTeX\\) 전용 편집기(예: TeXShop, TeXworks)를 선택하여 작업환경을 구성한다. 설치가 완료되면, .tex 파일을 생성하고 \\(\\LaTeX\\) 명령을 통해 PDF 문서를 컴파일한다. \n환경변수 설정, 패키지 관리, 글꼴 설정 등 세부적인 환경설정이 필요하다. 특히 한글 문서를 처리할 경우에는 ko.TeX나 CTeX와 같은 한글을 지원하는 패키지를 별도로 설치하고 한글 글꼴도 설정해야 한다.\nTinyTeX은 TeX Live를 기반으로 한 경량, 이식성 좋고, 사용하기 쉬운 \\(\\LaTeX\\) 배포판으로 \\(\\LaTeX\\) 설치와 관련된 일반적인 불편함을 해결하기 위해 만들어졌고, 특히 “이휘 쉬에(Yihui Xie)”가 개발하여 R과 R 마크다운 통합이 잘 되어 있는 것으로 평가된다.\n다른 \\(\\LaTeX\\) 배포판들이 수 기가바이트(GB)의 크기를 갖지만, TinyTeX은 설치 크기가 작고 간단한 설치 과정을 제공으로 쉽지만 미려한 문서를 원하는 사용자들에게 인기가 많다. 특히, R과의 통합도 잘 이루어져 있어, \\(\\LaTeX\\) 문서를 컴파일할 때 누락된 \\(\\LaTeX\\) 패키지도 자동으로 설치해주는 기능이 많은 사랑을 받고 있다.\n보통 Tex Live에 기반을 둔 tinytex 를 사용하는데 한글을 사용하는 입장에서는 kotex를 설치하는 방법도 모색이 필요하다. 유니코드 문자를 처리하기 위해서 xelatex을 쿼토 \\(\\LaTeX\\) 기본엔진으로 지정하면 xelatex을 통해 CJK 문자가 포함된 PDF 파일 제작이 가능하다.\n쿼토를 설치하면 quarto install tinytex 명령어로 TinyTeX을 쉽게 설치할 수 있고, 설치 정보는 quarto tools info tinytex 명령어로 파악이 가능하다.\n$ quarto install tinytex\nInstalling tinytex\n[✓] Downloading TinyTex v2023.09\n[✓] Unzipping TinyTeX-v2023.09.tar.gz\n[✓] Moving files\n[✓] Verifying tlgpg support\n[✓] Default Repository: https://mirrors.rit.edu/CTAN/systems/texlive/tlnet/\nInstallation successful\n\n$ quarto tools info tinytex\n{\n  \"name\": \"TinyTeX\",\n  \"installed\": true,\n  \"version\": \"v2023.09\",\n  \"directory\": \"/home/statkclee/.TinyTeX\",\n  \"bin-directory\": \"/home/statkclee/.TinyTeX/bin/x86_64-linux\",\n  \"configuration\": {\n    \"status\": \"ok\"\n  }\n}\nkotex 패키지 주요 장점 중 하나는 한글 관련 문제를 해결할 수 있는 다양한 \\(\\LaTeX\\) 패키지와 기본 한글 글꼴을 내장하고 있어 한글 문서 작성이 훨씬 편리하다. 하지만, tinytex를 기본 \\(\\LaTeX\\) 엔진으로 사용할 경우, 누락된 패키지로 인해 추가 작업이 어려울 수 있다. 이러한 문제를 해결하기 위해 tinytex::parse_install() 함수를 사용하면, 오류가 발생한 텍스트를 붙여넣을 때 자동으로 필요한 패키지를 설치해 준다. 설치과정에서 오류 사항이 담긴 .log 파일을 tinytex::parse_install() 함수에 인자로 넣어주면, 자동으로 필요한 패키지를 설치해 준다.\n\n# log 파일이 hello_world.log\ntinytex::parse_install(\"hello_world.log\")\n\ntinytex::parse_install(\n  text = \"! LaTeX Error: File `titlepic.sty' not found.\"\n)\n\n\n\n\n\n\n\ntinytex 설치\n\n\n\n윈도우 환경에서 쿼토로 PDF 파일 생성할 때 다음과 같은 오류가 발생하여 로그에 기록될 경우 tinytex R 패키지를 설치하고 tinytex::install_tinytex() 명령어로 tinytex를 다시 설치한다.\nrunning xelatex - 1\n\nNo TeX installation was detected.\n\nPlease run 'quarto install tinytex' to install TinyTex.\nIf you prefer, you may install TexLive or another TeX distribution.",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>저작환경 설정</span>"
    ]
  },
  {
    "objectID": "setup.html#부조종사",
    "href": "setup.html#부조종사",
    "title": "\n4  저작환경 설정\n",
    "section": "\n4.5 부조종사",
    "text": "4.5 부조종사\nRStudio에서 GitHub 부조종사(Copilot) 기능을 활용할 수 있도록 저자를 포함하여 수많은 개발자들이 요청하여 2021년 11월 28일 최초 등록된 이슈(#10148)가 2023년 7월 18일 베타버전으로 Rstudio 일일 빌드 (Daily Builds)를 통해 첫 공개되었다. GitHub 부조종사(Copilot)를 Rstudio에서 사용하기 위해서는 특별한 버전 Rstudio, 즉 일일 빌드 (Daily Builds)가 필요하였으나 현재는 각자 운영체제에 맞는 RStudio 데스크톱 버전을 다운로드한 후 설치하게 되면 기본적으로 부조종사 기능을 사용할 수 있다. 기본적으로 GitHub 부조종사 기능은 구독서비스로 매월 일정액($10)을 지불해야 사용할 수 있다.\n\nTools -&gt; Global Options -&gt; Copilot -&gt; Enable Github Copilot\n\n최신 RStudio 설치가 완료되면 Rstudio를 실행하고 상단 메뉴에서 ‘Tools’를 선택한 다음 ’Global Options’을 클릭한다. 왼쪽 사이드바에서 ’Copilot’을 선택하고 ’Enable GitHub Copilot’ 체크박스를 선택한 다음 ’Sign In’을 클릭하고 나타나는 링크에서 인증 코드를 입력한다. ’Authorize Github Copilot Plugin’을 클릭하여 인증 과정을 완료하면 설정이 완료된다.\n\n\n\n\n\n그림 4.12: GitHub 부주종사 설치과정\n\n\nGitHub Copilot를 Rstudio에서 사용해보면, 작성하려는 유령 텍스트(Ghost Text)가 회색으로 예측되어 나타난다. 보통, # 주석에 프롬프트를 작성하거나 코드나 텍스트 작성과정에 나타나는 유령 텍스트를 ‘Tab’ 키를 눌러 탭완성(Tab Completion) 기능으로 제시된 코드를 수락하며 개발을 이어 나간다.",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>저작환경 설정</span>"
    ]
  },
  {
    "objectID": "setup.html#출판배포-플랫폼",
    "href": "setup.html#출판배포-플랫폼",
    "title": "\n4  저작환경 설정\n",
    "section": "\n4.6 출판배포 플랫폼",
    "text": "4.6 출판배포 플랫폼\n마지막으로 저작물이 PDF가 아닌 웹사이트/블로그, 대쉬보드, 웹앱, API인 경우 출판배포 플랫폼에 회원가입하고 저작물을 공유하거나 출판한다. 데이터 과학 분야에서 산출물을 공유하고 출판하는 것은 매우 중요한 단계로 효과적인 출판과 비용적인 면을 고려하여 최적 플랫폼과 도구를 선정한다. 데이터 과학 분야를 개척한 RStudio IDE에서 R 마크다운 산출물을 RPubs에 출판한 경험이 있다면, Quarto Pub은 그와 유사한 경험을 제공한다. 다른 대안으로는 netlify, GitHub Pages, RStudio Connect 등이 있다. \n\n\n\n\n\n그림 4.13: 쿼토 출판배포 플랫폼",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>저작환경 설정</span>"
    ]
  },
  {
    "objectID": "setup.html#연습문제",
    "href": "setup.html#연습문제",
    "title": "\n4  저작환경 설정\n",
    "section": "연습문제",
    "text": "연습문제\n객관식\n\n쿼토 환경설정을 위해 필요한 첫번째 단계는 무엇인가요?\n\n텍스트 편집기 설치\n쿼토 CLI 다운로드\n쿼토 설치 경로 설정\nIDE 선택\n\n\n\n\nRStudio IDE의 주요 특징 중 하나는 무엇인가요?\n\n단순한 텍스트 편집 기능만 제공\n데이터 과학을 위한 다양한 기능과 도구 제공\n오직 R 언어만 지원\n복잡한 설치 과정 필요\n\n\n\n\n쿼토 프로젝트를 시작할 때 가장 먼저 수행해야 하는 단계는 무엇인가요?\n\n문서 형식 결정\n필요한 라이브러리 설치\n텍스트 편집기 설정\n쿼토 프로젝트 디렉토리 생성\n\n\n서술형\n\n쿼토 환경 설정에서 중요한 역할을 하는 쿼토 CLI의 기능에 대해 설명해보세요.\n\n\nRStudio IDE가 데이터 과학자들에게 인기 있는 이유는 무엇인가요?",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>저작환경 설정</span>"
    ]
  },
  {
    "objectID": "setup.html#footnotes",
    "href": "setup.html#footnotes",
    "title": "\n4  저작환경 설정\n",
    "section": "",
    "text": "위지임(WYSIWYM,What You See Is What You Mean)은 문서 의미와 구조에 중점을 둔 편집 방식으로, 사용자가 문서의 구조와 의미를 명시적으로 표현하고 최종 문서형식은 별도로 처리하는 방식으로 문서의 논리적 구조와 의미에 집중을 둔 학술논문 저작, 기술문서, 데이터 과학과 같은 분야에서 주로 사용되며 \\(\\LaTeX\\) LyX 를 대표적인 사례로 두고 있다.↩︎",
    "crumbs": [
      "시작을 위한 준비",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>저작환경 설정</span>"
    ]
  },
  {
    "objectID": "part_components.html",
    "href": "part_components.html",
    "title": "\n5  문서 구성요소\n",
    "section": "",
    "text": "5.1 웹 문서\n웹 문서 구성요소는 크게 HTML, CSS, 자바스크립트로 구분된다. HTML(HyperText Markup Language)은 웹 페이지의 기본 구조와 내용을 정의하고, 다양한 태그를 사용하여 텍스트, 이미지, 링크, 리스트, 테이블 등을 웹 페이지에 배치한다. 주요 HTML 태그로 &lt;head&gt;, &lt;body&gt;, &lt;h1&gt;, &lt;p&gt;, &lt;a&gt;, &lt;img&gt; 등을 들 수 있다. CSS(Cascading Style Sheets)는 웹 페이지 레이아웃과 디자인을 담당한다. 색상, 폰트, 여백, 정렬 등을 지정하여 웹 페이지의 외관을 꾸미는 역할을 한다. CSS는 HTML 문서 내에 &lt;style&gt; 태그를 사용하여 삽입할 수 있고, 외부 저장된 CSS 파일을 연결하여 사용할 수도 있다. 자바스크립트는 웹 페이지에 동적인 기능을 부여한다. 사용자와 상호작용, 데이터 처리, 동적인 요소 변경 등을 담당하고, HTML 문서 내에 &lt;script&gt; 태그를 사용하여 삽입할 수 있다.\ngraph TD\n\n    WebDocument[\"웹 문서\"] --&gt; HTML\n    WebDocument --&gt; CSS\n    WebDocument --&gt; JavaScript\n\n    subgraph HTML[\"HTML\"]\n        direction LR\n        Structure[\"구조\"] --&gt; Tags[\"태그\"]\n        Structure --&gt; Text[\"텍스트\"]\n        Structure --&gt; Links[\"링크\"]\n        Structure --&gt; Lists[\"리스트\"]\n        Structure --&gt; Tables[\"테이블\"]\n    end\n\n    subgraph CSS[\"CSS\"]\n        direction LR\n        Styling[\"스타일링\"] --&gt; Colors[\"색상\"]\n        Styling --&gt; Fonts[\"폰트\"]\n        Styling --&gt; Margins[\"여백\"]\n        Styling --&gt; Alignment[\"정렬\"]\n    end\n\n    subgraph JavaScript[\"자바스크립트\"]\n        direction LR\n        Dynamic[\"동적 기능\"] --&gt; UserInteraction[\"사용자 상호작용\"]\n        Dynamic --&gt; DataProcessing[\"데이터 처리\"]\n        Dynamic --&gt; ElementChange[\"요소 변경\"]\n    end\n\n    style WebDocument fill:#f5f5f5,stroke:#333,stroke-width:3px\n    style HTML fill:#d3d3d3,stroke:#333,stroke-width:1px\n    style CSS fill:#d3d3d3,stroke:#333,stroke-width:1px\n    style JavaScript fill:#d3d3d3,stroke:#333,stroke-width:1px\n\n\n\n\n그림 5.2: 웹 문서 구성요소\n웹 문서는 HTML, CSS, 자바스크립트를 사용하여 복잡한 구조와 디자인, 인터랙티브한 요소를 제공하기 위해서 개발이 필요한 반면에 아래한글과 워드 같은 워드 프로세서는 GUI 기반 문서 편집기로 사용자가 메뉴와 버튼을 통해 쉽게 문서를 서식을 지정하여 작성한다. 마크다운은 두가지 문서 저작방식의 장점을 취해 가장 단순한 형태 텍스트 기반 마크업 언어로 특수 문자를 사용하여 서식을 지정한다. 표 5.1 에 웹 문서, 아래아한글/워드, 마크다운을 기능별로 비교했다.",
    "crumbs": [
      "저작 레고 부품",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>문서 구성요소</span>"
    ]
  },
  {
    "objectID": "part_components.html#웹-문서",
    "href": "part_components.html#웹-문서",
    "title": "\n5  문서 구성요소\n",
    "section": "",
    "text": "기능/저작 도구\n웹 문서 (HTML/CSS)\n아래아한글/워드\n마크다운\n\n\n\n텍스트 입력\nHTML 태그를 사용\nGUI를 통해 입력\n일반 텍스트 입력\n\n\n서식 지정\nCSS 사용\n메뉴에서 선택\n특수 문자 사용\n\n\n이미지 삽입\n\n&lt;img&gt; 태그 사용\n드래그 앤 드롭\n\n![alt](url) 형식\n\n\n표 작성\n\n&lt;table&gt; 태그 사용\n표 메뉴 사용\n파이프(|), 하이픈(-) 사용\n\n\n하이퍼링크\n\n&lt;a&gt; 태그 사용\n하이퍼링크 메뉴 사용\n\n[text](url) 형식\n\n\n문서 구조\nHTML 태그 사용\n스타일과 목차 사용\n\n# 사용\n\n\n반응형 디자인\n미디어 쿼리 사용\n없음\n없음\n\n\n인터랙티브 요소\n자바스크립트 사용\n매크로 사용\n없음\n\n\n배포\n웹 서버 사용\n\n.hwpx/.docx 파일 배포\n\n.md 파일 저장\n\n\n접근성\nARIA 사용\n제한적\n없음\n\n\n\n\n\n표 5.1: 웹문서, 워드프로세서, 마크다운 문서 기능별 비교",
    "crumbs": [
      "저작 레고 부품",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>문서 구성요소</span>"
    ]
  },
  {
    "objectID": "part_components.html#그림",
    "href": "part_components.html#그림",
    "title": "\n5  문서 구성요소\n",
    "section": "\n5.2 그림",
    "text": "5.2 그림\n그림은 콘텐츠를 이해하는 데 도움을 주는 중요한 요소이다. 그림은 과거 실제 사물을 촬영한 사진과 사물이나 생각을 그려서 표현한 것이 전부였다면, 이제는 데이터를 기반으로 다양한 그래프도 만들어낼 수 있고 생성형 AI 기술을 사용해서 시각적 표현을 만들어낼 수도 있다. \n그림은 문서에서 텍스트만으로 설명이 어려운 개념이나 데이터를 시각적으로 표현함으로써 이해를 돕고 문서구조를 논리적으로 구성하는 데도 기여한다. 그림 위치는 그림이 설명하려는 내용과 얼마나 밀접하게 연관되어 있는지에 따라 달라지는데 일반적으로 그림은 관련된 텍스트 바로 다음이나 전에 위치하는 것이 일반적이고, 그림에 대한 참조를 본문에서 명확히 하는 것이 권장된다.\n그림과 같은 시각적 객체가 준비되면 문서와 조화를 이룰 수 있도록 그림 크기, 정렬, 레이아웃, 캡션, 상호참조 등을 고려해야 한다. 특히, 문서의 최종 출력 형태를 고려해야 하는데 많이 사용되는 대표적으로 HTML, PDF, 아래아한글에 각각 그림이 문서에 포함되면 다음과 같다. 그림은 동일하지만 출판매체에 따라 달리 표현되는 문제는 난제중의 난제다. 따라서, 최선은 출판매체에 가능하면 유사한 형태로 표현되도록 쿼토에서 제공하는 조건부 콘텐츠(Conditional Content) 기능을 사용하여 .content-visible로 출판매체 별로 달리 적용하는 것도 한가지 해결책이다. 본서를 제작할 때 웹 출판을 우선 목표로 삼아 책을 저작하고 PDF 인쇄출판은 부가적으로 인쇄출판의 문제를 조건부 콘텐츠 기능을 활용하여 해결했다.\n\n\n\n\n\n\n\n\n\n아래한글\nHTML\nPDF\n\n\n\n\n\n\n\n\n\n표 5.2: 출판매체별 그림 표현\n\n\n그림을 문서에 삽입할 때 그림이 문서의 전체 흐름과 내용에 잘 맞춰 물흐르듯 자연스럽게 구성한다. 그림을 단순히 장식적인 목적으로 넣어서는 안 되며, 본문의 내용을 보충하거나 설명하는 데 도움이 되어야 한다. 그림 크기가 너무 크거나 작으면 읽기 어렵고, 해상도가 낮으면 조약해 보여 글의 품격도 떨어뜨린다. 그림 번호(레이블)는 문서 내에서 그림을 참조할 때 사용되고 그림 설명글(캡션)은 그림 내용을 간략하게 설명하는 기능을 한다. 저작권 관련하여 그림 출처나 저작권 정보도 명기해야 하고, 그림 색상과 스타일이 문서 전체 디자인과 잘 어울리게 조화를 이루어야 한다.\n\nlibrary(openai)\n\nSys.setenv(OPENAI_API_KEY = Sys.getenv(\"OPENAI_API_KEY\"))\n\nx &lt;- create_image(\"강원도 설악산 멋진 풍경\")\n\ndownload.file(url = x$data$url, destfile = \"images/dalle_mountain.png\", mode = \"wb\")\n\n생성형 AI 기술의 발전으로 사람이 그린 듯한 정교한 이미지를 문서에 삽입하는 것이 비용부담 없이 간편해졌다. 이제 텍스트 문단 사이에 적절한 ’프롬프트’를 넣어 이미지를 쉽게 추가할 수 있다. 예시로, OpenAI의 달리3(DALL·E 3) 모델을 사용하여 ’강원도 설악산의 멋진 풍경’이라는 프롬프트로 생성한 이미지는 이 기술의 진보를 잘 보여준다. \n\n\n\n\n\n그림 5.3: AI 생성 이미지",
    "crumbs": [
      "저작 레고 부품",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>문서 구성요소</span>"
    ]
  },
  {
    "objectID": "part_components.html#지도",
    "href": "part_components.html#지도",
    "title": "\n5  문서 구성요소\n",
    "section": "\n5.3 지도",
    "text": "5.3 지도\n지리학(Geography)은 가장 오래된 과학 중 하나로 꼽히며, 학생때부터 교실 여기저기에서 볼 수 있는 지도가 아마도 처음 접한 데이터 시각화 산출물일 것이다. 지리학은 지구의 곡률을 정확히 파악하여 지구의 크기와 모양, 중력에 대한 이해를 높이는 데 중요한 역할을 수행했을 뿐만 아니라 대항해 시대 지도가 매우 큰 기여를 했고, 현대에 와서 지리학 데이터 응용 범위는 더욱 확장되어, 민간과 국방 범위를 가리지 않고 상업적으로 입점위치 선정, 우주 탐사, 군사 작전, 인구이동 패턴 분석 등 다방면에서 요긴한 역할을 수행하고 있다. (이광춘 2023) \n지도는 글쓰기에서 중요한 구성요소 중 하나로, 특히 학술 논문, 보고서, 여행기, 지리나 역사 분야에서 지도는 필수적이다. 지도는 텍스트로만 설명하기 어려운 공간적 관계나 지리적 배치를 명확하게 시각화함으로써 저자의 주장이나 설명을 더 쉽고 정확하게 이해시킬 수 있고 문서의 전문성과 신뢰성을 높힘으로서 효과적인 커뮤니케이션을 가능하게 한다.\n한가지 사례를 들어 보자. 2023년 7월 기준 대한민국 시도별 인구수를 문서의 한 구성요로서 글쓰기를 할 때, 텍스트로 설명하거나 표로 정리하는 방법, 막대그래프로 시각화하는 방법이 경우에 따라 유용할 수 있지만, 시도라는 지리적인 정보를 지도에 녹여 표현하는 것이 가장 효과적이다.\n예를 들어, 서울과 부산 인구수가 얼마나 차이가 나는지 텍스트나 표, 그래프로만 보면 그 차이를 알 수는 있지만, 두 도시가 어디에 위치해 있는지, 주변 지역과 어떤 공간적 관계를 가지고 있는지 쉽게 파악하기 어렵다. 반면 지도를 사용하면, 서울과 부산이 어디에 위치해 있는지, 각 지역 인구수가 어떻게 분포되어 있는지를 한눈에 볼 수 있다. 지도를 통해 제공되는 공간적 맥락은 텍스트나 표, 그래프만으로는 얻을 수 없는 근본적인 이해와 통찰력을 제공한다는 점에서 지도를 통한 시각화는 정보 전달과 이해에 있어서 훨씬 더 우위를 차지한다고 할 수 있다.\n\nlibrary(sf); library(tidyverse); sf_use_s2(FALSE)\n\n## 지도\nkorea_map &lt;- read_sf(\"data/HangJeongDong_ver20230401.geojson\")\n\nsido_map &lt;- korea_map |&gt; \n  group_by(sidonm) |&gt; \n  summarise(geometry = sf::st_union(geometry))\n\n## 23년 7월 인구수(KOSIS) 행정구역별, 성별 인구수\npop_tbl &lt;- read_csv(\"data/행정구역_시군구_별__성별_인구수_20230831223248.csv\",\n         locale=locale(encoding=\"euc-kr\"), skip = 1) |&gt; \n  set_names(c(\"sidonm\", \"인구수\")) |&gt; \n  mutate(sidonm = if_else(sidonm == \"강원특별자치도\", \"강원도\", sidonm))\n\nsigo_gg &lt;- sido_map |&gt; \n  left_join(pop_tbl) |&gt; \n  ggplot() +\n    geom_sf(aes(geometry = geometry, fill = cut(인구수, 10)), show.legend = FALSE) +\n    ggrepel::geom_label_repel(aes(label = sidonm, geometry = geometry), \n                              size = 20, stat = \"sf_coordinates\") +\n    theme_void() +\n    scale_fill_brewer(palette = \"OrRd\")\n\n\n\n\n\n\n그림 5.4: 대한민국 시도별 인구수 지도",
    "crumbs": [
      "저작 레고 부품",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>문서 구성요소</span>"
    ]
  },
  {
    "objectID": "part_components.html#그래프",
    "href": "part_components.html#그래프",
    "title": "\n5  문서 구성요소\n",
    "section": "\n5.4 그래프",
    "text": "5.4 그래프\n데이터 시각화는 복잡한 데이터와 패턴을 신속하고 명확하게 전달하는 데 있어 중요한 수단이며, 이는 증거 기반 문서 작성에 있어 핵심적인 역할을 한다. 그래프 생성에 사용되는 프로그래밍 언어와 패키지는 크게 두 가지 접근 방식으로 구분된다. 명령형 접근 방식은 “방법(how)”에 초점을 맞추며, 개발자가 그래프의 각 요소를 어떻게 표현할 것인지를 명시적으로 지시한다. 반면 선언형 접근 방식은 “무엇(what)”을 그릴 것인지에 중점을 두며, 사용자가 원하는 결과에 더 집중할 수 있도록 설계되었다. \nR 언어는 통계 분석뿐만 아니라 데이터 시각화에도 강점이 있고, 크게 3가지 R 언어기반 시각화 시스템이 존재한다. Base 시각화 시스템은 R 기본 패키지에 포함되어 있는 기본적인 그래프 생성 도구다. 래티스(lattice) 시각화 시스템은 클리블랜드(Cleveland)의 격자 그래픽(Trellis Graphics)에서 영감을 받아 개발되어 특히, 다변량 데이터를 효과적으로 시각화할 수 있다. ggplot 시각화 시스템은 SPSS 윌킨스(Wilkinson)의 그래프 문법(Grammar of Graphics)에 기반하여 탄탄한 이론적 토대를 갖고 있으여 파이프 연산자를 +도 ggplot2에 도입되어 의식의 흐름에 맞춰 그래프를 생성할 수 있다는 장점이 있다.\n\n\n\n\n\n\nBase 시스템\n\n\n\n\n\nTrellis 시스템\n\n\n\n\n\nggplot2 시스템\n\n\n\n\n\n그림 5.5: R 그래프 시스템\n\n\n팔머 관측소 펭귄 데이터를 시각화하는 예제를 통해 일반적인 데이터 시각화 구성요소와 작업흐름을 일별해보자. 데이터 시각화에 필요한 패키지(tidyverse, showtext, palmerpenguins)를 불러온다.\n그래프에 필요한 글꼴(“Nanum Pen Script”, “Jua” 글꼴)을 showtext 패키지를 사용하여 구글 폰트 사이트에서 가져와서 설치하고, 그래프 제목과 부제목 글꼴, 크기, 색상 등을 theme_quarto 테마로 설정하여 R에서 사용할 수 있도록 준비한다.\npalmerpenguins 데이터 패키지에서 팔머 관측소 펭귄 데이터프레임을 불러오고, ggplot을 사용하여 펭귄 물갈퀴 길이(flipper_length_mm)와 체질량(body_mass_g)을 x축과 y축에 각각 매핑하고, 펭귄 종(species)에 따라 색상을 다르게 표시하는 산점도를 생성하고, 그래프 제목, 부제목, x축과 y축 제목도 넣고 theme_quarto 테마도 반영하여 시각화 그래프를 완성한다. \n\nlibrary(tidyverse); library(showtext)\nlibrary(palmerpenguins)\n\nfont_add_google(\"Nanum Pen Script\", \"nanum_pen_script\")\nfont_add_google(\"Jua\", \"Jua\")\nshowtext_auto()\n\ntheme_quarto &lt;- theme(\n  text = element_text(family = 'Jua', size = 25),\n  plot.title.position = 'plot',\n  plot.title = element_text(\n    family = 'nanum_pen_script', size = 55,\n    face = 'bold', \n    colour = thematic::okabe_ito(8)[3],\n    margin = margin(t = 2, r = 0, b = 3, l = 0, unit = \"mm\")\n  ),\n  plot.subtitle = element_text(\n    family = 'Jua', size = 25,\n    face = 'bold', \n    colour = thematic::okabe_ito(8)[5],\n    margin = margin(t = 0, r = 0, b = 0, l = 0, unit = \"mm\")\n  )\n)\n\ntheme_set(theme_minimal() + theme_quarto)\n\nmass_flipper &lt;- ggplot(data = penguins,\n                       aes(x = flipper_length_mm,\n                           y = body_mass_g,\n                           color = species)) +\n  geom_point(size = 1.5,\n             alpha = 0.8) +\n  labs(title = \"파머 관측소 LTER 서식 펭귄 크기\",\n       subtitle = \"Adelie, Chinstrap, Gentoo 펭귄에 대한 물갈퀴 길이와 체질량\",\n       x = \"물갈퀴 길이(Flipper length) (mm)\",\n       y = \"체질량(Body mass) (g)\")\n\n\n\n\n\n\n그림 5.6: 그래프 문법으로 구현한 파머 펭귄 데이터 시각화",
    "crumbs": [
      "저작 레고 부품",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>문서 구성요소</span>"
    ]
  },
  {
    "objectID": "part_components.html#표",
    "href": "part_components.html#표",
    "title": "\n5  문서 구성요소\n",
    "section": "\n5.5 표",
    "text": "5.5 표\n문서에서 표를 사용하면 정보를 요약하고 가독성을 향상시키는 데 매우 효과적인 커뮤니케이션 도구가 된다. 마크다운(Markdown), gt 패키지, \\(\\LaTeX\\)은 표 형식으로 자료를 표현할 때 각기 다른 장점을 가진다. 마크다운은 복잡한 설치 과정이나 추가 패키지가 필요 없이 기본적인 표를 빠르게 생성하는 기능을 제공한다. gt 패키지는 그래프 문법에 입각하여 데이터 기반의 표 생성에 필요한 다양한 기능을 포괄적으로 지원한다. \\(\\LaTeX\\)은 전문적이고 고품질의 표를 만들기에 적합하여, 논문이나 학술 자료에 적합한 고품질 표를 제작하는데 유용하다. \n\n\n\n\n\n그림 5.7: 표제작 세가지 방식\n\n\n\n5.5.1 마크다운 표\nmtcars 데이터프레임에서 시연목적으로 관측점 5개와 열 4개를 뽑아내서 kable()함수에 넣고 출력형식을 markdown으로 지정한다. markdown외에도 html, pandoc, latex, rst등으로 출력형식을 지정할 수 있다.\n\n\n\nlibrary(tidyverse); library(knitr)\n\nmtcars %&gt;% \n  sample_n(5) %&gt;% \n  select(mpg, cyl, disp) %&gt;% \n  kable(\"markdown\")\n\n\n\n\n\n\n\n\n\n\n\nmpg\ncyl\ndisp\n\n\n\nMerc 450SL\n17.3\n8\n275.8\n\n\nAMC Javelin\n15.2\n8\n304.0\n\n\nMerc 450SE\n16.4\n8\n275.8\n\n\nHornet Sportabout\n18.7\n8\n360.0\n\n\nValiant\n18.1\n6\n225.0\n\n\n\n\n\n\n표 5.3: mtcars 마크다운 표 사례\n\n\n\n\n\n\n5.5.2 gt\n\n그래프 문법(grammar of graphics)처럼 표 문법(grammar of table) gt 팩키지가 등장했다. 표를 분해하면 그림 5.8 에 기술된 구성요소로 이루어진다. tibble 혹은 데이터프레임을 입력받아 gt 객체로 변환시킨 후에 gt 표를 HTML/PDF/워드/웹앱 으로 출력하는 작업흐름을 갖는다.\n\n\n\n\n\n그림 5.8: 표 해부도\n\n\nR에 내장된 mtcars는 자동차 연비 데이터셋이지만 EDA, 통계모형, 시각화, 표 등 다양한 분석에 활용되는 데이터셋이다. mtcars 데이터셋에서 시연목적으로 관측점 5개와 열 3개를 뽑아내서 gt 패키지로 표를 제작한 코드와 결과표가 다음에 나와 있다.\n\n\n\n\nlibrary(gt)\n\nmtcars %&gt;% \n  sample_n(5) %&gt;% \n  select(mpg, cyl, disp) %&gt;% \n  gt() |&gt; \n  tab_header(\n    title = md(\"**mtcars** 데이터셋 표\"),\n    subtitle = md(\"디지털 글쓰기 `gt` 패키지\")\n  ) %&gt;%\n  tab_source_note(\"표제작: 한국 R 사용자회 오픈소스 소프트웨어 개발자\")\n\n\n표 5.4: gt 패키지 제작 mtcars 표\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmtcars 데이터셋 표\n\n\n디지털 글쓰기 gt 패키지\n\n\nmpg\ncyl\ndisp\n\n\n\n\n10.4\n8\n472.0\n\n\n21.4\n4\n121.0\n\n\n21.4\n6\n258.0\n\n\n18.1\n6\n225.0\n\n\n22.8\n4\n140.8\n\n\n\n\n\n\n\n\n표 5.5: gt 패키지 mtcars 표 사례\n\n\n\n\n\n\n5.5.3 \\(\\LaTeX\\) 표\n\\(\\LaTeX\\)은 수식 뿐만 아니라 복잡하고 미려한 표도 코드를 통해 제작할 수 있다. 쿼토에서 \\(\\LaTeX\\) 표를 제작하기 위해서는 먼저 표제작을 위한 \\(\\LaTeX\\) 표코드를 준비하고, GitHub에서 팬독-필터 tarleb/parse-late x를 다음 명령어로 설치한다.\n$ quarto install extension tarleb/parse-latex\n쿼토 확장팩이 설치되면 YAML에 다음과 같이 parse-latex을 등록하여 사용한다.\n---\nfilters:\n  - parse-latex\n---\n으로 표를 작성했지만 쿼토 문서로 HTML, PDF, 워드 등 다양한 문서에 적용할 수 있다. 즉, 표를 저자가 편한 언어로 작성하고 나머지 부분은 쿼토가 담당하기 때문에 저자는 표를 작성하는데 더 집중할 수 있다.\n\n\n\n\\begin{table}[h]\n\\centering\n\\begin{tabular}{|l|c|c|c|}\n\\hline\n자동차 모델 & mpg & cyl & disp \\\\\n\\hline\nLotus Europa & 30.4 & 4 & 95.1 \\\\\nMerc 230 & 22.8 & 4 & 140.8 \\\\\nFiat 128 & 32.4 & 4 & 78.7 \\\\\nPontiac Firebird & 19.2 & 8 & 400.0 \\\\\nMerc 450SL & 17.3 & 8 & 275.8 \\\\\n\\hline\n\\end{tabular}\n\\caption{mtcars 데이터셋}\n\\end{table}\n\n\n\n\n\nmtcars 데이터셋\n\n자동차 모델\nmpg\ncyl\ndisp\n\n\n\nLotus Europa\n30.4\n4\n95.1\n\n\nMerc 230\n22.8\n4\n140.8\n\n\nFiat 128\n32.4\n4\n78.7\n\n\nPontiac Firebird\n19.2\n8\n400.0\n\n\nMerc 450SL\n17.3\n8\n275.8\n\n\n\n\n\n\n5.5.4 표 제작 사례\n펭귄 데이터를 기반으로 gt 패키지를 사용하여 표 제목, 칼럼명, 셀값에 다양한 글꼴, 크기, 색상, 굵기를 적용한 사례가 표 5.6 에 코드로 나와 있다. 미국 웨스 앤더슨 영화 색상(Darjeeling1)을 표에 적용하고, 글꼴로 웹글꼴 구글 글꼴을 활용하여 gt 패키지로 다양한 글꼴을 적용하고, fmt_integer() 함수를 사용해서 숫자 가독성을 높이기 위해 천단위 구분자를 넣고 부가적인 디자인도 표에 적용한다.\n\nlibrary(gt)\n\nbasic_theme &lt;- function(data, ...){\n  data %&gt;% \n    tab_options(\n      column_labels.background.color = \"#F98400\",\n      table.font.size = px(12),\n      column_labels.font.size = px(20),\n      row.striping.background_color = \"#F2AD00\",\n      heading.align = \"left\",\n      heading.title.font.size = px(30)\n  )\n}\n\npalmerpenguins::penguins %&gt;% \n  select( 펭귄종=species, 섬=island, bill_length_mm, body_mass_g) %&gt;% \n  slice_sample(n = 10) %&gt;% \n  gt() %&gt;% \n    tab_header(title = md(\"팔머 펭귄 표본 **10 마리** 측정 정보\")) %&gt;% \n    tab_source_note(source_note = \"데이터: Kristen Gorman 박사와 남국 팔머 관측소(Palmer Station, Antarctica LTER)에서 수집\") %&gt;% \n    cols_label(bill_length_mm = \"부리 길이 (mm)\",\n               body_mass_g    = \"체질량 (g)\") %&gt;% \n  tab_style(\n    style = cell_text(\n      font = c(\n        google_font(name = \"Nanum Pen Script\"),\n        default_fonts()\n      ),\n      size = \"xx-large\",\n      color = \"gray35\",\n      weight = \"bolder\"\n    ),\n    locations = cells_body(columns = bill_length_mm)\n  ) %&gt;% \n  # 체질량 칼럼  ---------------\n  tab_style(\n    style = cell_text(\n      font = c(\n        google_font(name = \"Black Han Sans\"),\n        default_fonts()\n      ),\n      size = \"large\",\n      color = \"#00A08A\",\n      weight = \"bolder\"\n    ),\n    locations = cells_body(columns = body_mass_g)\n  ) %&gt;% \n  fmt_integer(body_mass_g) |&gt; \n  # 표 Header 와 첫번째 칼럼  ---------------\n  tab_style(\n    style = cell_text(\n      font = google_font(\"Do Hyeon\"), \n      size = \"large\"\n    ),\n    locations = list(\n      cells_column_labels(everything()), \n      cells_body(columns = 1)\n    )\n  ) %&gt;%   \n  # 표 제목 ---------------\n  tab_style(\n    style = cell_text(\n      font = google_font(\"Dokdo\"), \n      align = \"left\", \n      size = \"xx-large\",\n      color = \"#FF0000\"\n    ),\n    locations = cells_title(\"title\")\n  ) %&gt;%   \n  basic_theme() \n\n\n\n\n\n\n\n\n\n팔머 펭귄 표본 10 마리 측정 정보\n\n\n펭귄종\n섬\n부리 길이 (mm)\n체질량 (g)\n\n\n\n\nChinstrap\nDream\n50.6\n3,800\n\n\nAdelie\nDream\n40.9\n3,900\n\n\nAdelie\nTorgersen\n41.8\n4,450\n\n\nGentoo\nBiscoe\n53.4\n5,500\n\n\nGentoo\nBiscoe\n51.3\n5,300\n\n\nGentoo\nBiscoe\n46.8\n5,150\n\n\nGentoo\nBiscoe\n40.9\n4,650\n\n\nGentoo\nBiscoe\n45.8\n4,700\n\n\nGentoo\nBiscoe\n46.2\n5,300\n\n\nAdelie\nDream\n36.0\n3,100\n\n\n\n데이터: Kristen Gorman 박사와 남국 팔머 관측소(Palmer Station, Antarctica LTER)에서 수집\n\n\n\n\n\n\n\n표 5.6: 글꼴, 색상, 서식을 반영한 표 제작 사례",
    "crumbs": [
      "저작 레고 부품",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>문서 구성요소</span>"
    ]
  },
  {
    "objectID": "part_components.html#다이어그램",
    "href": "part_components.html#다이어그램",
    "title": "\n5  문서 구성요소\n",
    "section": "\n5.6 다이어그램",
    "text": "5.6 다이어그램\n다이어그램(diagram, 도표)은 복잡한 정보나 개념을 단순화하고 시각적으로 표현하여 텍스트만으로 설명하기 어려운 복잡한 데이터나 구조, 관계를 명확히 전달할 수 있어 독자가 문서를 빠르고 정확하게 이해하는 데 도움을 준다. 학술 논문, 보고서, 설명서 등에 포함된 다이어그램은 문서 전문성과 신뢰성을 높혀 효과적인 커뮤니케이션을 가능하게 한다. \n다이어그램 저작 방식은 도구를 직접 사용하는 방식과 다이어그램 전용 프로그래밍 언어를 사용하는 방식으로 나뉜다. 잘 알려진 다이어그램 저작 도구로 마이크로소프트 비지오(Microsoft Visio), 루시드차드(Lucidchart), 드로아이오(Draw.io) 등으로 주로 GUI 방식으로 다이어그램을 직관적으로 그릴 수 있고, 다이어그램 전용 언어로 그래프비즈(Graphviz)와 머메이드(Mermaid)가 대표적이다. Graphviz는 DOT 언어를 사용해 다양한 네트워크 다이어그램, 플로우 차트, 조직도, 의존성 그래프를 제작하는 반면, Mermaid는 마크다운과 유사한 문법으로 웹에서 다이어그램과 차트를 생성하는 자바스크립트 라이브러리로 HTML과 자바스크립트를 사용하는 모든 웹 페이지나 앱과 쉽게 통합된다는 장점이 있다.\n챗GPT를 활용한 디지털 글쓰기 과정을 Mermaid 코드를 사용한 다이어그램으로 잘 나타낼 수 있다. 그림 5.9 다이어그램에서 글쓰기, 구조와 외양, 배포와 공유라는 세 가지 주요 영역에서 챗GPT가 부기장(Copilot)으로 역할을 수행하는 것이 명확히 드러난다. 디지털 글쓰기가 글감, 표, 그래프, 코드, 그림, 도형 등 다양한 요소로 구성되며, 구조와 외양에서는 문서의 구조, 서식, 레이아웃, 참조 등이 중요하고, 배포와 공유에서는 다양한 대상, 즉 독자, 저자, 기계에게 문서가 전달되는 과정이 다이어그램을 통해 한눈으로 파악할 수 있다.\n\ngraph LR\n    chatGPT[\"챗GPT\"] --&gt; Contents\n    \n    subgraph Contents[\"디지털 글쓰기\"]\n        direction LR\n        Writing[\"글감\"] --&gt; Table[\"표\"]\n        Writing --&gt; Graph[\"그래프\"]\n        Writing --&gt; Code[\"파이썬/R/SQL&lt;br&gt;코드\"]\n        Writing --&gt; Figure[\"그림\"]\n        Writing --&gt; Diagram[\"도형\"]        \n    end\n\n    chatGPT --&gt; Format\n    Contents --&gt; Format\n\n    subgraph Format[\"구조와 외양\"]\n        direction LR\n        Theme[\"구조와 외양\"] --&gt; Title[\"문서 구조\"]\n        Theme               --&gt; Formatting[\"문서 서식\"]\n        Theme               --&gt; Layout[\"문서 레이아웃\"]\n        Theme               --&gt; reference[\"문서 참조\"]\n    end\n\n    chatGPT --&gt; Deployment\n    Format --&gt; Deployment\n\n    subgraph Deployment[\"배포와 공유\"]\n        direction LR\n        Deploy --&gt; Reader[\"독자(사람)\"]\n        Deploy --&gt; Author[\"독자(저작자)\"]\n        Deploy --&gt; Machine[\"독자(기계)\"]\n    end\n\n\n\n\ngraph LR\n    chatGPT[\"챗GPT\"] --&gt; Contents\n    \n    subgraph Contents[\"디지털 글쓰기\"]\n        direction LR\n        Writing[\"글감\"] --&gt; Table[\"표\"]\n        Writing --&gt; Graph[\"그래프\"]\n        Writing --&gt; Code[\"파이썬/R/SQL&lt;br&gt;코드\"]\n        Writing --&gt; Figure[\"그림\"]\n        Writing --&gt; Diagram[\"도형\"]        \n    end\n\n    chatGPT --&gt; Format\n    Contents --&gt; Format\n\n    subgraph Format[\"구조와 외양\"]\n        direction LR\n        Theme[\"구조와 외양\"] --&gt; Title[\"문서 구조\"]\n        Theme               --&gt; Formatting[\"문서 서식\"]\n        Theme               --&gt; Layout[\"문서 레이아웃\"]\n        Theme               --&gt; reference[\"문서 참조\"]\n    end\n\n    chatGPT --&gt; Deployment\n    Format --&gt; Deployment\n\n    subgraph Deployment[\"배포와 공유\"]\n        direction LR\n        Deploy --&gt; Reader[\"독자(사람)\"]\n        Deploy --&gt; Author[\"독자(저작자)\"]\n        Deploy --&gt; Machine[\"독자(기계)\"]\n    end\n\n\n\n\n그림 5.9: 챗GPT를 활용한 디지털 글쓰기 과정\n\n\n\n\n\n비지오 같은 유명 GUI 도구보다 다이어그램 전용 언어를 사용하게 되면 높은 수준 사용자 정의와 자동화가 가능할 뿐만 아니라 복잡한 다이어그램도 정확하게 그릴 수 있고, 코드를 재사용함으로써 시간과 비용도 절약할 수 있다. 특히, 버전 관리 시스템에 쉽게 통합할 수 있어 팀원들과 공유와 협업이 용이하다.",
    "crumbs": [
      "저작 레고 부품",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>문서 구성요소</span>"
    ]
  },
  {
    "objectID": "part_components.html#수식",
    "href": "part_components.html#수식",
    "title": "\n5  문서 구성요소\n",
    "section": "\n5.7 수식",
    "text": "5.7 수식\n수학은 공학, 물리학, 컴퓨터 과학, 경제학 등 다양한 분야에서 중심 역할을 하는 학문으로 정확하고 명료한 수학적 표기는 매우 중요하다. \\(\\TeX\\)은 수학적 표현을 깔끔하고 정확하게 표현할 수 있는 언어 중 하나로 \\(\\LaTeX\\)를 활용한 다양한 수학적 표현법을 살펴보자. \n\\(\\LaTeX\\)은 기본적인 사칙연산에서부터 지수, 삼각함수, 적분, 행렬, 그리스 문자, 무한대 등 광범위한 수학적 표현이 가능하여 과학기술 전문 문서나 논문, PPT에 즉시 적용할 수 있는 고급스럽고 미련한 수식표현이 가능하다.\n기본적인 덧셈과 뺄셈은 a + b = c처럼 표현할 수 있고, 복잡한 적분도 \\int_{0}^{\\infty} e^{-x^2} dx = \\frac{\\sqrt{\\pi}}{2}와 같이 명료하게 표현할 수 있을 뿐만 아니라, 행렬이나 그리스 문자도 \\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix}와 \\alpha, \\beta, \\gamma, \\Gamma, \\pi, \\Pi, \\phi, \\Phi, \\mu 등의 명령어를 통해 표현할 수 있다.\n기본 연산자와 수\n\n\na^2 + b^2 = c^2\n\n\\[\na^2 + b^2 = c^2\n\\]\n\n\n제곱근과 지수\n\n\n\\sqrt{a^2 + b^2} = c\n\n\\[\n\\sqrt{a^2 + b^2} = c\n\\]\n\n\n삼각함수\n\n\n\\sin^2 \\theta + \\cos^2 \\theta = 1\n\n\\[\n\\sin^2 \\theta + \\cos^2 \\theta = 1\n\\]\n\n\n적분\n\n\n\\int_{0}^{\\infty} e^{-x^2} dx = \\frac{\\sqrt{\\pi}}{2}\n\n\\[\n\\int_{0}^{\\infty} e^{-x^2} dx = \\frac{\\sqrt{\\pi}}{2}\n\\]\n\n\n행렬\n\n\n\\begin{pmatrix}\na & b \\\\\nc & d\n\\end{pmatrix}\n\n\\[\n\\begin{pmatrix}\na & b \\\\\nc & d\n\\end{pmatrix}\n\\]\n\n\n그리스 문자\n\n\n\\alpha, \\beta, \\gamma, \\Gamma, \\pi, \\Pi, \\phi, \\Phi, \\mu\n\n\\[\n\\alpha, \\beta, \\gamma, \\Gamma, \\pi, \\Pi, \\phi, \\Phi, \\mu\n\\]\n\n\n무한대\n\n\n\\lim_{{n \\to \\infty}} \\frac{1}{n} = 0\n\n\\[\n\\lim_{{n \\to \\infty}} \\frac{1}{n} = 0\n\\]\n\n\n합과 곱\nMathJax에서 줄바꿈(\\\\)이 반영되지 않아 aligned를 사용했지만, MathJax v4 에서 기능이 구현되어 구문이 훨씬 간결해질 것으로 보인다.\n\n\n\\begin{aligned}[t]\n\\sum_{n=1}^{\\infty} \\frac{1}{n^2} = \\frac{\\pi^2}{6} \\\\\n\\prod_{i=1}^{n} a_i = a_1 \\times a_2 \\times \\cdots \\times a_n\n\\end{aligned}\n\n\\[\n\\sum_{n=1}^{\\infty} \\frac{1}{n^2} = \\frac{\\pi^2}{6}\n\\]\n\\[\n\\prod_{i=1}^{n} a_i = a_1 \\times a_2 \\times \\cdots \\times a_n\n\\]\n\n\n이 외에도 \\(\\LaTeX\\)으로 더 복잡한 수식표현도 얼마든지 가능하다.",
    "crumbs": [
      "저작 레고 부품",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>문서 구성요소</span>"
    ]
  },
  {
    "objectID": "part_components.html#프로그래밍-코드",
    "href": "part_components.html#프로그래밍-코드",
    "title": "\n5  문서 구성요소\n",
    "section": "\n5.8 프로그래밍 코드",
    "text": "5.8 프로그래밍 코드\n엑셀은 워드, 파워포인트와 함께 마이크로소프트 오피스에서 중요한 역할을 담당한다. 엑셀은 데이터 관리와 분석을 위한 강력한 도구로, 복잡한 수치 데이터를 정리하고 분석하는 데 주로 사용되는데, 워드 문서와 통합되어 엑셀은 표, 차트, 그래프 형태로 데이터를 시각적으로 표현하여 문서 정보 전달력을 높인다. 하지만, 워드 문서에 엑셀에서 나온 산출물을 매번 사람이 직접 복사하여 붙여넣어야 하기 때문에 번거럽고 사람이 개입되기 때문에 오류의 가능성이 상존한다. \n쿼토의 장점은 지난 10년간 R마크다운을 통해 입증되었다. 즉, 쿼토는 차세대 R마크다운이라는 별명이 붙어있는데 쿼토가 R마크다운의 장점을 계승하면서도 더 많은 기능을 추가했을 뿐만 아니라 R마크다운의 경험을 바탕으로 더 나은 사용자 경험을 제공한다. R마크다운이 R언어 지원에 방점을 뒀다면 쿼토는 R언어를 넘어서 파이썬, SQL, 줄리아, 자바스크립트 등 다양한 언어를 지원한다.\n사인 곡선을 그리는 파이썬 코드를 작성해보자. 먼저 그래프 그리는 역할을 담당하는 matplotlib 패키지를 로드하고, 사인 함수를 구현하기 위해 numpy 패키지를 이용하여 x축 데이터, sin 함수를 이용하여 y축 데이터를 생성한다. 마지막으로 plot 함수를 이용하여 그래프를 그린다. 그래프 제목과 축 제목에 한글이 들어가 한글 글꼴 설정을 추가로 해준다.\n\n\n파이썬 코드\n```{python}\n# 패키지\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# 한글 폰트 설정\nplt.rcParams['font.family'] = 'NanumGothic'\nplt.rcParams['axes.unicode_minus'] = False\n\n# 데이터\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# 그래프\nplt.plot(x, y)\nplt.xlabel('x 축')\nplt.ylabel('sin(x)')\nplt.title('사인 그래프')\nplt.show()\n```\n\n\n그래프\n\n\n\n\n\n\n\n\n\n\n\n동일한 기능을 파이썬 대신 R 코드로 작성한다. R 은 데이터 분석과 시각화를 위한 강력한 도구로 R을 설치하면 상당히 많은 기능이 내장함수로 포함되어 있어 별도 패키지 설치는 필요없고 바로 그래프 생성이 가능하다. R 설치할 때 포함된 seq(), sin(), plot() 함수를 이용하여 사인 곡선을 그린다.\n\n\nR 코드\n```{r}\npar(family = \"NanumGothic\")\n\n# 데이터 생성\nx &lt;- seq(0, 10, length.out = 100)\ny &lt;- sin(x)\n\n# 그래프 그리기\nplot(x, y, type = \"l\", xlab = \"x 축\", \n     ylab = \"sin(x)\", main = \"사인 그래프\")\n```\n\n\n그래프\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\(\\LaTeX\\) 으로 PDF 제작과정\n\n\n\n\\(\\LaTeX\\) 문서 컴파일 과정은 몇 단계에 걸쳐 이뤄진다. 먼저 xelatex 명령을 사용하여 원본 \\(\\LaTeX\\) 코드를 컴파일하면 .aux와 .log 파일이 생성되고, biber 또는 bibtex 명령을 실행하여 참고문헌 정보를 처리하면서 .bbl 및 .blg 파일이 생성된다. 그 다음 다시 xelatex을 두 번 실행하여 참고문헌과 인용 정보를 최종적으로 처리하고 완성된 PDF 파일이 생성된다.\n\n\n\n\n\ngraph LR;\n    style A fill:#f9d71c,stroke:#333,stroke-width:2px;\n    style B fill:#42f5e6,stroke:#333,stroke-width:2px;\n    style C fill:#f542e9,stroke:#333,stroke-width:2px;\n    style D fill:#42f54b,stroke:#333,stroke-width:2px;\n    style E fill:#f54242,stroke:#333,stroke-width:2px;\n\n    A[LaTeX&lt;br&gt;소스코드] --&gt;|xelatex| B{.aux,&lt;br&gt; .log}\n    B --&gt;|biber &lt;br&gt; bibtex| C{.bbl,&lt;br&gt; .blg}\n    C --&gt;|xelatex| D{.aux,&lt;br&gt; .log,&lt;br&gt;.pdf}\n    D --&gt;|xelatex| E[PDF]\n\n\n\n\n그림 5.10: \\(\\LaTeX\\) 컴파일 워크플로우",
    "crumbs": [
      "저작 레고 부품",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>문서 구성요소</span>"
    ]
  },
  {
    "objectID": "part_components.html#참고문헌",
    "href": "part_components.html#참고문헌",
    "title": "\n5  문서 구성요소\n",
    "section": "\n5.9 참고문헌",
    "text": "5.9 참고문헌\n.bib 파일은 BibTEX “서지 데이터베이스”로 쿼토, R마크다운, 주피터 노트북, \\(\\LaTeX\\) 문서에서 참고문헌을 관리하는 데 사용된다. .bib 파일은 다양한 참고문헌(예: 논문, 책, 인터넷 자료 등)에 대한 메타데이터를 담고 있는데 제목, 저자, 출판일 등의 정보가 담겨있다. \n\\(\\LaTeX\\)으로 작성한 .tex 소스파일을 references.bib 서지 파일과 연결시켜 컴파일하여 .pdf 파일을 만들어낸다. 한가지 여기서 다루지 않는 사항으로 .csl 파일이 있다. .cls는 인용 스타일 언어(Citation Style Language) 파일로 XML 형식으로 작성되며, 참고문헌 서식규칙을 정의한다. 학술지, 출판사마다 각기 다른 참고문헌 스타일을 요구하기 때문에, .csl 파일에 다양한 스타일을 기술하고 있다. 따라서, 참고문헌 콘텐츠가 담긴 .bib 파일과 참고문헌 스타일이 담긴 .cls 두 파일은 멋진 참고문헌 제작을 위해 짝꿍처럼 함께 다닌다.\n서지 데이터를 다고 있는 references.bib 파일에 Kim2017과 xie2020r 두 개의 참고문헌이 포함되어 있다. \\(\\LaTeX\\) 문서는 biblatex 패키지를 사용하여 이 references.bib 파일을 불러오고, \\cite 명령어로 특정된 참고문헌을 인용한다. 참고문헌 목록은 \\printbibliography[title=참고문헌] 명령어 출력되는데 title 옵션으로 참고문헌목록 제목을 “References”에서 “참고문헌”으로 변경하고 \\(\\LaTeX\\) 문서에서 인용된 참고문헌을 기본설정 .csl에 맞춰 출력한다. 만약, 특정 참고문헌 스타일을 반영하고자 한다면 \\(\\LaTeX\\) 파일에 다른 .csl 파일을 지정하면 된다.\n\n\n\n\n.tex 소스파일\n\\documentclass{oblivoir}\n\n% 한글 글꼴 적용 ---------------------------\n\\usepackage{fontspec}\n\\setmainfont{NanumGothic} % NanumGothic 글꼴이 설치되어야 함\n\n% 참고문헌 설정 ----------------------------\n\\usepackage[backend=biber, style=numeric]{biblatex} % bibtex을 백엔드로 설정\n\\addbibresource{references.bib}\n\n\\begin{document}\n    \n  \\section{서론}\n  텍과 관련된 교육 현장에서의 활용에 대한 연구가 있습니다~\\cite{Kim2017}. \n  또한, R markdown에 대한 다양한 정보와 사용법이 소개된 책도 있습니다~\\cite{xie2020r}.\n    \n  \\printbibliography[title=참고문헌]\n    \n\\end{document}\n\n\n\n\n\n.bib 서지 파일\n@article{Kim2017,  \n  author = {김영록},  \n  title = {교육 현장에서의 텍의 활용},  \n  journal = {TeX: 조판, 그 이상의 가능성},  \n  year = {2017}\n}\n\n@book{xie2020r,  \n  title={R markdown cookbook},  \n  author={Xie, Yihui and Dervieux, Christophe and Riederer, Emily},  \n  year={2020},  \n  publisher={CRC Press}\n}\n\n\n\n\n\n\n\n\n\n그림 5.11: BibTEX 참고문헌\n\n\n\n5.9.1 영문 참고문헌\n한글이 포함된 PDF 문서를 작성할 때 디버깅은 생각보다 복잡할 수 있다. 따라서 대개는 문서 기본 구조를 영어로 먼저 정확히 작동하는지 확인한 후, 한글로 전환하여 개발을 진행한다. 아래 \\(\\LaTeX\\) 문서 예시에서 전체적인 내용을 파악하기 쉽도록 lipsum 패키지로 텍스트를 채웠으며, 2단 편집과 참고문헌 관리 기능을 구현했다. biblatex 패키지와 \\addbibresource{references.bib} 명령어를 사용하여 참고문헌파일을 지정하고, 본문에서 \\cite 명령어를 통해 참고문헌을 인용했다. 마지막으로 \\printbibliography 명령어로 참고문헌 목록을 출력했다.\n\n\n\\documentclass[twocolumn]{article}\n\\usepackage{lipsum} % lipsum 패키지 불러오기\n\n% 참고문헌\n\\usepackage[backend=biber]{biblatex}\n\\addbibresource{references.bib}\n\n% 문서 전문\n\\title{Two-Sided Lipsum Example}\n\\author{John Lee}\n\\date{\\today}\n\n\n\\begin{document}    \n    \n  \\maketitle\n  \n  \\section{Introduction}\n  \n  This is a citation~\\cite{dummy2023}.\n  \\lipsum[11] % 첫 번째 로렘 입숨 문단 생성  \n  \n  \\section{Main Body}\n  \\lipsum[2-3] % 2~3 번째 로렘 입숨 문단 생성\n  \n  \\section{Conclusion}\n  This is a book citation~\\cite{ipsum2021}.\n  \\lipsum[4] % 4번째 로렘 입숨 문단 생성\n\n\\printbibliography\n    \n\\end{document}\n\n\n\n\n\n\n\n\n그림 5.12: 영문 참고문헌 사례\n\n\n\n\n\n5.9.2 국문 참고문헌\n영문으로 작성한 작업 흐름을 그대로 이용할 수 있지만, 몇 가지 수정이 필요하다. 첫째, 영문 채우기 텍스트 패키지 ipsum을 jiwonlipsum으로 변경하여 한글 텍스트로 채우기를 대신한다. 둘째, \\(\\LaTeX\\)에서 한글 글꼴을 적용하지 않으면 한글 표현이 깨지거나 전혀 출력되지 않을 수 있으므로, 한글 글꼴 적용 절차를 포함한다. 참고문헌 부제목이 영문 ’Reference’에서 ’참고문헌’으로 변경하여 기본적인 한글문서 외양을 구현한다.\n\n\n\\documentclass[twocolumn]{oblivoir}\n\n% 한글 글꼴 적용 ---------------------------\n\\usepackage{fontspec}\n\\setmainfont{NanumGothic} % NanumGothic 글꼴이 설치되어야 함\n\n% 채우기 텍스트 입숨 적용 ------------------\n\\usepackage{jiwonlipsum}\n\n% 참고문헌 설정 ----------------------------\n\\usepackage[backend=biber, style=numeric]{biblatex} % biber 백엔드로 설정\n\\addbibresource{references.bib}\n\n\n% 문서의 제목, 저자, 날짜 설정\n\\title{한글 입숨 예제}\n\\author{홍길동}\n\\date{\\today}\n\n\\begin{document}    \n    \n  \\maketitle\n  \n  \\section{서론}\n  \n  참고문헌을 연구를 했습니다.~\\cite{kim2023}\n  \\jiwon[11] % 첫 번째 로렘 입숨 문단을 생성한다.\n  \n  \\section{본문}\n  또 영문 참고문헌 보고서를 연구했습니다.~\\cite{ipsum2021}\n  \\jiwon[1] % 두 번째와 세 번째 로렘 입숨 문단을 생성한다.\n  \n  \\section{결론}\n  마지막 연구했습니다.~\\cite{lee2021}\n  \\jiwon[25] % 네 번째 로렘 입숨 문단을 생성한다.\n  \n  \\printbibliography[title=참고문헌]\n    \n\\end{document}\n\n\n\n\n\n\n\n\n그림 5.13: 한글 참고문헌 사례",
    "crumbs": [
      "저작 레고 부품",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>문서 구성요소</span>"
    ]
  },
  {
    "objectID": "part_components.html#연습문제",
    "href": "part_components.html#연습문제",
    "title": "\n5  문서 구성요소\n",
    "section": "연습문제",
    "text": "연습문제\n객관식\n\n웹 문서 구성 요소에는 어떤 것들이 포함되나요?\n\nHTML, CSS, 자바스크립트\nR, 파이썬, 자바\n마크다운, 라텍, 쿼토\nPDF, 아래아한글, 워드\n\n\n\n\n그림을 문서에 삽입할 때 고려해야 할 사항은 무엇인가요?\n\n그림의 색상과 스타일만\n그림의 크기와 정렬, 레이아웃, 캡션\n그림의 파일 형식만\n그림의 출처만\n\n\n\n\n지도가 글쓰기에서 중요한 구성요소로 활용되는 이유는 무엇인가요?\n\n지리적 위치만 표시하기 때문\n공간적 관계와 지리적 배치를 명확하게 시각화하기 때문\n색상을 사용할 수 있기 때문\n텍스트를 대체하기 때문\n\n\n서술형\n\n웹 문서를 구성하는 HTML, CSS, 자바스크립트의 각각의 역할에 대해 설명해 보세요.\n\n\n디지털 글쓰기에서 그림의 활용이 중요한 이유는 무엇인가요?\n\n\n\n\n\n이광춘. 2023. “공간정보의 역사 및 공간정보 처리기법”. PROPBIX, 호 13 (9월).",
    "crumbs": [
      "저작 레고 부품",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>문서 구성요소</span>"
    ]
  },
  {
    "objectID": "part_markdown.html",
    "href": "part_markdown.html",
    "title": "\n6  마크다운\n",
    "section": "",
    "text": "6.1 메타데이터(Metadata)\n마크다운 문서에서 ‘저자’, ‘문서제목’ 등은 야믈(YAML) 헤더를 사용하여 메타데이터를 표현할 수 있다. YAML 은 “Yet Another Markup Language”를 축약한 두문어지만 중요하지는 않다. YAML 헤더는 다음과 같다.\n상기 야믈(YAML) 헤더 요소는 견본(템플릿) 으로 사용되고 해당 문서에 대한 저자명, 저작일자, 형식 등 메타데이터가 정의된다.",
    "crumbs": [
      "저작 레고 부품",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>마크다운</span>"
    ]
  },
  {
    "objectID": "part_markdown.html#메타데이터metadata",
    "href": "part_markdown.html#메타데이터metadata",
    "title": "\n6  마크다운\n",
    "section": "",
    "text": "---\ntitle: \"마크다운과 팬독(`pandoc`)을 활용한 과학기술문서 저작\"\nshorttitle: \"현대적인 과학기술 문서 저작\"\nauthor: 이광춘\ndate: \"2015년 7월 7일\"\n---",
    "crumbs": [
      "저작 레고 부품",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>마크다운</span>"
    ]
  },
  {
    "objectID": "part_markdown.html#기본-구문",
    "href": "part_markdown.html#기본-구문",
    "title": "\n6  마크다운\n",
    "section": "\n6.2 기본 구문",
    "text": "6.2 기본 구문\n\n6.2.1 제목\n마크다운에서는 # 기호를 사용하여 문서 제목 수준을 결정한다. # 기호를 한 개부터 여섯 개까지 사용하며, # 기호 개수가 많아질수록 제목 수준은 낮아지고, 텍스트 크기도 작아진다. 예를 들어, 어떤 문서가 첫 번째 큰 제목으로 들어가며와 방법론을 갖고 있고, 방법론 아래에는 두 번째 수준 제목인 동적 인구 모형이 있다면, 다음과 같이 작성한다. \n\n\n# 들어가며\n# 방법론\n## 동적 인구 모형\n\n\n\n\n\n\n\n\n\n\n6.2.2 텍스트 서식\n마크다운으로 쉽게 이탤릭, 굵게, 이탤릭 굵게 글씨체를 지정할 수 있다. (하지만, 모든 마크다운표준이 이러한 서식구문에 동의하지는 않는다). 글꼴에 서식 적용은 * 혹은 _을 사용해서 적용한다. 따라서 다음 명령어는 모두 동등하다. \n\n\n*이탤릭* 그리고 _이탤릭_\n**굵게** 그리고 __굵게__\n***이탤릭 굵게.*** 그리고 ___이탤릭 굵게.___\n\n\n\n이탤릭 그리고 이탤릭 굵게 그리고 굵게 이탤릭 굵게. 그리고 이탤릭 굵게.\n\n\n\n6.2.3 코드\n코드는 백틱으로 텍스트를 감싸 인라인(inline) 으로 작성하거나, \n\n\n프로그램 실행은 `python helloworld.py`으로 프롬프트를 작성한다.\n\n\n\n프로그램 실행은 python helloworld.py으로 프롬프트를 작성한다.\n\n\n혹은 백틱(`) 3개나 틸드(~) 3개를 한줄씩 코드 아래위에 넣어 코드블록을 구분한다.\n\n\n```\n이것이\nR, 파이썬\n코드블록 입니다.\n```\n\n\n\n이것이\nR, 파이썬\n코드블록 입니다.\n\n\n코드블록 첫번째 행에, 프로그래밍 언어 를 명세하는 것도 가능하다. 프로그래밍 언어를 특정하면 해당 언어 키워드를 강조하는 색상으로 표시되어 가독성이 높아진다.\n\n\n`python` 으로 언어를 명세한다:\n\n```python\nfor i in xrange(5):\n  print \"This is line \" + str(i) + \" of this useless loop.\\n\"\n```\n\n훌륭해 보입니다!\n\n\n\npython 으로 언어를 명세한다:\nfor i in xrange(5):\n  print \"This is line \" + str(i) + \" of this useless loop.\\n\"\n훌륭해 보입니다!\n\n\n\n6.2.4 링크\n하이퍼링크를 작성하는 방식은 두가지가 있다. 첫번째는 인라인 으로 작성하는 것으로 [텍스트](http://link.tld) 방식을 사용한다. 두번째는 명칭을 지정한 표식을 사용하는 방식이다. 예를 들어, \n\n\n이것은 [첫번째 링크], 다음은 또다른 [두번째 링크][link2] 혹은 [세번째 링크](http://link.1)\n\n[첫번째 링크]: http://link.1\n[link2]: http://link.2\n\n\n\n 이것은 첫번째 링크, 다음은 또다른 두번째 링크 혹은 세번째 링크\n\n\n명칭을 지정한 표식을 사용하는 방식에 대한 구문은 [텍스트][표식] 이 먼저 나오고 나서, [표식]: http://link 표식링크가 문서 다음에 뒤따라 나온다. [표식]이 없는 경우 [텍스트]: link 방식으로 동작하게 된다.",
    "crumbs": [
      "저작 레고 부품",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>마크다운</span>"
    ]
  },
  {
    "objectID": "part_markdown.html#컴파일",
    "href": "part_markdown.html#컴파일",
    "title": "\n6  마크다운\n",
    "section": "\n6.3 컴파일",
    "text": "6.3 컴파일\n지금까지 작성원고는 말그대로 마크다운 자체 파일(확장자가 mkd, .markdown, .pandoc)이다. 마크다운을 뭔가 다른 것으로 변환할 필요가 있다. 대체로 PDF, 혹은 텍스트 프로세서에서 볼 수 있는 문서형식이 된다. \n\n6.3.1 팬독(pandoc) 으로 컴파일\n팬독(pandoc) 프로그램이 이런 작업을 수행하는 나름 최적의 도구다.(물론, jekyll 처럼 웹에 특화된 도구도 존재한다.) 대부분의 명령-라인 도구와 마찬가지로, pandoc은 입력값으로 파일과 일부 선택옵션 플래그를 순차적으로 받는다. pandoc을 호출하는 기본방식은 다음과 같다:\npandoc input.ext -o output.ext\n기본 구문\n팬독(pandoc)을 사용하면 입력 파일이 출력 파일로 마법처럼 변환된다. 마크다운 파일을 PDF로 변환하는 팬독의 명령어는 다음과 같다.\npandoc manuscript.md -o manuscript.pdf\n그리고 MS 워드 문서를 생성하려면 다음과 같이 입력한다.\npandoc manuscript.md -o manuscript.doc\ndocx, otf는 신규 워드문서와 리브레오피스 확장자다. txt, rtf, html을 시도해보고 산출결과가 어떻게 달라지는지도 살펴보자.\n\n6.3.2 견본 템플릿\n팬독은 최종 문서의 내용을 어디에 배치할지 결정하기 위해 다양한 견본 템플릿을 활용한다. 팬독 견본 템플릿은 문서 변환 과정에서 사용되는 일종의 구조적 지침서다. 견본 템플릿에는 팬독이 문서의 각 요소를 어떻게 배열할지에 대한 지침이 포함되어 있다. 예를 들어, 마크다운 파일을 PDF, HTML, LaTeX 등으로 변환할 때, 견본 템플릿에는 문서의 제목, 저자, 날짜, 텍스트 블록, 이미지 등이 최종 문서에서 어떻게 출력될지 정의되어 있다. 팬독 웹사이트에 견본 템플릿을 찾아 복사하고 수정할 수 있는 정보가 제공되고 있고, 구글 검색을 통해 쉽게 찾을 수 있는 재사용 가능한 다양한 견본 템플릿도 많이 존재한다.\n\n6.3.3 선택옵션 플래그\n선택옵션 플래그를 통해서 pandoc에 추가적인 인자를 전달한다. pandoc 에서 지원하는 인자가 상당히 많은데, 자세한 정보는 쉘를 열고 man pandoc 도움말을 참조하거나, 인터넷 온라인 문서를 참조한다.",
    "crumbs": [
      "저작 레고 부품",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>마크다운</span>"
    ]
  },
  {
    "objectID": "part_markdown.html#고급-마크다운",
    "href": "part_markdown.html#고급-마크다운",
    "title": "\n6  마크다운\n",
    "section": "\n6.4 고급 마크다운",
    "text": "6.4 고급 마크다운\n학술 논문 작성 시, 단순 텍스트 이상의 다양한 요소들이 포함된다. 특히, 참고문헌, 표, 그림, 수식은 학술 논문에서 매우 중요한 문서구성 요소다. 이러한 요소들을 추가하는 방법을 살펴볼 때, 특히 유의해야 할 점은 팬독을 사용할 때 \\LaTeX 명령어가 다른 형식으로 변환되는 과정에서도 그대로 적용된다는 것입니다. 이런 점이 수식 사용을 상당히 단순화시킨다.\n\n6.4.1 수식\n수식을 \\(\\LaTeX\\) 구문으로 작성할 수 있다. 예를 들어, 아래 코드 덩어리는 적법한 마크다운 구문이다. \nThe equation for a polynomial function is $y(x) = ax^2 + bx +c$.\n그리고 다음도 마크다운과 \\(\\LaTeX\\) 코드가 섞여 있지만 적법한 구문이다.\nThe sum of a vector of numbers ($\\mathbf{v}$) is noted\n\n\\begin{equation}\n\\sum_{x=1}^n\\mathbf{v}_i\n\\end{equation}\n\n6.4.2 표\n마크다운의 한 가지 단점은 표 생성에 대한 지원이 제한적이라는 점이다. 비록 \\(\\LaTeX\\) 구문을 사용하는 것이 가능하지만, 상대적으로 간단히 표를 표를 작성하는 방법은 있다. \n|  교과목  |    담당자 |     선수 교과목 |\n|:---------|:-----------|------------------:|\n| 마크다운 | 홍길동  | 쉘, Git, Makefiles |\n상기 구문을 적용하면 다음에 나온 표가 작성된다.\n\n\n\n\n교과목\n담당자\n선수 교과목\n\n\n마크다운\n홍길동\n쉘, Git, Makefiles\n\n\n\n\n표 6.1: 고급 마크다운 표작성 사례\n\n\n표를 구성하는 요소가 몇개 있다. 첫번째 줄은 헤더 로 표제목, 두번째 줄은 정렬, 그 다음 줄이 표에 기술되는 내용물 이 된다. 칼럼은 파이프(|) 기호로 구분한다. 파이프를 수직방향으로 정렬할 필요는 없다. (하지만, 원문서코드를 읽을 때 가독성을 상당히 높힌다 – 대부분의 편집기에서 이런 기능을 플러그인으로 지원한다)\n기본디폴트 설정으로 칼럼은 좌측 정렬 된다. 정렬을 명세하려면, 두번째 행에 다음과 같이 : 세미콜론을 사용해서 지정한다.\n|   좌측정렬  |  중앙정렬  |    우측정렬   | 기본 설정 (좌측) |\n|:-------------|:--------:|--------------:|:---------------|\n| `:---`       |  `:--:`  |        `---:` | `----`         |\n상기 구문을 적용하면 다음에 나온 표가 작성된다.\n\n\n좌측정렬\n중앙정렬\n우측정렬\n기본 설정 (좌측)\n\n\n:---\n:--:\n---:\n----\n\n\n6.4.3 그림\n그림은 마크다운에서 잘 지원되고 있다. 표기법은 링크에 사용된 표기법을 따르지만, 느낌표(!)를 앞에 위치시킬 필요가 있다. 예를 들어, \n![소프트웨어 카펜트리 로고](images/swc-logo-blue.png)\n상기 구문을 적용하면 다음과 같이 그림이 삽입된다.\n\n\n\n\n\n그림 6.1: 소프트웨어 카펜트리 로고\n\n\n다른 방법으로 다음과 같이 그림 삽입 구문을 작성해도 된다.\n![소프트웨어 카펜트리 로고\\label{f:swc}][swc]\n[swc]: http://swcarpentry.github.io/modern-scientific-authoring/assets/img/swc-logo-blue.svg\n\\(\\LaTeX\\) 명령어, \\label{f:swc} 라벨을 넣은 것에 주목한다. \\autoref{f:swc}를 사용해서 텍스트에 그림을 참조하게 한다. \\(\\LaTeX\\) autoref 팩키지는 놀랍도록 유용한데, 참조하는 객체 유형을 자동 식별해서, 사람이 관여하지 않고도 Fig. 1, Tab. 2, Eqn. 3, 혹은 기타 필요한 것을 자동으로 완성시킨다.\n\n6.4.4 참고문헌\n학술논문에서 요구하는 최종 요건은 참고문헌이다. pandoc과 pandoc-citeproc 확장기능을 통해 마크다운은 참고문헌 기능을 매우 우아하게 처리한다. pandoc 서지관리 모듈은 다양한 형식으로부터 인용을 불러올 수 있다. 최초 CSL JSON 와 CSL YAML로 설계되어, BibTEX과 RIS도 수용한다. \n참고문헌을 참조하는 방식은 인용키, @CitationKey를 이용한다. 예를 들어, BibTEX 라이브러리에 다음 참고문헌이 담겨 있다면:\n@ARTICLE{thom99,\n    title = {The raw material for coevolution},\n    journal = {Oikos},\n    author = {Thompson, John N},\n    number = {1},\n    volume = {84},\n    year = {1999},\n    pages = {5--16},\n}\n텍스트에 @thom99 을 넣어 참조한다. 모든 참고문헌 관리 소프트웨어를 사용해서 pandoc에서 지원되는 형식 중 하나로 내보내기 한다. 인용키가 보여주는 방식을 사용자 정의에 맞추면 된다.\n참고문헌을 ([@John2012; @Jack2014])와 같이 결합할 수 있고, 인라인 으로 “저자-년도” 스타일을 지정해서 사용하고 있다면 @Doe2013 작성하게 되면 Doe (2013)와 같이 표시되고, 괄호를 사용해서 [@Doe2013]와 같이 사용하면 (Doe, 2013) 산출물을 얻게 된다. 또한, 텍스트를 추가하는 것도 가능하다: [검토를 위해 @Billy2015 참조] 와 같이 작성하면, (검토를 위해 Billy et al., 2015 참조)와 같이 나타난다. 참고문헌은 문서 끝에 자동으로 삽입되며, 저널 요건에 맞춰 서식을 변경하는 수천 가지 방법이 있다.",
    "crumbs": [
      "저작 레고 부품",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>마크다운</span>"
    ]
  },
  {
    "objectID": "part_markdown.html#연습문제",
    "href": "part_markdown.html#연습문제",
    "title": "\n6  마크다운\n",
    "section": "연습문제",
    "text": "연습문제\n객관식\n\n마크다운에서 # 기호의 사용 목적은 무엇인가요?\n\n텍스트 색상 변경\n문서 제목 수준 결정\n텍스트 강조\n링크 생성\n\n\n\n\n마크다운에서 코드를 표시하는 방법은 무엇인가요?\n\n\n* 기호 사용\n백틱(`) 사용\n\n_ 기호 사용\n\n# 기호 사용\n\n\n\n\n마크다운에서 하이퍼링크를 생성하는 방법은 무엇인가요?\n\n\n# 기호 사용\n\n* 기호 사용\n\n[텍스트](링크) 구문 사용\n\n_ 기호 사용\n\n\n서술형\n\n마크다운에서 표를 생성하는 방법에 대해 설명해보세요.\n\n\n마크다운에서 참고문헌을 어떻게 관리하고 참조하는지 설명해보세요.",
    "crumbs": [
      "저작 레고 부품",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>마크다운</span>"
    ]
  },
  {
    "objectID": "part_code.html",
    "href": "part_code.html",
    "title": "\n7  코드\n",
    "section": "",
    "text": "7.1 파이썬\n사인 곡선을 그리는 파이썬 코드를 작성해보자. 먼저 그래프 그리는 역할을 담당하는 matplotlib 패키지를 로드하고, 사인 함수를 구현하기 위해 numpy 패키지를 이용하여 x축 데이터, sin 함수를 이용하여 y축 데이터를 생성한다. 마지막으로 plot 함수를 이용하여 그래프를 그린다. 그래프 제목과 축 제목에 한글이 들어가 한글 글꼴 설정을 추가로 해준다.",
    "crumbs": [
      "저작 레고 부품",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>코드</span>"
    ]
  },
  {
    "objectID": "part_code.html#파이썬",
    "href": "part_code.html#파이썬",
    "title": "\n7  코드\n",
    "section": "",
    "text": "파이썬 코드\n```{python}\n# 패키지\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# 한글 폰트 설정\nplt.rcParams['font.family'] = 'NanumGothic'\nplt.rcParams['axes.unicode_minus'] = False\n\n# 데이터\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\n# 그래프\nplt.plot(x, y)\nplt.xlabel('x 축')\nplt.ylabel('sin(x)')\nplt.title('사인 그래프')\nplt.show()\n```\n\n\n그래프",
    "crumbs": [
      "저작 레고 부품",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>코드</span>"
    ]
  },
  {
    "objectID": "part_code.html#r-언어",
    "href": "part_code.html#r-언어",
    "title": "\n7  코드\n",
    "section": "\n7.2 R 언어",
    "text": "7.2 R 언어\n쿼토는 ’차세대 R 마크다운’으로 불리며 R 언어를 기본적으로 지원한다. 다양한 통합개발환경(IDE)이 존재하지만, R 언어 작업에 있어서는 RStudio가 가장 효율적이라는 것이 저자의 경험이다. RStudio는 원래 R 언어를 위한 IDE로 개발되었으며, 이후 확장되어 쿼토 기능도 사용할 수 있다고 생각하는 분도 있을 정도다. \n파이썬 대신 R 코드로 동일한 기능을 수행하는 것은 R이 데이터 분석과 시각화에 강력한 도구임을 보여준다. R을 설치하면 seq(), sin(), plot()과 같은 다양한 내장 함수들을 통해 별도의 패키지 설치 없이도 바로 그래프를 생성할 수 있다. 내장 함수들을 사용해 사인 곡선을 그릴 수 있다.\n\n\nR 코드\n```{r}\n# 데이터 생성\nx &lt;- seq(0, 10, length.out = 100)\ny &lt;- sin(x)\n\n# 그래프 그리기\nplot(x, y, type = \"l\", xlab = \"x 축\", \n     ylab = \"sin(x)\", main = \"사인 그래프\")\n```\n\n\n그래프",
    "crumbs": [
      "저작 레고 부품",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>코드</span>"
    ]
  },
  {
    "objectID": "part_code.html#줄리아",
    "href": "part_code.html#줄리아",
    "title": "\n7  코드\n",
    "section": "\n7.3 줄리아",
    "text": "7.3 줄리아\nJulia 프로그래밍 언어는 과학 및 수치 연산 분야에서 높은 수준의 성능을 제공하면서도, 사용자 친화적인 문법을 가진 프로그래밍 언어의 필요성에서 2012년에 MIT에서 개발되었다. 깔끔하고 읽기 쉬운 언어 특성과 고성능 수치 계산 역량으로 인해 과학 및 공학 분야 연구자들과 개발자들에게 인기를 끌고 있다. \n줄리아 홈페이지에서 다운로드하여 설치작업을 완료한다. 쿼토에서 yaml 헤더에 engine: julia-1.10을 추가하여 해당 .qmd 문서를 컴파일할 수도 있다. 쿼토 문서에서 R 코드 덩어리(code chunk)처럼 줄리아 코드 덩어리만 따로 실행하고자 하는 경우 JuliaCall 패키지를 설치하고 나서 다음과 같이 julia_setup() 함수를 사용하여 줄리아 엔진을 설정해야 쿼토 문서에 내장된 줄리아 코드 덩어리를 실행할 수 있다. julia_setup() 작업에 다소 시간이 소요된다. 작업이 마무리 되면 RStudio나 VS코드 IDE를 재시작하는 것을 추천한다.\n\nlibrary(JuliaCall)\n\njulia_setup(JULIA_HOME=\"C:/Users/&lt;사용자명&gt;/AppData/Local/Programs/Julia-1.10.1/bin\")\n\n파이썬과 R로 제작한 사인 그래프를 줄리아로 나타나기 위해 Plots 패키지가 필요하다. 줄리아 콘솔에서 import Pkg; Pkg.add(\"Plots\") 명령어로 패키지를 설치한 후 다음과 같이 사인 그래프를 출력하는 줄리아 코드 덩어리를 작성한다.\n\n\n줄리아 코드\n```{julia}\n# 패키지 설치\n# import Pkg; Pkg.add(\"Plots\") \nusing Plots\n\n# 데이터\nx = range(0, stop=10, length=100)\ny = sin.(x) # 점(.)을 사용하여 요소별 연산 수행\n\n# 그래프\nplot(x, y, label=\"sin(x)\", xlabel=\"x axis\", ylabel=\"sin(x)\", title=\"Sine Graph\")\n\n# 그래프 표시\ndisplay(plot)\n```\n\n\n\n\n그래프\n\n#&gt; 0.0:0.10101010101010101:10.0\n#&gt; 100-element Vector{Float64}:\n#&gt;   0.0\n#&gt;   0.1008384202581046\n#&gt;   0.2006488565226854\n#&gt;   0.2984138044476411\n#&gt;   0.3931366121483298\n#&gt;   0.48385164043793466\n#&gt;   0.5696341069089657\n#&gt;   0.6496095135057065\n#&gt;   0.7229625614794605\n#&gt;   0.7889454628442574\n#&gt;   ⋮\n#&gt;   0.23076007532505177\n#&gt;   0.13146698864295842\n#&gt;   0.03083367906114098\n#&gt;  -0.07011396040064677\n#&gt;  -0.1703468323280965\n#&gt;  -0.26884312591038406\n#&gt;  -0.3645987336558887\n#&gt;  -0.45663748763377376\n#&gt;  -0.5440211108893698\n\n\n\n\n\n\n#&gt; plot (generic function with 4 methods)",
    "crumbs": [
      "저작 레고 부품",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>코드</span>"
    ]
  },
  {
    "objectID": "part_code.html#자바스크립트",
    "href": "part_code.html#자바스크립트",
    "title": "\n7  코드\n",
    "section": "\n7.4 자바스크립트",
    "text": "7.4 자바스크립트\n쿼토는 D3 저자(Mike Bostock)가 개발한 Observable JS (OJS)를 지원하여 자바스크립트 코드를 문서에 삽입할 수 있다. OJS를 쿼토에 넣게 되면 OJS 인터랙티브 데이터 시각화 기능을 활용할 수 있게 된다. \n앞서 작성한 사인 그래프를 그리는 코드를 OJS 로 다음과 같이 구현할 수 있다. 사인 그래프를 그리는데 필요한 x값, Math.sin() 함수를 이용해 y값을 계산하고, Plot.plot 함수를 이용해 그래프를 작성한다.\nOJS의 강력한 기능은 인터랙티브 데이터 시각화에 있다. 본서는 PDF 출판도 염두에 두어야 하기 때문에 OJS의 인터랙티브 기능을 활용하지는 않겠지만, PDF를 비롯한 (종이)출판에서 자유로운 분들은 OJS를 활용하여 더욱 다양하고 풍부한 시각화를 구현하여 전자문서로 제작 및 배포하는 것을 추천한다.\n\n\n자바스크립트 코드\n```{ojs}\npoints = {\n  const points = []\n  for(let i=0; i&lt;=10;i=i+.01){\n    points.push({x:i,y:Math.sin(i)})\n  }\n  return points\n}\n\nPlot.plot({\n  x:{domain:[0,10]},\n  y:{domain:[-1,1]},\n  marks:[\n    Plot.ruleX([0]),\n    Plot.ruleY([0]),\n    Plot.line(points,{x:'x',y:'y'})\n    ]\n})\n```\n\n\n\n\n그래프\n\npoints = {\n  const points = []\n  for(let i=0; i&lt;=10;i=i+.01){\n    points.push({x:i,y:Math.sin(i)})\n  }\n  return points\n}\n\nPlot.plot({\n  x:{domain:[0,10]},\n  y:{domain:[-1,1]},\n  marks:[\n    Plot.ruleX([0]),\n    Plot.ruleY([0]),\n    Plot.line(points,{x:'x',y:'y'})\n    ]\n})",
    "crumbs": [
      "저작 레고 부품",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>코드</span>"
    ]
  },
  {
    "objectID": "part_code.html#sql",
    "href": "part_code.html#sql",
    "title": "\n7  코드\n",
    "section": "\n7.5 SQL",
    "text": "7.5 SQL\n과학기술 분야에서 SQL(Structured Query Language)은 끊임없이 성장하는 데이터의 양과 복잡성을 다루는 데 필수적인 언어로 데이터 중심 연구가 증가함에 따라, SQL은 이 분야에서 중추적인 역할을 계속 이어날 것으로 예측된다. \nSQL은 데이터베이스 관리의 표준으로, 연구 데이터를 체계적으로 조직하고 관리하는 데 필수적이고, 복잡한 데이터 쿼리와 분석을 가능하게 하여, 연구자들이 다양한 데이터 소스에서 필요한 정보를 추출하고, 데이터 간의 관계를 분석하며, 통계질문에 답할 수 있게 된다. 과학기술 분야에서 종종 거대한 양의 데이터를 처리를 가능하게 하며, SQL 표준을 준수하는 데이터는 공유와 협업도 촉진한다.\n한국 R 사용자회에서 출판한 “챗GPT SQL”(이광춘 2024)에 등장하는 소프트웨어 카펜트리 SQLite3 조사 데이터베이스(survey.db)를 쿼토 문서에 연결하여 데이터베이스의 테이블을 조회하는 사례를 살펴보자. 데이터베이스를 문서에 연결시키는 연결(conn) 작업을 DBI 패키지 dbConnect() 함수로 수행하고 제대로 연결이 되었는지 dbListTables() 함수로 확인하고, 쿼리할 수 있는 테이블을 살펴본다. 참고로 SQLite3 데이터베이스는 파일 데이터베이스로 파일에 관계형 데이터베이스가 내장되어 있어 별도의 데이터베이스 서버가 필요하지 않다.\n\nlibrary(DBI)\nlibrary(tidyverse)\n\nconn &lt;- DBI::dbConnect(RSQLite::SQLite(), \n                      dbname = \"data/survey.db\")\n\ndbListTables(conn)\n#&gt; [1] \"Person\"  \"Site\"    \"Survey\"  \"Visited\"\n\n이제 연결된 데이터베이스에서 Person 테이블을 조회하는 쿼리를 작성해보자. 쿼토 문서에 R, 파이썬 코드를 바로 작성했던 것처럼 SQL 쿼리를 작성하면 쿼리 결과를 문서에 바로 반영할 수 있다. 유의할 점은 쿼토 sql 코드 덩어리에 데이터베이스 연결작업으로 #| connection: conn을 선언해야 된다는 점이 다른 프로그래밍 언어와 다르다.\n\n\nSQL 코드\n```{sql}\n#| connection: conn\n\nSELECT *\nFROM Person\n```\n\n\n\n\n쿼리 실행결과\n\n\n\n5 records\n\nid\npersonal\nfamily\n\n\n\ndyer\nWilliam\nDyer\n\n\npb\nFrank\nPabodie\n\n\nlake\nAnderson\nLake\n\n\nroe\nValentina\nRoerich\n\n\ndanforth\nFrank\nDanforth",
    "crumbs": [
      "저작 레고 부품",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>코드</span>"
    ]
  },
  {
    "objectID": "part_code.html#연습문제",
    "href": "part_code.html#연습문제",
    "title": "\n7  코드\n",
    "section": "연습문제",
    "text": "연습문제\n객관식\n\n쿼토(Quarto)에서 지원하는 프로그래밍 언어와 특정 언어가 문서 생성에 기여하는 방식은 무엇인가요?\n\nR은 데이터 분석, 파이썬은 시각화, 줄리아는 고성능 연산, SQL은 데이터베이스 쿼리, 자바스크립트는 인터랙티브 기능에 기여\nR, 파이썬, 줄리아, SQL, 자바스크립트 모두 같은 방식으로 문서 생성에 기여\nR과 파이썬만 문서 생성에 기여, 나머지 언어는 보조적인 역할만 수행\n모든 언어가 시각화와 데이터 처리에 고르게 기여\n\n\n\n\n쿼토 문서에서 파이썬 코드 블록을 실행하는 방법은 무엇인가요?\n\n\n{python} 코드 블록 사용\n\n{r} 코드 블록 사용\n\n{sql} 코드 블록 사용\n\n{julia} 코드 블록 사용\n\n\n\n\n쿼토에서 SQL 쿼리를 실행할 때 필요한 주의사항은 무엇인가요?\n\n모든 쿼리는 SELECT로 시작해야 함\n쿼리에는 항상 데이터베이스 연결을 선언해야 함\nSQL 쿼리는 오직 조회만 가능함\n모든 SQL 쿼리는 ;로 끝나야 함\n\n\n서술형\n\n쿼토를 사용하여 데이터 시각화를 위한 코드 블록을 작성하는 방법에 대해 설명해보세요.\n\n\n쿼토 문서에서 다양한 프로그래밍 언어를 사용하여 협업하는 방법에 대해 설명해보세요.\n\n\n\n\n\n이광춘. 2024. 챗GPT SQL. 한국 R 사용자회.",
    "crumbs": [
      "저작 레고 부품",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>코드</span>"
    ]
  },
  {
    "objectID": "theme_fonts.html",
    "href": "theme_fonts.html",
    "title": "\n8  글꼴\n",
    "section": "",
    "text": "8.1 용어 설명\n활자와 서체, 글꼴, 타이포그래프은 비슷한 개념처럼 느껴질 수 있으나 각각 다른 의미를 가지고 있다. 활자(Type)는 글자나 기호의 물리적 형태로 본래는 글자를 만드는 데 사용된 나무 또는 금속 조각을 일컫는 용어다. 서체(또는 글꼴 모음, Typeface)는 글자 및 기호가 서로 비슷한 특징을 가지도록 디자인된 문자 스타일을 의미하며, ‘나눔고딕’, ‘Times New Roman’, ‘Helvetica’ 같은 이름을 가진 것이 서체다. 글꼴(Font)은 서체의 여러 변형을 총칭하는 용어로, 특정 서체에서 굵고 진한 글꼴(Bold), 기울임(italic) 등 변형이 모두 포함된다. 타이포그래피(Typography)는 활자 서체의 배열을 의미하며, 서체의 선택, 글자 크기, 줄 간격, 단어 간격, 문장 사이 간격과 맞춤 등을 조절하여 읽기 쉽고 미적으로 효과적인 텍스트 제작을 의미한다.\n전세계적으로 글꼴의 수는 무수히 많지만, 크게 다음과 같이 몇가지로 분류된다. 먼저 글꼴은 기본적으로 세리프(serif)와 산세리프(sans serif)의 2가지 스타일로 구분되는데 세리프는 글자 획 끝에 작은 삐침이 있는 글꼴이며 산스(sans)는 프랑스어로 “없다”, 또는 “없이”라는 뜻이기 때문에 삐침이 없는 글꼴을 지칭한다. 모노스페이스(monospaced) 글꼴은 코드 작성 등에서 유용하게 사용되며, 모든 글자가 같은 폭을 차지한다. Consolas나 D2 Coding은 모노스페이스 글꼴의 대표적인 예다. 디스플레이(Display)와 스크립트(Script) 글꼴은 본문보다는 제목이나 강조할 부분에서 사용되며, 디자인적인 특성이 가미되어 있다. 디스플레이 글꼴은 대체로 크고 눈에 띄는 특성을, 스크립트 글꼴은 필기체나 서명 등을 모방한 스타일을 가진다. 수식을 표현하는데 많이 사용되는 \\(\\LaTeX\\)에서 기본글꼴로 Computer Modern, AMS Euler, STIX 같은 수식전용 글꼴이 사용되어, 수학적 표기나 공식을 명확하고 정확하게 표현할 수 있도록 설계되었다.\n일반적으로 본문 작성에는 세리프나 산세리프 글꼴이 사용되며, 제목에는 더 독특하고 눈에 띄는 글꼴을 사용하는 경향이 있다. 증거 기반 문서, 행정 문서, 과학기술 문서 등에서도 이러한 경향이 나타나고 있다. 특히, 수식을 포함한 과학기술 문서에서 타이포그래피 중요성이 점점 더 커지고 있다. 이런 경향은 글꼴 선택이 갖는 문서의 전달력과 가독성에 미치는 영향을 무시 못하기 때문이다.",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>글꼴</span>"
    ]
  },
  {
    "objectID": "theme_fonts.html#용어-설명",
    "href": "theme_fonts.html#용어-설명",
    "title": "\n8  글꼴\n",
    "section": "",
    "text": "그림 8.2: 문서에 담긴 디지털 글쓰기 글꼴\n\n\n\n\n\n\n\n\n여우와 다람쥐\n\n\n\ntypeface는 서체로 번역되고 font는 글꼴로 번역된다. 하나의 typeface에는 여러 font가 포함될 수 있으며, 이를 검증하는 데에는 팬그램이 유용하게 사용된다. 팬그램은 모든 문자를 최소 한 번 이상 사용하여 만든 문장으로, 제작된 서체와 글꼴이 모든 글자에 대해 어떻게 표현되는지 확인하는 데 필요하다.\n팬그램(Pangram)은 ’모든 글자’라는 뜻으로 주어진 모든 문자를 적어도 한 번 이상 사용하여 만든 문장을 뜻한다. 팬그램은 로렘 입숨처럼 글꼴 샘플을 보여주거나 장비를 테스트하는 데 사용된다. 영어 팬그램으로 가장 유명한 ‘The quick brown fox jumps over the lazy dog’는 19세기부터 사용되어 왔다. 유사하게 한글에서는 “다람쥐 헌 쳇바퀴에 타고파”가 사용되고 있다.",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>글꼴</span>"
    ]
  },
  {
    "objectID": "theme_fonts.html#설치형-글꼴과-웹-글꼴",
    "href": "theme_fonts.html#설치형-글꼴과-웹-글꼴",
    "title": "\n8  글꼴\n",
    "section": "\n8.2 설치형 글꼴과 웹 글꼴",
    "text": "8.2 설치형 글꼴과 웹 글꼴\n디지털 시대에서 글꼴은 문자와 기호를 디지털 방식으로 표현하는 데 필수적인 요소로 다양한 형태 글꼴이 개발되었는데, 주로 사용되는 두 가지 형태는 설치형 글꼴과 웹 글꼴입니다. 설치형 글꼴은 사용자가 자신의 컴퓨터나 다른 디지털 디바이스에 직접 설치하여 사용하며, 다양한 애플리케이션에서 해당 글꼴을 활용할 수 있다. 반면에, 웹 글꼴은 웹사이트를 통해 온라인 상에서 사용되며 웹 페이지에서 해당 글꼴이 사용된다. \n로컬 설치형 글꼴은 사용자의 컴퓨터나 기기(디바이스)에 직접 설치되어 있는 글꼴로, 윈도우(Windows)나 맥(macOS), 리눅스(Unix/Linux)에서 기본적으로 제공되는 글꼴이나 사용자가 따로 설치하여 사용하는 글꼴을 의미한다. 인터넷 연결 없이도 사용할 수 있으며, 로컬에서 동작하므로 빠른 속도를 제공한다는 점이 큰 장점이지만, 사용자 컴퓨터나 기기에 설치되어 있지 않은 글꼴은 보이지 않을 수 있으며, 글꼴 업데이트나 관리는 수동으로 직접해야 한다는 점은 단점이다.\n반면 웹글꼴은 웹페이지를 로드할 때 서버에서 함께 다운로드 되어 사용자의 브라우저에 표시된다. 구글 글꼴(Google Fonts), 눈누와 같은 웹글꼴 서비스를 통해 제공되며, 웹페이지를 방문하는 모든 사용자에게 동일한 글꼴로 보여준다는 점은 장점이다. 다양한 스타일과 굵기(weights) 글꼴을 쉽게 사용할 수 있으며, 글꼴 업데이트나 관리가 자동화되는 장점은 있으나, 초기 페이지 로딩 시간이 길어질 수 있으며, 서버 다운 혹은 인터넷 연결 문제로 웹글꼴이 정상적으로 로드되지 않을 위험도 있고, 인터넷 통신 데이터 사용량이 증가되어 속도가 늦어지고 관련 네트워크 비용이 늘어날 수도 있다.\n\n\n설치형 글꼴과 웹 글꼴",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>글꼴</span>"
    ]
  },
  {
    "objectID": "theme_fonts.html#글꼴-설치",
    "href": "theme_fonts.html#글꼴-설치",
    "title": "\n8  글꼴\n",
    "section": "\n8.3 글꼴 설치",
    "text": "8.3 글꼴 설치\n구글 폰트(Google Fonts), 눈누와 같은 웹사이트에서 .ttf, .otf 형식 글꼴파일을 다운로드 한 후에 C:\\Windows\\Fonts\\ 디렉토리에 복사하거나, 다운로드 받은 글꼴파일을 더블 클릭하여 설치 버튼을 눌러 자동으로 해당 디렉토리에 설치한다. 글꼴을 시스템에 설치하면 모든 사용자가 사용할 수 있도 있지만, 프로젝트 별로 fonts 디렉토리를 생성하여 이를 프로젝트에서 불러와서 특정 글꼴을 사용하는 것도 많이 사용된다. 두가지 접근 방법 모두 장단점이 있다. 그림 8.3 에서 네이버에서 무료로 제공하는 나눔글꼴과 D2Coding 글꼴을 다운로드 받아 운영제제에 설치한 후 R에서 ggplot 그래프를 제작하는데 extrafont 패키지 font_import() 함수를 통해 등록한 후 사용하는 사례를 보여주고 있다. RStudio에서 코딩전용 D2Coding 글꼴 설정하는 방법도 함께 우측에 나와있다.\n\n\n\n\n\n그림 8.3: R 폰트/글꼴 설치\n\n\n\n8.3.1 글꼴 패키지\n시스템에 글꼴이 설치되었다고 바로 문서 텍스트, 그래프, 표, 수식 등에 사용할 수 있는 것은 아니다. 이를 등록하는 절치가 필요하다. 언어마다 차이는 있지만 대체로 유사한 작업방식이기 때문에 R 언어를 사례로 살펴보자.\nextrafont, sysfonts, showtext는 R에서 글꼴 처리를 위한 다양한 기능을 제공하는 패키지들이다. 여기서 extrafont와 sysfonts는 로컬에 설치된 글꼴을 다루는 데 특화되어 있는 반면, showtext는 웹 글꼴에 특화된 패키지다. sysfonts는 글꼴 관리에서 더 낮은 수준에서의 제어 기능을 제공하고, extrafont는 높은 수준의 작업에 집중하며 사용자 친화적인 방법으로 글꼴을 적용하는 데 특화되어 있다. 먼저, 로컬 컴퓨터에 설치된 R 글꼴 패키지를 확인한다. \n\nlibrary(tidyverse)\n\nfont_packages &lt;- c(\"extrafont\", \"showtext\", \"sysfonts\")\n\nfonts_list &lt;- map(font_packages, packageDescription)\n\nfonts_list |&gt; \n  enframe() |&gt; \n  mutate(패키지명 = map_chr(value, \"Package\"),\n         버전 = map_chr(value, \"Version\"),\n         날짜 = map(value, \"Date\") |&gt; as.character(),\n         URL = map(value, \"URL\") |&gt; as.character()) |&gt; \n  select(-name, -value) |&gt; \n  gt::gt()\n\n\n\n\n\n\n\n\n패키지명\n버전\n날짜\nURL\n\n\n\nextrafont\n0.19\nNULL\nhttps://github.com/wch/extrafont\n\n\nshowtext\n0.9-6\n2023-05-03\nhttps://github.com/yixuan/showtext\n\n\nsysfonts\n0.8.8\n2022-03-13\nhttps://github.com/yixuan/sysfonts\n\n\n\n\n\n\n\n\n표 8.1: 로컬 컴퓨터에 설치된 R 글꼴 패키지\n\n\n\n\n8.3.2 네이버 글꼴 설치\n네이버 나눔스퀘어 글꼴을 로컬 컴퓨터에 다운로드 받아 설치할 수 있다. 그림 8.4 에서 “모든 사용자용으로 설치(A)”하게 되면 글꼴이 C:\\Windows\\Fonts\\ 디렉토리에 설치된다. 운영체제에 설치작업이 완료되면 R에서 사용할 수 있으나, 몇 가지 추가 작업이 필요하다. 우선, fs 패키지 file_exists() 함수를 사용하여 ‘NanumSquare.ttf’ 파일이 정상적으로 설치되었는지 확인한다. 만약 extrafont 패키지를 사용한다면 font_import() 명령어를 사용하여 글꼴을 등록하고, path=로 글꼴 파일의 경로를 직접 지정할 수 있으며, pattern=을 사용해서 특정 패턴에 맞는 글꼴을 일괄적으로 등록할 수도 있다. 최근에 많이 사용되고 있는 sysfonts 패키지를 사용한다면 font_add() 명령어를 사용하여 글꼴을 등록한다. 선택한 방식에 따라 글꼴을 설치하면 이후 R 프로젝트에서 네이버 나눔스퀘어 글꼴을 자유롭게 사용할 수 있다. \n\n\n\n\n\n그림 8.4: 윈도우 나눔스퀘어 글꼴 설치\n\n\n\n# library(extrafont)\nlibrary(sysfonts)\n\nfs::file_exists(\"C:/Windows/Fonts/NanumSquare.ttf\")\n\n# font_import(pattern = \"NanumSquare.ttf\", prompt = FALSE)\nfont_add(\"NanumSquare\", \"C:/Windows/Fonts/NanumSquare.ttf\")\n\n네이버에서 최근에 공개한 마루부리 글꼴도 동일한 방식으로 설치한다. \n\n# MaruBuri 글꼴 설치\nfont_add(\"MaruBuri-ExtraLight\", \"C:/Windows/Fonts/MaruBuri-ExtraLight.ttf\")\nfont_add(\"MaruBuri-Regular\", \"C:/Windows/Fonts/MaruBuri-Regular.ttf\")\nfont_add(\"MaruBuri-Bold\", \"C:/Windows/Fonts/MaruBuri-Bold.ttf\")\nfont_add(\"MaruBuri-Light\", \"C:/Windows/Fonts/MaruBuri-Light.ttf\")\n\n코딩전용 글꼴은 앞서 소개한 글꼴과 차이가 있지만 설치방식은 동일하다. 동일한 방식으로 D2 Coding 글꼴도 설치하고 RStudio IDE에서 “Tools” → “Global Options…”를 클릭하면 “Options”창이 열리고, Appearance에서 Editor font:에서 설치한 코딩전용 글꼴을 선택하고 Editor theme:도 지정한다. \n\n\nD2 코딩폰트 설치\n\n문서나 프로젝트의 특성과 목적에 따라 글꼴 선택은 큰 영향을 미친다. 예를 들어, 제목에는 깔끔한 느낌을 주기 위해 삐침이 없는 나눔스퀘어 글꼴을 적용하고, 본문에는 가독성을 높이기 위해 삐침이 있는 마루부리 글꼴을 사용하고, 프로그래밍 작업에 코딩전용 D2Coding 글꼴을 채택함으로써 전체 글쓰기 저작 환경을 설정하는 것도 방법이다.",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>글꼴</span>"
    ]
  },
  {
    "objectID": "theme_fonts.html#글꼴-적용-사례",
    "href": "theme_fonts.html#글꼴-적용-사례",
    "title": "\n8  글꼴\n",
    "section": "\n8.4 글꼴 적용 사례",
    "text": "8.4 글꼴 적용 사례\n예제로 ggplot2와 sysfonts 패키지를 사용해 다른 글꼴을 그래프 주요 요소에 반영한 데이터 시각화 R 코드를 살펴보자. 먼저 ggplot2 데이터 시각화를 위한 패키지와 sysfonts 글꼴 관리를 위한 라이브러리를 가져온다. font_add 함수를 사용해 NanumSquare, MaruBuri-Regular, MaruBuri-Bold 글꼴을 시스템에 등록한다. 이후 data.frame을 사용해 x값이 1부터 10까지, y값이 정규 분포를 따르는 데이터를 생성한다. ggplot 함수로 기본 그래프를 설정하고 geom_point를 사용해 산점도를 그린다. labs 함수로 그래프 제목과 x, y축 레이블을 설정하고, theme 함수로 큰 제목에는 NanumSquare, x축과 y축 레이블에는 MaruBuri-Regular 글꼴을 적용한다. annotate 함수로 “다른 글꼴”이라는 텍스트를 MaruBuri-Bold 글꼴로 그래프에 추가하여 다른 글꼴을 적용한 그래프를 생성한다.\n\nlibrary(ggplot2)\nlibrary(sysfonts)\n\n# 글꼴 시스템 등록\nfont_add(\"NanumSquare\", \"C:/Windows/Fonts/NanumSquare.ttf\")\nfont_add(\"MaruBuri-Regular\", \"C:/Windows/Fonts/MaruBuri-Regular.ttf\")\nfont_add(\"MaruBuri-Bold\", \"C:/Windows/Fonts/MaruBuri-Bold.ttf\")\n\n# 글꼴 캐시를 새로고침\nfont_families()\n\n# 데이터 생성\ndata &lt;- data.frame(\n  x = 1:10,\n  y = rnorm(10)\n)\n\n# ggplot 그래프 생성\nfonts_gg &lt;- ggplot(data, aes(x, y)) +\n  geom_point() +\n  labs(title = \"큰 제목\",\n       x = \"x 축\",\n       y = \"y 축\") +\n  theme(\n    plot.title = element_text(family = \"NanumSquare\", size = 37),\n    axis.title.x = element_text(family = \"MaruBuri-Regular\", size = 30),\n    axis.title.y = element_text(family = \"MaruBuri-Regular\", size = 30)\n  ) +\n  annotate(\"text\", x = 5, y = max(data$y)-0.1, label = \"다른 글꼴\", \n           size = 10, family = \"MaruBuri-Bold\")\n\nragg::agg_jpeg(\"images/fonts_example.jpeg\", width = 3, height = 2, units = \"in\", res = 600)\nfonts_gg\ndev.off()\n\n\n\n\n\n\n그림 8.5: 다양한 글꼴을 적용한 ggplot 사례",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>글꼴</span>"
    ]
  },
  {
    "objectID": "theme_fonts.html#연습문제",
    "href": "theme_fonts.html#연습문제",
    "title": "\n8  글꼴\n",
    "section": "연습문제",
    "text": "연습문제\n객관식\n\n글꼴을 디지털 글쓰기에 사용하는 주된 목적은 무엇인가요?\n\n페이지 레이아웃 조정\n문서의 전문성과 가독성 향상\n파일 크기 줄이기\n인쇄 비용 절감\n\n\n\n\n쿼토에서 사용할 수 있는 글꼴 유형에는 어떤 것들이 포함되나요?\n\n세리프, 산세리프, 모노스페이스\n산세리프와 스크립트만\n세리프와 디스플레이만\n모노스페이스와 디스플레이만\n\n\n\n\n글꼴을 선택할 때 고려해야 할 중요한 요소는 무엇인가요?\n\n색상만\n디자인과 가독성\n파일 크기만\n글꼴 이름만\n\n\n서술형\n\n쿼토에서 글꼴을 설치하고 적용하는 방법에 대해 설명해보세요.\n\n\n글꼴 선택이 데이터 시각화에 미치는 영향에 대해 설명해보세요.",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>글꼴</span>"
    ]
  },
  {
    "objectID": "theme_colors.html",
    "href": "theme_colors.html",
    "title": "\n9  색상\n",
    "section": "",
    "text": "9.1 시각화 메커니즘\n크게 보면 기계 즉, 컴퓨터가 색을 이해하고 표현하는 RGB 체계와 사람이 색을 인지하고 이해하는 HCL 체계로 나누어 진다. 2진수로 표현된 시각적 데이터는 RGB 16진수로 변환되어 모니터에 표시되고, 물리적 광자(photon)로 사람눈에 위치한 망막에 꽂히게 되고, 사람은 뇌에서 인지한 후에 이를 처리하여 시각적인 정보를 인식하게 된다. 따라서, 사람뇌에 인식할 수 있는 시각적인 정보로 데이터를 구성해야만 다양한 종류의 모니터를 통해 효율적이고 효과적으로 정보가 전달될 수 있다. 1",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>색상</span>"
    ]
  },
  {
    "objectID": "theme_colors.html#color-mechanism",
    "href": "theme_colors.html#color-mechanism",
    "title": "\n9  색상\n",
    "section": "",
    "text": "그림 9.1: 시각적 인지 메커니즘",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>색상</span>"
    ]
  },
  {
    "objectID": "theme_colors.html#color-dataviz-mechanism-rgb",
    "href": "theme_colors.html#color-dataviz-mechanism-rgb",
    "title": "\n9  색상\n",
    "section": "\n9.2 16진수 RGB 표색법",
    "text": "9.2 16진수 RGB 표색법\n양수 숫자나 크레파스 명칭 대신에, 일반적이고 컴퓨터가 읽어들일 수 있는 색상 표색법이 16진수 팔레트다. Cynthia Brewer 는 펜실베니아 대학에서 교수로 색상이론과 시각화에 관련된 분야를 개척했으며 특히, ColorBrewer 으로 알려진 색생체계는 가장 널리 쓰이고 있다. ColorBrewer 색상체계를 R에서 사용될 수 있게 만든 것이 RColorBrewer 패키지다. RColorBrewer Dark2 팔레트를 통해 실제로 구현된 색상체계를 살펴보자.\n\nlibrary(RColorBrewer)\nbrewer.pal(n = 8, name = \"Dark2\")\n#&gt; [1] \"#1B9E77\" \"#D95F02\" \"#7570B3\" \"#E7298A\" \"#66A61E\" \"#E6AB02\" \"#A6761D\"\n#&gt; [8] \"#666666\"\n\n# 기호는 관례로 붙이는 것이고, 16진수 문자열을 rr, gg, bb로 파싱한다. #rrggbb에서 rr, gg, bb 각각은 적색, 녹색, 청색 채널에 대한 생상농도를 나타낸다. 각 색상은 2를 밑으로 하는 16개 숫자를 나타내고, “16진수(hexadecimal)” 혹은 줄여서 헥스(hex)로 부른다. 다음에 밑을 10으로 하는 십진수와 16진수 비교표가 다음에 나와 있다.\n\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\nA\nB\nC\nD\nE\nF\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n\n\n\n\n표 9.1: 십진수와 16진수 비교표\n\n\n\n예를 들어, 팔렛트 첫 색상이 #1B9E77으로 명세되어 있다. 따라서, 녹색 채널 색상농도는 9E가 된다.\n\\[ 9E = 9 \\times 16^1 + 14 \\times 16^0 = 9 \\times 16 + 14 = 158 \\]\n무슨 뜻일까? 해당 채널의 가장 낮은 값은 00=0 이 되고, 가장 높은 값은 FF=255 가 된다.\n도움이 되는 기억해야 될 중요한 색상이 다음에 나와 있다. 적색, 녹색, 청색에 대한 강렬한 RGB 색상은 다음과 같다.\n\n\n\n\n\n\n\n\n\n색상\n헥스코드\n붉은색\n녹색\n파란색\n\n\n\nblue\n#0000FF\n0\n0\n255\n\n\ngreen\n#00FF00\n0\n255\n0\n\n\nred\n#FF0000\n255\n0\n0\n\n\n\n\n\n\n\n\n표 9.2: 주요 색상과 헥스코드\n\n\n\n다음에 무책색(흰색, 회색, 흑백)을 표현한 색상이 나와 있다.\n\n\n\n\n\n\n\n\n\n색상\n헥스코드\n붉은색\n녹색\n파란색\n\n\n\nwhite, gray100\n#FFFFFF\n255\n255\n255\n\n\ngray67\n#ABABAB\n171\n171\n171\n\n\ngray33\n#545454\n84\n84\n84\n\n\nblack, gray0\n#000000\n0\n0\n0\n\n\n\n\n\n\n\n\n표 9.3: 무책색(흰색, 회색, 흑백) 색상표\n\n\n\n“gray” 회색으로 치환하게 되면, “gray”를 보게 되고 어느 곳에서나 동일한 결과를 얻게 됨에 주목한다. 모든 채널을 최대값으로 하면 흰색, 모든 채널을 최소값으로 하면 검정색이 된다.\n\n\n\n\n\n\nR에서 색상을 지정하는 방법\n\n\n\n\n\n양의 정수: palette()함수를 이용하거나 색상 팔레트 인덱스를 사용하여 색상을 지정.\n\n색상 명칭: colors() 함수를 사용하여 검색된 색상 중 하나를 선택하여 적용.\n\n16진수 문자열: 16진수 코드를 사용하여 색상을 지정하며, 3개의 16진수 조합으로 색상을 만들고, 추가적으로 네 번째 채널을 통해 알파 투명도를 나타내어 4개의 16진수 조합으로 색상을 확장.\n\n\n\nrgb(), col2rgb(), convertColor() 함수도 유용하니, 자세한 내용은 도움말을 참조한다.",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>색상</span>"
    ]
  },
  {
    "objectID": "theme_colors.html#dataviz-mechanism-hcl",
    "href": "theme_colors.html#dataviz-mechanism-hcl",
    "title": "\n9  색상\n",
    "section": "\n9.3 HCL - RGB 대안",
    "text": "9.3 HCL - RGB 대안\nRGB 색공간과 색상 모형이 최고라고 볼 수 없다. 컴퓨터 화면에서 색을 표현하는 데는 적합하지만, 모든 색상 선택 작업에 이 모형을 적용하는 것은 어렵다. 예를 들어, 사람이 구별하기는 쉽지만, 인지적으로 색상별로 비교되는 색상으로 구성된 정성적인 팔레트를 만들어 내는 방법은 명확하지 않다. 컴퓨터에 사용되는 색상을 기술하는데 RGB를 사용하지만, 사람이 색상체계를 구축하는 색공간에 RGB체계만 사용할 이유는 없다. 이점은 사람과 컴퓨터가 다른 것이고, 이를 인정해야만 된다. \n색상모형은 대개 RGB처럼 3차원으로 이루어진다. 이는 인간의 망막에 세 가지 다른 수용체가 있다는 생리학적 사실 때문이다. RGB와 인간의 시각 체계에 대한 자세한 정보는 블로그에서 확인할 수 있다. 색상모형 차원이 인간이 인식할 수 있는 정보량과 더 잘 맞을수록 유용성이 커진다. 이러한 일치는 신중하게 만들어진 팔레트 생성을 가능하게 하며, 특정한 특징을 가진 색공간에 대한 이해를 넓힌다.\nRGB 색상체계는 인간의 인지체계와 잘 맞지 않는다. 적색, 녹색, 청색광을 탐지할 수 있는 광수용체를 갖기 때문에, 색을 인지하는 체험이 꼭 RGB 방식으로 분해된다는 것을 의미하지 않는다. 예를 들어, 적색과 녹색을 섞어 황색을 인지하는 체험은 생리학적 현실과 다르다. RGB의 대안 모형 중 하나는 HSV(Hue-Saturation-Value, 색상-채도-명도)모형 모형이다. 하지만 불행히도, 색상 선택에 어려움이 있는데, 이유는 색상 차원이 서로 중첩되기 때문이다.\n사람의 인지에 맞는 색 모형으로는 CIELUV와 CIELAB가 잘 알려져 있다. 이 중에서도 CIELUV의 변형인 HCL(Hue-Chroma-Luminance, 색상-채도-휘도) 모형 모형에 주목할 필요가 있다. Zeileis와 동료들(Zeileis, Hornik, 와/과 Murrell 2009) 2이 R 사용자들을 위해 개발한 colorspace 패키지는 HCL 색상 모형을 탐색하고 활용하는 데 큰 도움을 준다. colorspace 패키지는 ggplot2에서 RColorBrewer와 마찬가지로 잘 통합되어 있어, 사용자가 HCL 색상 모형을 데이터 시각화에 효과적으로 사용될 수 있게 되었다.\n\n\n\n\n\n\nHCL 색상모형 3차원\n\n\n\n\n\n색상(Hue) : 색상은 일반적으로 “색상이 뭐지?”라고 생각할 때 생각나는 것이다. 이해가 바로되는 쉬운 것이다! 각도로 주어지고 따라서 0 에서 360 까지 값을 갖는데, 무지개 도넛을 상상하면 된다.\n\n채도(Chroma) : 채도는 색상의 순수성이나 생생함을 나타낸다. 특정 색상이 회색과 섞일수록 채도는 낮아진다. 채도가 가장 낮을 때, 즉 0일 때는 순수한 회색을 나타낸다. 채도의 최대값은 휘도에 따라 달라진다.\n\n휘도(Lumiance) : 휘도는 명도(brightness), 명도(Lightness), 광도(intensity), 값(value)과 관련된다. 낮은 휘도는 어두움을 의미하고, 실제 검정색은 휘도가 0 이다. 높은 휘도는 밝음을 의미하고, 실제 흰색은 휘도가 1 이다.\n\n\n\n저자도 채도와 휘도를 이해하고 구별하는데 힘든 시간을 보냈다. 위에서 살펴봤듯이, 색체계는 서로 독립된 것이 아니고, 3차원 HCL 공간에 기이한 모형으로 정보를 제공하고 있다. 위컴의 ggplot2 책(Wilkinson 2011)에 나온 그림 9.2 이 HCL 색공간을 이해하는데 도움이 된다.\n\n\n\n\n\n그림 9.2: ggplot2 HCL 색공간\n\n\n위컴의 책에서 언급된 내용에 따르면, HCL 색 공간은 휘도에 따라 슬라이스로 나뉘어 도식화되어 있다. 각 슬라이스는 휘도가 낮은 값에서 높은 값 순으로 배열되며, 극단적인 휘도 값인 0과 100은 제외된다. 이는 각각 검은색과 흰색을 나타내기 때문이다.슬라이스 안에서, 중앙 부분은 채도가 0인 상태로 회색에 해당된다. 슬라이스의 가장자리로 갈수록 채도가 증가하여, 색상이 더 순수하고 진해진다. 이 때 색상은 각도로 매핑되어, 다양한 색상을 나타낼 수 있다.\ncolorspace 팩키지의 중요한 기여 중 하나는 사용자가 색상 공간을 합리적이고 유연하게 탐색할 수 있도록 하는 기능이다. 사용자는 패키지 함수들을 사용하여 다양한 색공간을 자유롭게 이동하고 변환할 수 있다. 반면, RColorBrewer 팩키지는 정교하게 제작된 팔레트를 제공하지만, 팔레트들이 고정되어 있다. 고정된 팔레트는 사용자가 특정한 요구사항이나 선호에 맞춰 색상을 조정하는 데 한계가 있다. colorspace 접근 방식(Zeileis, Hornik, 와/과 Murrell 2009)은 인지 기반 색상체계 사용을 지지하고 있다. 색공간에서 0의 위치가 가지는 중요성을 시연함으로써, 색상인식과 선택에 있어서 더 넓은 이해와 유연성을 제공한다. 따라서 데이터 시각화나 디자인 작업에서 사용자는 보다 정확하고 효과적인 색상선택을 할 수 있게 되었다.",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>색상</span>"
    ]
  },
  {
    "objectID": "theme_colors.html#viz-printer-cmyk",
    "href": "theme_colors.html#viz-printer-cmyk",
    "title": "\n9  색상\n",
    "section": "\n9.4 CMYK - 프린터 색상모형",
    "text": "9.4 CMYK - 프린터 색상모형\nCMYK 색상표는 시안(Cyan), 마젠타(Magenta), 옐로(Yellow), 블랙(Black = Key)를 원색으로 하여 명도가 낮아지는 감산혼합으로 주로 출력물 인쇄 혹은 사진 필림 현상에 사용되며 쿼크익스프레스, 일러스트레이터, 포토샵 등에서 CMYK 감산혼합을 지원한다. 현실적인 문제 때문에 RGB나 HSV보다 표현 가능한 색이 적은 것으로 알려져 있다. 3 4 \n학교에서 배운 감산 혼합 삼원색은 빨강, 노랑, 파랑이었지만, CMYK 색상모형은 생뚱맞게도 시안(Cyan), 마젠타(Magenta), 옐로(Yellow), 블랙(Black = Key)을 원색으로 한다. 이유는 빨강은 사실 자홍색(마젠타), 파랑은 청록색(시안)에 더 가깝기 때문이다. 우리가 잘못 알고 있던 것이다. RGB 색상과 CMYK 색상을 PDF 파일로 찍어 상호 비교해보자. 5\n\n\nRGB 색상 출력\n\n\n\n\n\n\n그림 9.3: RGB 색상\n\n\n\nCMYK 색상 출력\n\n\n\n\n\n\n그림 9.4: CMYK 색상",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>색상</span>"
    ]
  },
  {
    "objectID": "theme_colors.html#dataviz-color-brewer-viridis",
    "href": "theme_colors.html#dataviz-color-brewer-viridis",
    "title": "\n9  색상\n",
    "section": "\n9.5 RColorBrewer 와 viridis\n",
    "text": "9.5 RColorBrewer 와 viridis\n\n\n9.5.1 RColorBrewer\n색상선택은 논란도 많고 가장 많은 시간이 소요되는 분야다. 지리학자이자 색상 전문가인 Cynthia Brewer 교수는 출판 및 웹용으로 사용되는 색상표를 제작했고, RColorBrewer 패키지에 포함되어 있어, R 사용자들이 쉽게 접근하고 활용할 수 있다. RColorBrewer 패키지를 설치하고 사용하면, 다양한 색상 조합과 팔레트를 쉽게 탐색할 수 있다. 사용자는 display.brewer.all() 명령어를 통해 전체 팔레트를 한눈에 볼 수 있다. \n\nlibrary(RColorBrewer) # install.packages(\"RColorBrewer\")\ndisplay.brewer.all()\n\n\n\n\n\n\n그림 9.5: RColorBrewer 전체 색상표\n\n\ndisplay.brewer.all() 명령어를 통해 살펴보면 크게 세범주로 구분된 것이 먼저 눈에 띈다. 팔레트는 종류가 많지만 다음 세가지 범주에 속한다.\n\n\n순차적(sequential) : 순차적 팔레트는 한쪽 극단이 흥미롭고 다른 쪽 극단이 상대적으로 덜 흥미로운 데이터를 시각화하는 데 적합하다. 예를 들어, p-값이나 상관계수 같은 지표에 사용된다(단, 상관계수에서 1이 흥미로운 것은 양의 값을 가정한 경우다).\n\n정량적(quantitative) : 정량적 팔레트는 순서가 없는 범주형 데이터를 시각화하는 데 유용하다. 국가, 대륙 등이 이에 해당하며, 특정한 “쌍을 이루는” 팔레트도 있다. 예를 들어, 곡물의 종류나 실험군과 대조군 같은 이진 실험 요인이 이에 해당한다.\n\n발산하는(diverging) : 발산하는 팔레트는 극단적인 음수에서 양수까지의 범위를 가지는 데이터를 시각화하는 데 유용하다. 이런 유형의 데이터는 중간에 덜 흥미로운 지점을 지나면서 극단적인 값을 가진다. t-통계량, z-점수, 상관계수 등이 여기에 해당한다.\n\nRColorBrewer는 ColorBrewer 2.0에서 제공하는 색상 팔레트에 기반한 R 색상 패키지로, 데이터 시각화를 위한 다양한 색상 조합을 제공하며, 데이터 시각화 가독성과 해석력을 향상을 위한 발산(diverging), 연속(sequential), 범주형(qualitive) 데이터 유형에 대한 적합한 색상 팔레트가 포함되어 있다.\n\nlibrary(RColorBrewer) \n\npar(mfrow=c(1 ,3))\ndisplay.brewer.all(type=\"div\")  # 양쪽발산(diverging)\ndisplay.brewer.all(type=\"seq\")  # 연속형(sequential)\ndisplay.brewer.all(type=\"qual\") # 범주형(qualitive)\ninvisible(dev.off())\n\n\n\n\n\n\n그림 9.6: 유형별 색상 팔레트\n\n\n\n\nRColorBrewer 패키지를 사용하면 특정한 팔레트의 이름을 명시하여 해당 팔레트만을 볼 수 있습니다. 예를 들어, display.brewer.pal(n, name) 함수를 사용하면, ‘n’은 색상의 수를, ’name’은 보고 싶은 팔레트의 이름을 지정하여 해당 팔레트를 볼 수 있습니다. 이를 통해 데이터 시각화에 적합한 색상 조합을 선택하고 적용할 수 있다. 예를 들어, display.brewer.pal(5, \"Blues\") 명령어는 ’Blues’ 팔레트의 5가지 색상을 선택할 수 있다.\n\ndisplay.brewer.pal(n = 8, name = 'Dark2')\n\n\n\n\n\n\n그림 9.7: RColorBrewer 중 Dark2 팔렛트\n\n\n\n\npenguins 데이터셋을 활용하여 각 섬별로 펭귄 수를 집계해본 다음, Torgersen 섬 이름을 NA(결측값)으로 바꾼다. 변경된 데이터를 가지고 ggplot2 패키지로 막대 그래프를 만든다. 그래프에서 x축은 섬 이름, y축은 각 섬의 펭귄 수를 나타낸다. 각 막대는 섬 이름에 따라 다른 색으로 채우고 RColorBrewer “Accent” 팔레트를 사용한다. 결측값인 Torgersen 섬은 회색으로 표시된다. 색상을 그래프에 반영함으로써 각 섬에서 관찰된 펭귄 수를 시각적으로 쉽게 파악하고, 결측값도 눈에 띄게 할 수 있다.\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\npenguins |&gt; \n  count(island) |&gt; \n  mutate(island = if_else(island ==  \"Torgersen\", NA_character_, island)) |&gt; \n  ggplot(aes( x = island, y = n, fill = island)) +\n    geom_col() +\n    scale_fill_brewer(palette=\"Accent\", na.value=\"grey50\")\n\n\n\n\n\n\n그림 9.8: 팔머 펭귄 데이터 RColorBrewer Accent 팔렛트 적용트\n\n\n\n\n\n9.5.2 viridis\n2015년에 Stéfan van der Walt와 Nathaniel Smith는 파이썬의 matplotlib 패키지를 위한 새로운 색상체계를 설계했으며, 이를 SciPy 2015에서 발표했다. 이들의 작업 덕분에 R viridis 패키지에는 4가지 새로운 팔레트가 추가되었다. 이 패키지는 CRAN과 GitHub에서 이용할 수 있다. viridis 패키지는 상대적으로 새로 출시되어, 자세한 정보를 얻기 위해서는 직접 설치해보고 소품문을 읽고 직접 경험하기 바란다.\nggplot2와 viridis 패키지를 사용하여 palmerpenguins 데이터에 대한 범주형 시각화 예시를 살펴보자. palmerpenguins 데이터에는 남극 펭귄의 여러 특징이 포함되어 있으며, 펭귄종(species), 부리길이(bill_length_mm), 부리깊이(bill_depth_mm) 등 다양한 변수를 포함하고 있다.\n펭귄종에 따른 부리길이와 깊이 관계를 범주형 색상으로 시각화하는 코드를 만들어 보자. 먼저 필요한 패키지를 준비하고, 데이터를 불러온 다음, ggplot을 사용하여 그래프를 제작한다. scale_color_viridis_d() 함수는 범주형 변수(펭귄종, species)에 적합한 viridis 색상을 그래프에 반영했다.\n\n# 패키지 로드\nlibrary(ggplot2)\nlibrary(viridis)\nlibrary(palmerpenguins)\n\n# 데이터 불러오기\ndata(penguins)\n\n# ggplot을 사용한 시각화\nggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  geom_point() +\n  scale_color_viridis_d() +\n  theme_minimal() +\n  labs(title = \"펭귄종에 따른 부리 길이와 깊이\",\n       x = \"부리 길이 (mm)\",\n       y = \"부리 깊이 (mm)\",\n       color = \"펭귄종\")\n\n\n\n\n\n\n그림 9.9: 팔머 펭귄 데이터에 viridis 팔렛트 적용\n\n\n\n\n이 코드는 palmerpenguins 데이터 세트에서 각 펭귄 종에 따라 부리의 길이와 깊이를 점으로 나타내고, viridis 팔레트로 색상을 적용한 그래프를 생성합니다. scale_color_viridis_d() 함수는 범주형 변수에 적합한 viridis 색상을 반영했다.\n\n\n\n\n\n\nviridis 색상표\n\n\n\nviridis 색상표는 완벽하게 균등하게 지각되도록 설계되었고, 정규형식에서나 흑백으로 전환되었을 때도 마찬가지다. 또한 색각 이상을 갖는 독자도 올바르게 색상이 지각될 수 있도록 설계되었다.\n\n\n\n9.5.3 색각 이상\n색각 이상은 비색각 이상자와 원추세포의 차이로 인해 색상을 잘 구분하지 못하는 증상으로 색맹과 색약으로 구분된다. 색맹은 삼원색 중 특정 색상을 완전히 감지하지 못하는 것이며, 색약은 수용체에 문제로 감지는 할 수 있지만 다르게 보이게 된다. dichromat 팩키지(CRAN)는 2색시자에 대한 효과적인 색상조합을 선택하는데 도움이 된다. colorschems 목록에는 17 가지 색상조합이 담겨있는데, 적색과 녹색을 구별하는 능력이 없거나 예외적인 시력을 갖는 2색시자에게 적합하다. \n\n\n\n\n\n\n\n그림 9.10: 색각 이상 dichromat 색상표\n\n\n\n\ndichromat 패키지(Rogowitz 와/과 Treinish 1996) dichmat() 함수는 색상을 변환해서 다른 형태의 색맹에 근사적인 효과를 구현할 수 있어서, 후보 색상조합에 대한 효과를 평가할 수 있게 한다. data(\"dalton\") 명령어는 256 색상 팔레트를 표현하는 객체를 생성하는데, 정상 시야로 표현되는 것과, 적록(red-green) 색맹과 청녹(green-blue) 생맹 팔레트를 제공하고 있다.",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>색상</span>"
    ]
  },
  {
    "objectID": "theme_colors.html#색상적용-사례",
    "href": "theme_colors.html#색상적용-사례",
    "title": "\n9  색상\n",
    "section": "\n9.6 색상적용 사례",
    "text": "9.6 색상적용 사례\n색상을 지정하여 그래프를 제작하는 방법과 이미지에서 색상을 추출하여 그래프에 적용하는 기법을 살펴보면, 데이터 시각화에 깊이와 매력을 더한다. 정당 로고에서 추출한 색상으로 정당별 지지율 그래프를 만드는 것과 태극기 이미지에서 추출한 색상을 사용하여 데이터 시각화를 수행하는 사례는 색상의 선택과 적용이 시각적 표현에 어떻게 영향을 미칠 수 있는지를 가늠할 수 있다.\n\n9.6.1 정당 색상\n더블어민주당, 국민의힘, 정의당 웹사이트에서 각 정당 로고 및 주된 로고 색상을 확인할 수 있다. 이를 바탕으로 정당별 시각화 제작에 사용될 색상으로 팔레트를 생성하여 활용한다. \n\n# 각 정당별 색상\n민주당_2색상 &lt;- c(\"#00A0E2\", \"#004EA1\")\n민주당_4색상 &lt;- c(\"#8AC452\", \"#00AA7D\", \"#008CCD\", \"#004EA1\")\n\n국힘_3색상 &lt;- c(\"#FFFFFF\", \"#E61E2B\", \"#00B5E2\")\n국힘_6색상 &lt;- c(\"#EDB19D\", \"#F18070\", \"#BDE4F8\", \"#004C7E\", \"#112C56\")\n\n정의당_3색상 &lt;- c(\"#ffed00\", \"#e8306d\", \"#00a366\", \"#623e91\")\n\n무소속_색상 &lt;- \"#999999\"\n\n# 정당, 색상코드, 시각화\nparty_palette &lt;- c(\"민주당\" = 민주당_2색상[2], \n                   \"국민의힘\" = 국힘_3색상[2], \n                   \"정의당\" = 정의당_3색상[1], \n                   \"무소속\" = 무소속_색상)\n\ndf_colors &lt;- data.frame(\n  party = names(party_palette),\n  color = party_palette\n)\n\nggplot(df_colors, aes(x = 1, y = party, fill = color)) +\n  geom_tile() +\n  scale_fill_identity() +\n  theme_void() +\n  coord_fixed(ratio = 0.1) +\n  geom_text(aes(label = str_glue(\"{party} - {color}\")))\n\n\n\n\n\n\n그림 9.11: 정당별 색상 팔레트\n\n\n\n\n정당별 색상을 반영한 데이터 시각화 그래프 제작을 위해서 난수를 생성한 정당별 지지율 데이터를 만든 후에 정당색상을 반영한 그래프를 제작한다.\n\nset.seed(123456789)\nparty_name &lt;- c(\"민주당\", \"국민의힘\", \"정의당\", \"무소속\")\n\nvotes &lt;- c(runif(1, min=.4, max=.5),\n           runif(1, min=.4, max=.5),\n           runif(1, min=.0, max=.05),\n           runif(1, min=.0, max=.05))\n\ntibble(party_name, votes) |&gt; \n  mutate(party_name = factor(party_name, levels = c(\"민주당\", \"국민의힘\", \"정의당\", \"무소속\"))) |&gt; \n  ggplot(aes(x = party_name, y = votes, fill = party_name)) +\n    geom_col() +\n    scale_fill_manual(values = party_palette) +\n    scale_y_continuous(labels = scales::percent) +\n    labs(x = \"\",\n         y = \"지지율\",\n         fill = \"정당명\",\n         title = \"정당별 지지율\") \n\n\n\n\n\n\n그림 9.12: 정당별 색상 팔레트를 적용한 막대 그래프\n\n\n\n\n\n9.6.2 이미지 → 색상\n태극기 이미지에서 색상을 추출해 팔레트를 만들고 시각화하는 작업은 여러 단계로 진행된다. 먼저, magick 패키지를 사용해 태극기 이미지를 불러온다. 이미지에서 가장 많이 사용된 색상을 골라내고, 이를 16진수 색상 코드로 변환한다. 이렇게 얻은 색상 코드를 imager 패키지를 사용해 데이터프레임으로 변환한다. 마지막으로, 추출된 색상으로 구성된 팔레트를 시각화한다. 6\n\nlibrary(scales)\nlibrary(imager)\nlibrary(magick)\n\nflag_svg &lt;- image_read_svg(\"images/korean_flag.svg\")\n\nflag_palette &lt;- flag_svg |&gt; \n  image_resize(\"500\") |&gt; \n  image_quantize(max = 4, colorspace=\"RGB\") |&gt; \n  magick2cimg() |&gt; \n  RGBtoHSV() |&gt; \n  as.data.frame(wide=\"c\") %&gt;%  #3 making it wide makes it easier to output hex colour\n  mutate(hex=hsv(rescale(c.1, from=c(0,360)),c.2,c.3),\n         hue = c.1,\n         sat = c.2,\n         value = c.3) %&gt;%\n  count(hex, hue, sat,value, sort=T) %&gt;% \n  mutate(colorspace = \"RGB\") |&gt; \n  pull(hex)\n\nflag_colors_gg &lt;- tibble(colors = flag_palette) |&gt; \n  ggplot(aes(x = 1, y = 1:length(flag_palette), fill = colors)) + \n    geom_tile() +\n    scale_fill_identity() +\n    theme_void() + \n    coord_fixed(ratio = 0.2) +\n    geom_text(aes(label = str_glue(\"{colors}\")))  \n\n태극기 이미지를 ggplot으로 시각화한다.\n\nlibrary(ggimage)\n\nflag_image_gg &lt;- ggplot() +\n  geom_image(aes(x=0, y=0, image=\"images/korean_flag.svg\"), size=1) +\n  coord_cartesian(xlim=c(-1, 1), ylim=c(-1, 1)) +\n  theme_void()  \n\n태극기에서 추출한 색상을 바탕으로 막대그래프에 색상을 입혀 시각화한다.\n\nflag_penguin_gg &lt;- penguins |&gt; \n  count(island) |&gt; \n  mutate(island = if_else(island ==  \"Torgersen\", NA_character_, island)) |&gt; \n  ggplot(aes( x = island, y = n, fill = island)) +\n    geom_col() +\n    scale_fill_manual(values = flag_palette[2:4], na.value=\"grey50\") +\n    theme(legend.position = \"top\")\n\n태극기, 태극기 색상, 막대그래프 시각화를 한번에 요약하여 시각화한다.\n\nlibrary(patchwork)\n\nprint((flag_image_gg + flag_colors_gg) / flag_penguin_gg)\n\n\n\n\n\n\n그림 9.13: 태극기 이미지에서 추출한 색상을 활용한 시각화 그래프",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>색상</span>"
    ]
  },
  {
    "objectID": "theme_colors.html#연습문제",
    "href": "theme_colors.html#연습문제",
    "title": "\n9  색상\n",
    "section": "연습문제",
    "text": "연습문제\n객관식\n\nRGB 색상 모델에서 각각의 알파벳(R, G, B)이 의미하는 것은 무엇인가요?\n\nRed, Green, Blue\nRange, Gradient, Brightness\nReflect, Gloss, Blur\nRadiance, Glow, Beam\n\n\n\n\nHCL 색상 모델에서 HCL은 무엇을 나타내나요?\n\nHue, Chroma, Luminance\nHarmony, Contrast, Luminosity\nHue, Clarity, Lightness\nHigh, Color, Low\n\n\n\n\nCMYK 색상 모델에서 K는 무엇을 의미하나요?\n\nKolor\nKey (Black)\nKyan (Cyan variant)\nKinetic\n\n\n서술형\n\nRGB 색상 모델의 장점과 단점에 대해 설명해보세요.\n\n\n디지털 디자인에서 CMYK 색상 모델을 사용하는 이유는 무엇인가요?\n\n\n\n\n\nRogowitz, Bernice E, 와/과 Lloyd A Treinish. 1996. “Why should engineers and scientists be worried about color”. See URL http://www. research. ibm. com/people/l/lloydt/color/color. HTM.\n\n\nWilkinson, Leland. 2011. ggplot2: elegant graphics for data analysis by WICKHAM, H. Oxford University Press.\n\n\nZeileis, Achim, Kurt Hornik, 와/과 Paul Murrell. 2009. “Escaping RGBland: Selecting colors for statistical graphics”. Computational Statistics & Data Analysis 53 (9): 3259–70.",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>색상</span>"
    ]
  },
  {
    "objectID": "theme_colors.html#footnotes",
    "href": "theme_colors.html#footnotes",
    "title": "\n9  색상\n",
    "section": "",
    "text": "A Better Default Colormap for Matplotlib, SciPy 2015, Nathaniel Smith and Stéfan van der Walt↩︎\n알아봅시다 - 디스플레이 화질 구성 요소↩︎\n위키백과, “CMYK color model”↩︎\n블로그 아이디어, “CMYK 색상표”↩︎\nOne Tipe Per Day, “draw figures in CMYK mode in R”↩︎\nextracting colours from your images with image quantization↩︎",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>색상</span>"
    ]
  },
  {
    "objectID": "theme_ggplot.html",
    "href": "theme_ggplot.html",
    "title": "\n10  그래프 테마\n",
    "section": "",
    "text": "10.1 내장 테마\nggplot2 패키지에는 다양한 내장 테마가 있으며, 이를 활용하여 데이터를 시각화할 수 있다. palmerpenguins 데이터셋을 사용하여 물갈퀴 길이와 체중 사이의 관계를 앞서 작업한 기본 그래프를 바탕으로 다양한 테마를 적용하여 비교한다.\n펭귄 데이터셋을 사용하여 물갈퀴 길이와 체중 사이의 관계를 시각화하는 그래프를 draw_themes() 함수로 테마를 달리 적용하여 ggplot 그래프를 생성한 후에 리스트 객체로 저장한다.\n다양한 테마를 draw_themes() 함수에 인자로 넘기기 위해 themes_name과 themes_vector에 테마명과 테마 함수를 저장장 한 후 map2() 함수로 테마를 달리한 ggplot 그래프를 저장한다. 마지막으로, patchwork::wrap_plots() 함수를 사용하여 모든 그래프를 결합하여 하나의 그래프로 출력한다.\ndraw_themes &lt;- function(theme_name, theme_choice) {\n  penguins |&gt; \n    ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n      geom_point(aes(color = species, shape = species), size = 1) +\n      geom_smooth(method = \"lm\", se = FALSE, color = \"black\")  +\n      labs(\n        title = theme_name,\n        subtitle = \"물갈퀴 길이와 체중 회귀분석\",\n        x = \"물갈퀴 길이 (mm)\",\n        y = \"체중 (g)\",\n        color = \"펭귄종\",\n      ) +\n      guides(shape = \"none\") +\n      theme_choice() +\n      theme(legend.position = c(0.90, 0.15))    \n}\n\n## 테마명과 벡터\nthemes_name &lt;- c(\"theme_gray\", \"theme_bw\", \"theme_linedraw\", \n                 \"theme_light\", \"theme_dark\", \"theme_minimal\", \n                 \"theme_classic\", \"theme_void\", \"theme_test\")\n\nthemes_vector &lt;- c(theme_gray , theme_bw , theme_linedraw , \n                  theme_light , theme_dark , theme_minimal , theme_classic , \n                  theme_void , theme_test )\n\ntheme_output &lt;- map2(themes_name, themes_vector, draw_themes)\n\npatchwork::wrap_plots(theme_output)",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>그래프 테마</span>"
    ]
  },
  {
    "objectID": "theme_ggplot.html#내장-테마",
    "href": "theme_ggplot.html#내장-테마",
    "title": "\n10  그래프 테마\n",
    "section": "",
    "text": "그림 10.3: ggplot 내장 기본테마",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>그래프 테마</span>"
    ]
  },
  {
    "objectID": "theme_ggplot.html#hrbrthemes",
    "href": "theme_ggplot.html#hrbrthemes",
    "title": "\n10  그래프 테마\n",
    "section": "\n10.2 hrbrthemes\n",
    "text": "10.2 hrbrthemes\n\n밥 루디스(Bob Rudis)가 만든 hrbrthemes 패키지는 텍스트가 많은 비즈니스 프레젠테이션에 특히 적합한 테마와 테마 구성 요소를 제공한다. ggplot2 시각화에 세련되고 깔끔한 디자인을 추가해, 데이터 시각화가 더욱 명확하고 전문적으로 보이는 것이 특징이다. \nhrbrthemes 패키지는 두 가지 목표를 염두에 두고 있다. 타이포그래피 요소에 중점을 둔 기본테마를 제공하는 것으로 이를 위해서 다양한 레이블의 배치와 글꼴을 포함시켰다. 다른 한가지 목표는 생산성 향상에 중점을 둔다. 시각화 작업결과물은 블로그 게시글, 학술 논문, 프레젠테이션, 내부 보고서, 인쇄출판물 등 출판된다. 시각화 데이터 분석을 진행하는 동안 시각요소가 완벽할 필요는 없다. 작업을 확인하고 지지하는 역할을 하며, 완성된 제품에 대한 출발점에 불과하기 때문이다.\nhrbrthemes 패키지에 내장된 바로 사용할 수 있는 다양한 테마를 살펴보자. 먼저, hrbrthemes 패키지를 로드하고, hrbrthemes 테마명과 함수를 리스트에 저장한다. map2 함수를 사용하여 각 테마에 대한 ggplot 객체를 생성한 후, patchwork::wrap_plots 함수로 이들을 하나의 그래프로 결합한다. 이제 한눈에 hrbrthemes 패키지 테마를 적용한 그래프를 시각적으로 비교할 수 있다.\n\nlibrary(hrbrthemes)\n\nhrbr_themes_name &lt;- c(\"theme_ipsum\", \"theme_ipsum_ps\", \"theme_ipsum_es\", \"theme_ipsum_rc\", \"theme_ipsum_ps\", \"theme_ipsum_pub\", \"theme_ipsum_tw\", \"theme_modern_rc\", \"theme_ft_rc\")\n\nhrbr_themes_vector &lt;- c(theme_ipsum, theme_ipsum_ps, theme_ipsum_es, theme_ipsum_rc, theme_ipsum_ps, theme_ipsum_pub, theme_ipsum_tw, theme_modern_rc, theme_ft_rc)\n\nhrbr_theme_output &lt;- map2(hrbr_themes_name, hrbr_themes_vector, draw_themes)\n\nhrbrtheme_gg &lt;- patchwork::wrap_plots(hrbr_theme_output)\n\nhrbrtheme_gg\n\nragg::agg_jpeg(\"images/hrbrtheme_gg.jpeg\",\n               width = 10, height = 7, units = \"in\", res = 600)\nhrbrtheme_gg\ndev.off()\n\n{fig-hrbrtheme-gg}",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>그래프 테마</span>"
    ]
  },
  {
    "objectID": "theme_ggplot.html#ggthemes",
    "href": "theme_ggplot.html#ggthemes",
    "title": "\n10  그래프 테마\n",
    "section": "\n10.3 ggthemes\n",
    "text": "10.3 ggthemes\n\n제프리 아놀드(Jeffrey Arnold)가 제작한 ggthemes 패키지는 ggplot2를 위한 테마를 제공하는데, 에드워드 터프티(Edward Tufte), 스테픈 퓨(Stephen Few), ‘Fivethirtyeight’, ‘The Economist’, ‘Stata’, ‘Excel’, ‘The Wall Street Journal’ 등의 그래프 스타일을 참조한 것이다. 다양한 출처에서 영감을 받은 테마들은 데이터 시각화를 할 때 더 많은 선택지와 창의성을 제공하고, 사용자가 보다 매력적이고 명확한 시각적 표현을 만들 수 있게 도움을 준다. \nggthemes 패키지에 내장된 바로 사용할 수 있는 다양한 테마를 살펴보자. 먼저, ggthemes 패키지를 로드하고, ggthemes 테마명과 함수를 리스트에 저장한다. map2 함수를 사용하여 각 테마에 대한 ggplot 객체를 생성한 후, patchwork::wrap_plots 함수로 이들을 하나의 그래프로 결합한다. 이제 한눈에 ggthemes 패키지 테마를 적용한 그래프를 시각적으로 비교한다. 테마명에서 유명한 언론사, 소프트웨어, 시각화 유명인을 찾아볼 수 있다.\n\nlibrary(ggthemes)\n\nggthemes_name &lt;- c(\"theme_base()\",\"theme_calc()\",\"theme_clean()\",\n                   \"theme_economist()\", \"theme_economist_white()\", \n                   \"theme_excel()\", \"theme_excel_new()\", \"theme_few()\",\n                   \"theme_fivethirtyeight()\",\"theme_foundation()\",\n                   \"theme_gdocs()\",\"theme_hc()\",\"theme_igray()\",\"theme_map()\",\n                   \"theme_pander()\",\"theme_solarized_2()\",\"theme_solid()\",\n                   \"theme_stata()\",\"theme_tufte()\",\"theme_wsj()\")\n\nggthemes_vector &lt;- c(theme_base, theme_calc, theme_clean, \n                     theme_economist, theme_economist_white, theme_excel, \n                     theme_excel_new, theme_few, theme_fivethirtyeight,\n                     theme_foundation, theme_gdocs, theme_hc, theme_igray, \n                     theme_map, theme_pander, theme_solarized_2, \n                     theme_solid, theme_stata, theme_tufte, theme_wsj)\n\nggtheme_output &lt;- map2(ggthemes_name, ggthemes_vector, draw_themes)\n\nggtheme_gg &lt;- patchwork::wrap_plots(ggtheme_output)\n\nggtheme_gg\n\nragg::agg_jpeg(\"images/ggtheme_gg.jpeg\",\n               width = 10, height = 7, units = \"in\", res = 600)\nggtheme_gg\ndev.off()\n\n\n\n\n\n\n그림 10.4: ggthemes 테마 모음",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>그래프 테마</span>"
    ]
  },
  {
    "objectID": "theme_ggplot.html#wesanderson",
    "href": "theme_ggplot.html#wesanderson",
    "title": "\n10  그래프 테마\n",
    "section": "\n10.4 wesanderson\n",
    "text": "10.4 wesanderson\n\n웨스 앤더슨(Wes Anderson) 영화는 독특하고 눈에 띄는 스타일로 유명하다. 앤더슨 영화 스타일을 기반으로 한 색상 팔레트를 제공하는 R 패키지가 있다. wesanderson 패키지는 웨스 앤더슨 영화의 특징적인 색채와 미적 감각을 반영한 다양한 색상 팔레트를 포함하고 있어, 데이터 시각화에 독창적이고 매력적인 색조를 추가할 수 있다. 사용자는 이 팔레트를 이용하여 그래프나 차트에 독특한 시각적 스타일을 적용할 수 있으며, 이를 통해 데이터 시각화 작업에 예술적인 터치를 가미할 수 있다. \nwesanderson 패키지에 내장된 바로 사용할 수 있는 다양한 테마를 살펴보자. 먼저, wesanderson 패키지를 로드하고, wesanderson 테마명과 함수를 리스트에 저장한다. map2 함수를 사용하여 각 테마에 대한 ggplot 객체를 생성한 후, patchwork::wrap_plots 함수로 이들을 하나의 그래프로 결합한다. 이제 한눈에 wesanderson 패키지 테마를 적용한 그래프를 시각적으로 비교한다. 다즐링 주식회사, 그랜드 부다페스트 호텔, 문라이즈 킹덤 등 영화 제목을 색상 팔레트에서 찾아볼 수 있다.\n\nlibrary(wesanderson)\n\ndraw_wesanderson &lt;- function(palette_name, wesanderson_palette =\"Darjeeling1\") {\n  penguins |&gt; \n    ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n      geom_point(aes(color = species, shape = species), size = 1) +\n      geom_smooth(method = \"lm\", se = FALSE, color = \"black\")  +\n      labs(\n        title = palette_name,\n        subtitle = \"물갈퀴 길이와 체중 회귀분석\",\n        x = \"물갈퀴 길이 (mm)\",\n        y = \"체중 (g)\",\n        color = \"펭귄종\",\n      ) +\n      guides(shape = \"none\") +\n      theme_minimal() +\n      theme(legend.position = \"none\",\n            plot.subtitle  = element_text(family = \"MaruBuri\", size = 9),\n            axis.title.x   = element_text(family = \"MaruBuri\", size = 7),\n            axis.title.y   = element_text(family = \"MaruBuri\", size = 7)) +  \n      scale_color_manual(values= wes_palette(wesanderson_palette, n = 3))\n}\n\nwes_theme_output &lt;- map2(names(wes_palettes), names(wes_palettes), draw_wesanderson)\n\nwes_theme_gg &lt;- patchwork::wrap_plots(wes_theme_output)\n\nwes_theme_gg +\n    theme(legend.position = c(2.1, 0),\n          legend.justification = c(1, 0))\n\nragg::agg_jpeg(\"images/wes_theme_gg.jpeg\",\n               width = 10, height = 7, units = \"in\", res = 600)\nwes_theme_gg +\n    theme(legend.position = c(2.1, 0),\n          legend.justification = c(1, 0))\ndev.off()\n\n\n\n\n\n\n그림 10.5: 웨스 앤더슨 영화 테마",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>그래프 테마</span>"
    ]
  },
  {
    "objectID": "theme_ggplot.html#사용자-테마",
    "href": "theme_ggplot.html#사용자-테마",
    "title": "\n10  그래프 테마\n",
    "section": "\n10.5 사용자 테마",
    "text": "10.5 사용자 테마\n설치한 한글 글꼴을 다양한 그래프 요소에 반영한 사용자 맞춤 테마(theme_penguin)을 생성하고 색상은 wesanderson 패키지에서 Darjeeling1 5가지 색상을 사용하여 시각화한다. 생성된 theme_penguin 사용자 정의 테마로 ggplot() 함수를 사용하여 그래프를 만들고, wesanderson 패키지 다즐링 주식회사 Darjeeling1 팔레트 색상을 scale_color_manual() 함수로 반영한다. \n\nextrafont::loadfonts(\"win\")\n\ntheme_penguin &lt;- function() {\n  \n  theme_minimal() +\n  theme(\n      plot.title     = element_text(family = \"NanumSquare\", size = 18, face = \"bold\"),\n      plot.subtitle  = element_text(family = \"MaruBuri\", size = 13),\n      axis.title.x   = element_text(family = \"MaruBuri\"),\n      axis.title.y   = element_text(family = \"MaruBuri\"),\n      axis.text.x    = element_text(family = \"MaruBuri\", size = 11),\n      axis.text.y    = element_text(family = \"MaruBuri\", size = 11),\n      legend.title   = element_text(family = \"MaruBuri\", size=13),\n      plot.caption   = element_text(family = \"NanumSquare\", color = \"gray20\")\n  )\n}\n\ndarjeeling1_palette &lt;- wes_palette(\"Darjeeling1\", n = 5)\n\nggplot_penguins_gg &lt;- penguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n    geom_point(aes(color = species, shape = species), size = 3) +\n    geom_smooth(method = \"lm\", se = FALSE, color = \"black\")  +\n    labs(\n      title = \"물갈퀴 길이와 체중 회귀분석\",\n      subtitle = \"남극 파머 펭귄 데이터셋\",\n      x = \"물갈퀴 길이 (mm)\",\n      y = \"체중 (g)\",\n      color = \"펭귄종\",\n      caption = \"자료출처: palmerpenguins 패키지\"\n    ) +\n  guides(shape = \"none\") +\n  scale_color_manual(values =  darjeeling1_palette) +\n  theme_penguin()\n\nggplot_penguins_gg\n\nggsave(\"images/ggplot_penguins_gg.png\")\n\n\n\n\n\n\n그림 10.6: 웨스 앤더스 ‘다즐링 주식회사’ 색상을 반영한 그래프",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>그래프 테마</span>"
    ]
  },
  {
    "objectID": "theme_ggplot.html#그래프-자동-설정",
    "href": "theme_ggplot.html#그래프-자동-설정",
    "title": "\n10  그래프 테마\n",
    "section": "\n10.6 그래프 자동 설정",
    "text": "10.6 그래프 자동 설정\n작성한 테마를 매번 복사하여 붙여넣지 않고 .Rprofile 파일에 저장해 ggplot 시각화 때마다 자동으로 사용하는 방법을 알아보자. 자동화 작업을 위해 usethis 패키지 edit_r_profile() 함수를 사용한다. 이 함수를 실행시켜면 .Rprofile 파일이 열리고, 앞서 작성한 테마 코드를 추가할 수 있다. 파일에 테마 코드를 추가하고 저장한 후 R 세션을 재시작하면, 매번 ggplot을 사용할 때 자동으로 사용자 정의 테마(theme_penguin)를 불러 사용할 수 있게 되어서 시각화 작업을 더 효율적으로 수행할 수 있다.\n\nusethis::edit_r_profile()\n\ntheme_penguin() 테마를 ggplot2 패키지 theme_set()으로 설정하고 기본 색상을 정의하면 시각화 그래프에 반영하여 사용할 수 있다.\n\nsuppressWarnings(suppressMessages({\n\n  extrafont::loadfonts(\"win\")\n\n\n  ## 테마 (글꼴) -----------------------------\n  theme_penguin &lt;- function() {\n\n    # ggthemes::theme_tufte() +\n    ggplot2::theme_minimal() +\n\n      ggplot2::theme(\n        plot.title     = element_text(family = \"NanumSquare\", size = 18, face = \"bold\"),\n        plot.subtitle  = element_text(family = \"MaruBuri\", size = 13),\n        axis.title.x   = element_text(family = \"MaruBuri\"),\n        axis.title.y   = element_text(family = \"MaruBuri\"),\n        axis.text.x    = element_text(family = \"MaruBuri\", size = 11),\n        axis.text.y    = element_text(family = \"MaruBuri\", size = 11),\n        legend.title   = element_text(family = \"MaruBuri\", size=13),\n        plot.caption   = element_text(family = \"NanumSquare\", color = \"gray20\")\n      )\n  }\n\n  ## 색상\n  ### 웨스 앤더슨\n  color_palette &lt;- wesanderson::wes_palette(\"Darjeeling1\", n = 5)\n\n  ggplot2::theme_set(theme_penguin())\n\n}))\n\n.Rprofile 파일에 ggplot() 사용자 정의 테마가 지정되어 있기 때문에 새로 R 세션을 시작하면 theme_penguin() 테마 및 웨스 앤더스 color_palette 색상 팔레트도 사용할 수 있다.\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\npenguins_theme_gg &lt;- penguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n    geom_point(aes(color = species, shape = species), size = 3) +\n    geom_smooth(method = \"lm\", se = FALSE, color = \"black\")  +\n    labs(\n      title = \"물갈퀴 길이와 체중 회귀분석\",\n      subtitle = \"남극 파머 펭귄 데이터셋\",\n      x = \"물갈퀴 길이 (mm)\",\n      y = \"체중 (g)\",\n      color = \"펭귄종\",\n      caption = \"자료출처: palmerpenguins 패키지\"\n    ) +\n  guides(shape = \"none\") +\n  scale_color_manual(values =  color_palette) +\n  theme_penguin()\n\nragg::agg_jpeg(\"images/penguins_theme_gg.jpg\",\n              width = 10, height = 7, units = \"in\", res = 600)\npenguins_theme_gg\ndev.off()\n\n\n\n\n\n\n그림 10.7: 펭귄 데이터 사용자 테마 적용 그래프",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>그래프 테마</span>"
    ]
  },
  {
    "objectID": "theme_ggplot.html#연습문제",
    "href": "theme_ggplot.html#연습문제",
    "title": "\n10  그래프 테마\n",
    "section": "연습문제",
    "text": "연습문제\n객관식\n\n\nggplot2 패키지에서 기본으로 제공되는 테마의 수는 몇 개인가요?\n\n5개\n7개\n9개\n11개\n\n\n\n\n\nhrbrthemes 패키지의 주요 특징은 무엇인가요?\n\n데이터 시각화의 창의성 강화\n타이포그래피 요소에 중점\n빠른 시각화 속도\n다양한 색상 옵션 제공\n\n\n\n\n\nwesanderson 패키지는 어떤 특징을 가지고 있나요?\n\n고전적인 그래프 스타일 제공\n웨스 앤더슨 영화 스타일의 색상 팔레트\n최적화된 시각화 속도\n데이터 처리 기능\n\n\n서술형\n\n\nggplot2의 기본 테마와 사용자 정의 테마를 적용하는 방법에 대해 설명해보세요.\n\n\n데이터 시각화에 다양한 테마를 적용하는 것이 왜 중요한가요?",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>그래프 테마</span>"
    ]
  },
  {
    "objectID": "theme_gt.html",
    "href": "theme_gt.html",
    "title": "\n11  표 테마\n",
    "section": "",
    "text": "11.1 gt 표 작성하기\ngt 패키지는 R Tidyverse 생태계에 속한 표 제작 목적으로 특별히 제작된 패키지로 그래프 문법에 기반한 ggplot2 패키지에 친숙하신 저자는 쉽게 표도 gt 패키지를 사용해서 다양한 표 제작이 가능하다. 다음 예시에서는 palmerpenguins 데이터 패키지 penguins 데이터셋을 활용하여 “남극 펭귄 서식섬과 종 빈도표”를 제작한다.\npenguins_gt 변수에 저장된 gt 표를 저장한다. gt 패키지의 다양한 기능을 활용하여 복잡한 표도 손쉽게 작성할 수 있다는 것을 다시 확인할 수 있다.\nlibrary(tidyverse)\nlibrary(palmerpenguins)\nlibrary(gt)\nlibrary(gtExtras)\n\npenguins_gt &lt;- penguins |&gt; \n  count(species, island) |&gt; \n  pivot_wider(names_from = island, values_from = n, values_fill = 0) |&gt; \n  as_tibble() |&gt; \n  gt(rowname_col = \"species\") |&gt; \n    tab_header(\n      title = md(\"남극 펭귄 **서식섬과 종** 빈도표\"),\n      subtitle = md(\"`palmerpenguins` 데이터 패키지\")\n    ) |&gt; \n    grand_summary_rows(\n      columns = c(Biscoe, Dream, Torgersen),\n      fns = list(\n        '합계' = ~sum(.) \n      ),\n      fmt = ~ fmt_number(., use_seps = FALSE, decimals = 0),\n      missing_text = '-'\n    )  |&gt; \n    cols_align(\"center\") |&gt; \n    opt_row_striping() |&gt; \n    tab_source_note(\n      source_note = md(\"자료출처: `penguins` 데이터셋\")\n  )\n\npenguins_gt\n\n\n\n\n\n\n\n\n\n남극 펭귄 서식섬과 종 빈도표\n\n\n\npalmerpenguins 데이터 패키지\n\n\n\nBiscoe\nDream\nTorgersen\n\n\n\n\nAdelie\n44\n56\n52\n\n\nChinstrap\n0\n68\n0\n\n\nGentoo\n124\n0\n0\n\n\n합계\n168\n124\n52\n\n\n\n자료출처: penguins 데이터셋\n\n\n\n\n\n\n\n표 11.1: gt 패키지 활용 표 제작 사례",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>표 테마</span>"
    ]
  },
  {
    "objectID": "theme_gt.html#gt-표-작성하기",
    "href": "theme_gt.html#gt-표-작성하기",
    "title": "\n11  표 테마\n",
    "section": "",
    "text": "라이브러리 가져오기: tidyverse, palmerpenguins, gt, gtExtras, magick.\n\npenguins 데이터를 사용하여 종(species)과 서식섬(island)에 따른 빈도를 집계하고 표제작에 맞춰 피벗 테이블을 생성한다.\n\ngt() 함수를 이용하여 gt 표를 초기화하고, rowname_col 인자로 “species”를 지정하여 행 이름을 설정한다.\n\ntab_header() 함수로 표 제목과 부제목을 지정한다.\n\ngrand_summary_rows() 함수를 사용하여 각 서식섬(Biscoe, Dream, Torgersen) 합계를 계산한다.\n\ncols_align(\"center\")을 통해 텍스트를 가운데 정렬한다.\n\nopt_row_striping() 함수로 행에 스트라이핑을 추가하여 가독성을 높인다.\n\ntab_source_note() 함수로 표 출처를 표기한다.\n\n\n\n\n11.1.1 기본 색상과 스타일\n웹 프로그램을 제작할 때 HTML로 콘텐츠를 제작하고 CSS/SCSS 파일로 스타일을 적용하는 것처럼 유지보수성이 뛰어나고 가독성이 좋은 표를 제작하기 위해 저자가 익혀야 되는 필수적인 기본기 중 하나다. penguins_gt 표는 핵심 정보가 잘 요약되어 있지만, 색상이나 다른 외양 관련 설정은 기본설정값만 따르고 있다.\ngt 패키지 opt_stylize() 함수는 표 스타일링에 다양한 선택지를 제공한다. 미리 정의된 배경색, 선 색상, 선 스타일 등을 다르게 적용할 수 있어 스타일은 총 36개에 이른다. 표 테두리, 표 요약 부분과 스텁(stub)에 더 어두운 색상을 적용, 수직선 반영여부가 포함된다.\nR 코드 opt_colors 벡터에 총 6가지 색상(파란색, 청록색, 분홍색, 녹색, 붉은색, 회색) 중 5개 색상을 지정하고, draw_color_gt 함수를 이용하여 이 색상들을 penguins_gt 표에 opt_stylize 함수를 호출하여 표 색상을 적용한다.\n\nopt_colors &lt;- c(\"blue\", \"cyan\", \"green\", \"red\", \"gray\")\n\ndraw_color_gt &lt;- function(gt_color = \"blue\") {\n  penguins_gt |&gt; \n    opt_stylize(style = 1, color = gt_color)\n}                \n\ngt_colors_list &lt;- map(opt_colors, draw_color_gt)\n\n\nfor(i in 1:length(opt_colors)) {\n  gtsave(gt_colors_list[[i]], str_glue(\"images/gt_theme_{opt_colors[i]}.png\"))\n}\n\n\n\n\n\n\n\n\n그림 11.2: 색상별 gt 표\n\n\n\n\n\n11.1.2 스타일\ngt 패키지는 opt_stylize() 함수를 통해서 색상뿐만 아니라 스타일도 달리해서 표를 제작할 수 있다. gt 패키지 1 ~ 6까지 번호 총6가지 스타일 선택이 가능하고, 기본값은 1 로 설정되어 있고, 저자가 복잡한 설정 없이 번호를 지정함으로써 표 디자인을 빠르게 변경할 수 있다. 번호로 스타일을 선택하게 되면, 데이터 분석과정에서 다양한 표 스타일을 빠르게 시험하고 가장 적절한 표를 신속히 제작하는데 도움이 된다.\n\nopt_styles &lt;- 1:5\n\ndraw_style_gt &lt;- function(opt_sytle, gt_color = \"blue\") {\n  penguins_gt |&gt; \n    opt_stylize(style = opt_sytle, color = gt_color)\n}                \n\ngt_styles_list &lt;- map(opt_sytles, draw_style_gt)\n\n\nfor(i in 1:length(opt_styles)) {\n  gtsave(gt_styles_list[[i]], str_glue(\"images/gt_theme_style_{opt_styles[i]}.png\"))\n}\n\n\n\n\n\n\n\n\n그림 11.3: 스타일별 gt 표",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>표 테마</span>"
    ]
  },
  {
    "objectID": "theme_gt.html#gtextra",
    "href": "theme_gt.html#gtextra",
    "title": "\n11  표 테마\n",
    "section": "\n11.2 gtExtra\n",
    "text": "11.2 gtExtra\n\ngtExtras 패키지는 gt 패키지를 보완하여 더 미려한 표를 생성할 수 있도록 도와주는 목적으로 개발되었다. gt 패키지에서 구현되지 않은 기능을 추가하거나, 반복되는 코드를 줄이기 위한 래퍼(wrapper) 함수로 작성되었다. gt 패키지를 확장한 다양한 기능이 있지만 테마와 관련된 사항을 집중적으로 살펴보자. \nggplot2 패키지를 활용하여 그래프 문법에 맞춰 그래프를 제작한 경험이 있다면, 자주 theme_*() 함수를 사용했을 것이다. 마찬가지로 ggplot2 그래프 테마 theme_minimal(), theme_grey()에 대응되는 테마가 gtExtras 패키지에 gt_theme_538(), gt_theme_espn(), gt_theme_nytimes(), gt_theme_guardian(), gt_theme_dot_matrix(), gt_theme_dark(), gt_theme_excel(), gt_theme_pff() 포함되어 있다. 주목할 점은 언론사와 소프트웨어에서 사용되는 스타일이 대거 포함되어 있다는 점이다.\ngt_theme_espn() 함수는 gt 패키지로 생성된 표에 ESPN 테마를 적용한다. 이 함수는 gt 테이블 객체(gt_tbl 클래스)를 인자로 받으며, 선택적으로 gt::table_options()에 전달할 추가 인자를 받을 수 있다. 반환 값은 gt_tbl 클래스의 객체이다. 다음은 다른 테마 함수들에 대한 간략한 설명이다:\n\n\n\n\n\n\n테마명\n테마 설명\n\n\n\ngt_theme_538()\nFiveThirtyEight 스타일 테마 적용\n\n\ngt_theme_espn()\nESPN 스타일 테마 적용\n\n\ngt_theme_nytimes()\nNew York Times 스타일 테마 적용\n\n\ngt_theme_guardian()\n가디언진(The Guardian) 스타일 테마 적용\n\n\ngt_theme_dot_matrix()\n도트 매트릭스 스타일 테마 적용\n\n\ngt_theme_dark()\n어두운 배경 테마 적용\n\n\ngt_theme_excel()\n마이크로소프트 엑셀 스타일 테마 적용\n\n\ngt_theme_pff()\nPFF(Pro Football Focus, 스포츠 분석회사) 스타일 테마 적용\n\n\n\n언론사와 미국 풋볼 리그 스포츠 분석에 특화된 PFF 스타일을 표에 적용해보자.\n\ngtExtra_themes &lt;- c(gt_theme_538, gt_theme_espn, gt_theme_nytimes, gt_theme_guardian, gt_theme_pff)\n\ngtExtra_themes_names &lt;- c(\"gt_theme_538\", \"gt_theme_espn\", \"gt_theme_nytimes\",\n                          \"gt_theme_guardian\",\"gt_theme_pff\")\n\ndraw_gtExtras_theme &lt;- function(gt_theme, gtExtra_themes_names) {\n  penguins_gt |&gt; \n    gt_theme() |&gt; \n    tab_header(\n      title = md(\"남극 펭귄 **서식섬과 종** 빈도표\"),\n      subtitle = gtExtra_themes_names)\n}\n\n# draw_gtExtras_theme(gtExtra_themes[5][[1]])\n## gtExtras 테마적용 표 -------------------\n\ngtExtra_styles_list &lt;- vector(mode =\"list\", length = length(gtExtra_themes))\n\nfor(i in 1:length(gtExtra_themes)) {\n  gtExtra_styles_list[[i]] &lt;-  draw_gtExtras_theme(gtExtra_themes[i][[1]], gtExtra_themes_names[i])\n}\n\n## 테마 표 png 파일 저장 -------------------\n\ngtExtras_path_filenames &lt;- vector(mode = \"character\", length = length(gtExtra_themes))\n\nfor(i in 1:length(gtExtra_themes)) {\n  gtExtras_path_filenames[i] &lt;-  str_glue(\"images/gtExtras_theme_{gtExtra_themes_names[i]}.png\")\n}\n\nfor(i in 1:length(gtExtra_themes)) {\n  gtsave(gtExtra_styles_list[[i]],\n         str_glue(\"images/gtExtras_theme_{gtExtra_themes_names[i]}.png\"))\n}\n\n\n\n\n\n\n\n\n그림 11.4: gtExtras 테마 적용 표",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>표 테마</span>"
    ]
  },
  {
    "objectID": "theme_gt.html#사용자-정의-테마",
    "href": "theme_gt.html#사용자-정의-테마",
    "title": "\n11  표 테마\n",
    "section": "\n11.3 사용자 정의 테마",
    "text": "11.3 사용자 정의 테마\n사용자 정의 테마의 필요성은 다양하며 주로 보고서나 PPT 발표에서 중요한 역할을 한다. 동일한 스타일과 구성을 가진 표를 사용하면 데이터를 쉽고 빠르게 이해할 수 있고, 일관된 스타일은 전문성을 강조하고, 독자에게 깊은 인상을 남길 수 있다. \ngtExtras와 같은 패키지에서 제공되는 테마는 코드 한 줄로 빠르고 깔끔한 표를 만들 수 있어 시간을 절약할 수 있다는 큰 장점이 있지만, 특정 요구사항이나 브랜딩 지침을 완전히 맞춤화하기 쉽지 않고, 복잡한 데이터 구조나 특별한 시각화 요구사항을 충족시키는 데에도 한계가 있다.\n사용자 정의 테마를 개발함으로써 gtExtras에서 제공하는 테마처럼 표 제작을 빠르고 편하게 지원할 수 있으면서도, 저자가 필요로 하는 브랜드나 스타일을 반영할 수 있다. 이렇게 하면 표가 더 전문적이면서도 개성있게 작성할 수 있다.\n\n11.3.1 gtExtras 확장\npenguins_gt라는 기존 gt 표 객체에 gt_theme_538() 테마를 선택하고 글꼴, 색상, 정렬 등 세부적인 작업을 진행하고 그 결과를 .png 파일로 저장한다. gt 패키지는 tidyverse 생태계 일원으로 파이프 연산자를 통해 세부적인 기능을 긴밀히 조합하여 단순한 코드로 제작되지만 최종 결과물로 상당히 높은 난이도를 갖는 표를 제작할 수 있다.\n\ngt_theme_538(): FiveThirtyEight 스타일 테마 적용\ntab_options(): 테이블의 글꼴, 제목 크기, 배경색 등 다양한 표 선택옵션 설정\ncols_align(): 숫자형 열은 가운데 정렬하고, 문자형 열은 자동 정렬\ntab_style(): “MaruBuri” 글꼴과 굵은 글씨체를 제목, 본문, 열에 적용\ngtsave(): 최종적으로 작업한 표를 PNG 이미지로 저장\n\n\n\npenguins_theme_gt &lt;- penguins_gt |&gt; \n  gt_theme_538() |&gt; \n  tab_options(\n    table.font.names =\"NanumSquare\",    \n    heading.title.font.size = px(26),\n    heading.subtitle.font.size = px(16),    \n    heading.background.color = \"transparent\", \n    column_labels.font.weight = 'bold',\n    table_body.hlines.width = px(0),\n    data_row.padding = px(6),\n    heading.align = 'center',\n    stub.background.color = \"#ffffff\",\n    stub.font.weight = \"bold\",\n    source_notes.font.size = px(10),\n    row.striping.include_table_body = TRUE\n  ) |&gt; \n  cols_align( align = \"center\", columns = where(is.numeric)) |&gt; \n  cols_align( align = \"auto\", columns = where(is.character)) |&gt; \n  ## 글꼴 달리 적용\n  tab_style(\n    style = cell_text(\n      font = \"MaruBuri\",      \n      weight = 'bold' \n    ),\n    locations = cells_title(groups = 'subtitle')\n  ) |&gt; \n  tab_style(\n    style = cell_text(\n      font = \"MaruBuri\",      \n      weight = 'bold' \n    ),\n    locations = cells_body()\n  ) |&gt; \n  tab_style(\n    style = cell_text(\n      font = \"MaruBuri\",      \n      weight = 'bold' \n    ),\n    locations = cells_column_labels()\n  ) |&gt; \n  tab_style(\n    style = cell_text(\n      font = \"MaruBuri\",      \n    ),\n    locations = cells_source_notes()\n  )\n\n# penguins_theme_gt |&gt; \n#   gtsave(filename = \"images/penguins_theme_gt.png\")\n\n\n표 11.2: gt 사용자 정의 테마 적용 표\n\n\n\n\n11.3.2 gt_theme_hangul() 테마\ngt_theme_538() 함수처럼 사용자 정의 함수를 gt_theme_hangul() 테마명을 지정해 두면 모든 표에 통일성을 유지한 테마를 간편하게 적용시킬 수 있다. \ngt_tbl 데이터프레임을 입력받아 gt_theme_538()을 기본표 테마로 지정하고, tab_options() 함수를 통해 글꼴, 제목 크기, 배경색 등을 설정하고, 나눔스퀘어(NanumSquare), 마루부리(MaruBuri) 글꼴을 사용하여 한글 표에 더 적합한 스타일을 적용하고, cols_align()과 tab_style() 함수를 사용해서 숫자형 열(칼럼)은 가운데 정렬시키고, 문자형 열은 자동 정렬토록 하고, 특정 셀에 굵은 글씨체와 각기 다른 글꼴을 적용하여 좀더 독특하고 전문적인 느낌을 심는다. tab_style() 기능을 이용해 표 홀수 번째 행에만 회색 배경(‘grey90’)을 적용하여 가독성을 높게 한다. 마지막으로 사용자 정의 테마 함수도 예를 들어 기억하기 좋게 gt_theme_hangul()으로 작명하여 문서에서 표가 필요한 부분에 별도 검색작업 없이 적용시킬 수 있도록 한다.\n\ngt_theme_hangul &lt;- function(gt_tbl) {\n  \n  # Grab number of rows of data from gt object\n  n_rows &lt;- nrow(gt_tbl$`_data`)\n  \n  gt_tbl |&gt; \n    gt_theme_538() |&gt; \n    tab_options(\n      table.font.names =\"NanumSquare\",    \n      heading.title.font.size = px(26),\n      heading.subtitle.font.size = px(16),    \n      heading.background.color = \"transparent\", \n      column_labels.font.weight = 'bold',\n      table_body.hlines.width = px(0),\n      data_row.padding = px(6),\n      heading.align = 'center',\n      stub.background.color = \"#ffffff\",\n      stub.font.weight = \"bold\",\n      source_notes.font.size = px(10),\n      row.striping.include_table_body = FALSE\n    ) |&gt; \n    cols_align( align = \"center\", columns = where(is.numeric)) |&gt; \n    cols_align( align = \"auto\", columns = where(is.character)) |&gt; \n    ## 글꼴 달리 적용\n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",      \n        weight = 'bold' \n      ),\n      locations = cells_title(groups = 'subtitle')\n    ) |&gt; \n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",      \n        weight = 'bold' \n      ),\n      locations = cells_body()\n    ) |&gt; \n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",      \n        weight = 'bold' \n      ),\n      locations = cells_column_labels()\n    ) |&gt; \n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",      \n      ),\n      locations = cells_source_notes()\n    ) |&gt; \n    tab_style(\n      style = cell_fill(color = 'grey90'),\n      locations = cells_body(rows = seq(1, n_rows, 2))\n    )    \n}\n\npenguins_gt |&gt; \n  gt_theme_hangul()\n\n\n\n\n\n\n\n\n남극 펭귄 서식섬과 종 빈도표\n\n\n\npalmerpenguins 데이터 패키지\n\n\n\nBiscoe\nDream\nTorgersen\n\n\n\n\nAdelie\n44\n56\n52\n\n\nChinstrap\n0\n68\n0\n\n\nGentoo\n124\n0\n0\n\n\n합계\n168\n124\n52\n\n\n\n자료출처: penguins 데이터셋\n\n\n\n\n\n\n그림 11.5: 사용자 정의 gt 테마 적용 사례",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>표 테마</span>"
    ]
  },
  {
    "objectID": "theme_gt.html#rprofile-설정작업",
    "href": "theme_gt.html#rprofile-설정작업",
    "title": "\n11  표 테마\n",
    "section": "\n11.4 .Rprofile 설정작업",
    "text": "11.4 .Rprofile 설정작업\n.Rprofile 파일에 테마 함수를 반영시키면 R 세션을 시작할 때마다 테마가 자동으로 로드되어 일일이 코드를 실행할 필요가 없어 작업 효율성을 크게 높여줌은 물론, 프로젝트 간 일관된 스타일과 브랜딩을 유지할 수 있다. 코드 작성 측면에서 테마 함수를 .Rprofile에 추가하여 코드 재사용성을 높이고, 테마 관련 설정을 한 곳에서 관리할 수 있게 함으로써 작업 일관성과 전문성이 높아져 시간과 노력을 크게 절약할 수 있다. \n\n\n\n\n\ngraph LR;\n\n  A[\"테마 스크립트 &lt;br&gt;생성\"] --&gt; B[\"테마 함수&lt;br&gt; 작성\"];\n  B --&gt; C[\".Rprofile &lt;br&gt; 파일 반영\"];\n  C --&gt; D[\"테마 자동 &lt;br&gt; 로딩\"];\n  D --&gt; E[\"프로젝트 &lt;br&gt; 테마 적용\"];\n\n\n\n\n그림 11.6: gt 표 테마 적용 작업흐름\n\n\n\n\n\n작성한 테마를 매번 코드를 “복사하여 붙여넣기” 하여 사용하는 대신 .Rprofile 파일에 반영하여 매번 gt 표를 제작할 때마다 gt_theme_hangul() 테마를 적용하는 방법은 다음과 같다. 먼저, usethis 패키지 edit_r_profile() 함수를 호출하여 앞서 작성한 테마를 반영한다.\n\nusethis::edit_r_profile()\n\ngt_theme_hangul() 테마를 gt 표 객체에 반영한다. 스크립트에서부터 시작하여 작성한 함수를 .Rprofile 파일에 복사하여 붙여넣는 것으로 작업은 완료된다.\n\nlibrary(gt)\nlibrary(gtExtras)\n\ngt_theme_hangul &lt;- function(gt_tbl) {\n\n  # Grab number of rows of data from gt object\n  n_rows &lt;- nrow(gt_tbl$`_data`)\n\n  gt_tbl |&gt;\n    gt_theme_538() |&gt;\n    tab_options(\n      # column_labels.background.color = '#1E61B0', # R logo 파란색\n      table.font.names =\"NanumSquare\",\n      heading.title.font.size = px(26),\n      heading.subtitle.font.size = px(16),\n      heading.background.color = \"transparent\",\n      column_labels.font.weight = 'bold',\n      table_body.hlines.width = px(0),\n      data_row.padding = px(6),\n      heading.align = 'center',\n      stub.background.color = \"#ffffff\",\n      stub.font.weight = \"bold\",\n      source_notes.font.size = px(10),\n      row.striping.include_table_body = FALSE\n    ) |&gt;\n    cols_align( align = \"center\", columns = where(is.numeric)) |&gt;\n    cols_align( align = \"auto\", columns = where(is.character)) |&gt;\n    ## 글꼴 달리 적용\n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",\n        weight = 'bold'\n      ),\n      locations = cells_title(groups = 'subtitle')\n    ) |&gt;\n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",\n        weight = 'bold'\n      ),\n      locations = cells_body()\n    ) |&gt;\n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",\n        weight = 'bold'\n      ),\n      locations = cells_column_labels()\n    ) |&gt;\n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",\n      ),\n      locations = cells_source_notes()\n    ) |&gt;\n    tab_style(\n      style = cell_fill(color = 'grey90'),\n      locations = cells_body(rows = seq(1, n_rows, 2))\n    )\n}\n\n.Rprofile 파일에 gt 사용자 정의 테마가 지정되어 있기 때문에 새로 R 세션을 시작하면 gt_theme_hangul() 테마를 프로젝트 어디에서든지 사용할 수 있다.\n\noriginal_penguins_gt &lt;- penguins |&gt; \n  drop_na() |&gt; \n  count(species, sex) |&gt; \n  pivot_wider(names_from = sex, values_from = n, values_fill = 0) |&gt; \n  janitor::adorn_totals(where = \"col\", name = \"합계\") |&gt; \n  rename(펭귄종 = species, 암컷 = female, 수컷 = male) |&gt; \n  as_tibble() |&gt; \n  gt(rowname_col = \"펭귄종\") |&gt; \n    tab_header(\n      title = md(\"남극 펭귄 **암수와 종** 빈도표\"),\n      subtitle = md(\"`palmerpenguins` 데이터 패키지\")\n    ) |&gt; \n    grand_summary_rows(\n      columns = c(펭귄종, 암컷, 수컷),\n      fns = list(\n        '합계' = ~sum(.) \n      ),\n      fmt = ~ fmt_number(., use_seps = FALSE, decimals = 0),\n      missing_text = '-'\n    )  |&gt; \n    cols_align(\"center\") |&gt; \n    opt_row_striping() |&gt; \n    tab_source_note(\n      source_note = md(\"자료출처: `penguins` 데이터셋\")\n  )\n\noriginal_penguins_gt |&gt; \n  gtsave(\"images/rprofile_original.png\")\n\ntheme_penguins_gt &lt;- original_penguins_gt |&gt; \n  gt_theme_hangul()\n\ntheme_penguins_gt |&gt; \n  gtsave(\"images/rprofile_hangul_theme.png\")\n\n\n\n\n\n\n\n\n\n\n\n\n그림 11.7: gt_theme_hangul() 테마 적용 전\n\n\n\n\n \n\n\n\n\n\n\n\n그림 11.8: gt_theme_hangul() 테마 적용 후",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>표 테마</span>"
    ]
  },
  {
    "objectID": "theme_gt.html#연습문제",
    "href": "theme_gt.html#연습문제",
    "title": "\n11  표 테마\n",
    "section": "연습문제",
    "text": "연습문제\n객관식\n\n\ngt 패키지는 어떤 프로그래밍 언어의 생태계에 속해 있나요?\n\nPython\nR\nJavaScript\nC++\n\n\n\n\n\ngtExtras 패키지의 주요 기능은 무엇인가요?\n\n데이터 처리 속도 향상\n표 시각화 향상\n통계 분석 기능 추가\n자동 코드 생성\n\n\n\n\n사용자 정의 테마를 개발하는 이유는 무엇인가요?\n\n속도 최적화\n보안 강화\n개성과 전문성 반영\n호환성 향상\n\n\n서술형\n\n\ngt 패키지를 사용하여 표를 제작할 때 고려해야 할 디자인 요소들은 무엇인가요?\n\n\n\ngtExtras 패키지를 사용하여 표에 적용할 수 있는 다양한 테마의 예시를 들어보세요.",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>표 테마</span>"
    ]
  },
  {
    "objectID": "dw_website.html",
    "href": "dw_website.html",
    "title": "12  웹사이트와 블로그",
    "section": "",
    "text": "12.1 웹사이트\n저작물을 파일형태 뿐만 아니라 웹사이트에 공유하는 것은 코로나19로 촉발된 디지털 전환(Digital Transformation) 시대에 과학기술 종사자 뿐만 아니라 현대를 사는 누구나 갖춰야 하는 보편적인 기술로 자리잡아 가고 있다. 통상 http://netlify.com/ 혹은 https://github.com/ 웹사이트에서 제공하는 정적 웹사이트(Static Website) 기능을 활용하여 제작된 블로그나 웹사이트를 통해 공유하는 것이 데이터 과학자 사이에 어느새 일반화되었다.\n과학기술 저작물을 정적 웹사이트에 호스팅하여 공유한다는 것은 지금까지와는 다른 기술적 배경을 가지기 때문에 이러한 문제를 해결하기 위해 몇년전 distill 팩키지가 방향을 제시했다. distill 팩키지로 블로그 혹은 웹사이트 과학기술 콘텐츠 공유를 공유한 웹사이트를 종종 구글링 과정에서 살펴봤을 것이다.\n저작 웹사이트를 RStudio + 쿼토(quarto) 를 조합하여 로컬에서 정적 웹사이트를 먼저 제작하고 공유와 배포는 GitHub Pages, Netlify, 쿼토 펍(Quarto Pub) 등으로 별다른 비용없이 무료로 출판할 수 있다.",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>웹사이트와 블로그</span>"
    ]
  },
  {
    "objectID": "dw_website.html#웹사이트",
    "href": "dw_website.html#웹사이트",
    "title": "12  웹사이트와 블로그",
    "section": "",
    "text": "그림 12.1: (정적) 웹사이트 배포",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>웹사이트와 블로그</span>"
    ]
  },
  {
    "objectID": "dw_website.html#project-setup",
    "href": "dw_website.html#project-setup",
    "title": "12  웹사이트와 블로그",
    "section": "12.2 프로젝트 생성",
    "text": "12.2 프로젝트 생성\n쿼토(quarto) 설치하고 정적 웹사이트 제작을 위한 프로젝트를 준비한다. 문서로 웹사이트 개발을 위한 RStudio IDE를 통합개발환경으로 선택한 경우 File → New Project ... → Project Type 에서 Quarto Website를 선택한다.\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n그림 12.2: (정적) 웹사이트 프로젝트 선택과정\n\n\n\n다음 단계로 웹사이트가 담길 디렉토리를 지정하고 웹사이트 디렉토리를 생성하고 Create Project 버튼을 를 클릭한다. 쿼토 웹사이트 프로젝트가 생성되면 웹사이트 제작을 위한 기본 골격이 제시된다. _quarto.yml 파일에 웹사이트 기본 정보가 담겨지고 각 웹페이지는 index.qmd, about.qmd 파일로 저작한다.\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n그림 12.3: 쿼토 웹사이트 프로젝트 생성",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>웹사이트와 블로그</span>"
    ]
  },
  {
    "objectID": "dw_website.html#project-writing",
    "href": "dw_website.html#project-writing",
    "title": "12  웹사이트와 블로그",
    "section": "12.3 웹사이트 저작",
    "text": "12.3 웹사이트 저작\n문서의 구조를 정의하는 _quarto.yml 파일에 웹사이트 문법을 적용하여 웹페이지는 .qmd 파일, 외양은 .css 혹은 .scss 파일에 정리한다. 관련하여 웹사이트를 구성하는 이미지, 동영상, 소리를 비롯한 각종 자산(assets)도 웹페이지에 잘 담기도록 저작한다.\n쿼토 웹사이트 프로젝트는 웹사이트 기본골격을 다음 파일과 디렉토리를 통해 제공된다. _site/ 디렉토리는 쿼토 웹사이트를 컴파일하게 되면 자동 생성된다. _site/ 디렉토리에 index.qmd 파일을 컴파일한 index.html 파일을 비롯한 정적 웹사이트 저작을 위한 각종 파일과 디렉토리로 채워진다.\n쿼토 웹사이트를 컴파일하는 방식은 Ctrl + Shift + K 단축키를 누르거나, 상단 Render 버튼을 클릭하거나, CTRL + SHIFT + B 단축키를 누르거나, Build에 Render Website를 클릭한다.\n\n_quarto.yml\nindex.rmd\nabout.rmd\n_site/\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n그림 12.4: 로컬 웹사이트 컴파일\n\n\n\n_site/ 디렉토리는 정적 웹사이트가 배포되는 디렉토리로,\n기본적으로 http://netlify.com/를 상정한 경우 _site/를 사용하지만, docs/로 바꿔주게 되면 GitHub Pages 웹호스팅으로 사용하여 배포할 수 있게 된다. GitHub Pages 배포를 위해 _quarto.yaml 파일에 output-dir: docs을 추가하게 되면 정적 웹사이트가 _docs 폴더에 담기게 된다.\n요약하면 _quarto.yml 파일을 열어 output_dir: 설정이 없는 경우 output_dir: docs로 지정하고, 이미 존재하는 경우 output_dir: 값을 _site → docs으로 변경한다. 그리고 나서 쿼토 웹사이트를 빌드시키면 웹사이트 전체가 docs/ 디렉토리에 저장된다. 이것을 GitHub 저장소에 업로드하거나 push 해서 올리게 되면 블로그 웹사이트가 https://&lt;사용자명&gt;.github.io/&lt;저장소명&gt;/index.html을 통해 배포된다.\n\n\nproject:\n  type: website\n  \n\n\n\nproject:\n  type: website\n  output-dir: docs",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>웹사이트와 블로그</span>"
    ]
  },
  {
    "objectID": "dw_website.html#theme-distill",
    "href": "dw_website.html#theme-distill",
    "title": "12  웹사이트와 블로그",
    "section": "12.4 외양 - 글꼴, 색상 등",
    "text": "12.4 외양 - 글꼴, 색상 등\n지금까지 전반적인 웹사이트 생성과 웹페이지 콘텐츠 작성과 관련된 전반적인 작업흐름에 집중했다면 글꼴, 색상 등 외양을 바꾸면 근사한 웹사이트로 탈바꿈시킬 수 있다. 특히 쿼토는 부츠트랩 5(Bootstrap 5)를 지원하기 때문에 SCSS 변수 설정을 통해 멋진 웹사이트를 꾸밀 수 있다. \n글꼴만 한글로 바꿔 tidyverse.css를 저장한다. 기본 아이디어는 구글 글꼴 웹사이트 https://fonts.google.com/ 에서 한글 글꼴을 가져와서 웹사이트 제목과 텍스트에 글꼴을 저작자의 선택에 맞춰 반영한다. 수정한 tidyverse.css 파일 일부는 다음과 같다.\n@import url('https://fonts.googleapis.com/css2?family=Sunflower');\n@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR');\n@import url('https://fonts.googleapis.com/css2?family=Gaegu');\n\nhtml {\n  /*-- Main font sizes --*/\n  --title-size:      50px;\n  --body-size:       1.06rem;\n  --code-size:       14px;\n  --aside-size:      12px;\n  --fig-cap-size:    13px;\n  /*-- Main font colors --*/\n  --title-color:     #000000;\n  --header-color:    rgba(0, 0, 0, 0.8);\n  --body-color:      rgba(0, 0, 0, 0.8);\n  --aside-color:     rgba(0, 0, 0, 0.6);\n  --fig-cap-color:   rgba(0, 0, 0, 0.6);\n  /*-- Specify custom fonts ~~~ must be imported above   --*/\n  --heading-font:    'Sunflower', sans-serif;\n  --mono-font:       \"DM Mono\", monospace;\n  --body-font:       'Noto Sans KR', sans-serif;\n  --navbar-font:     'Gaegu', cursive;\n}",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>웹사이트와 블로그</span>"
    ]
  },
  {
    "objectID": "dw_website.html#deployment-setup",
    "href": "dw_website.html#deployment-setup",
    "title": "12  웹사이트와 블로그",
    "section": "12.5 웹사이트 배포",
    "text": "12.5 웹사이트 배포\n\n12.5.1 GitHub Pages 출판\nhttps://&lt;사용자명&gt;.github.io/ 저장소는 매우 특별한 GitHub 저장소다. 따라서, GitHub 저장소 명칭을 &lt;사용자명&gt;.github.io 으로 생성해야 한다. 예를 들어, statkclee.github.io 와 같이 사용자계정을 github.io와 붙여 먼저 판다. 그리고 나서, 상단 Settings로 들어간 다음 GitHub Pages 설정을 한다. 이때 GitHub 저장소의 특정 디렉토리 docs/ 디렉토리에 담긴 내용 전부가 정적 웹사이트에 게시되는 내용이 된다. 즉, docs/index.html → https://&lt;사용자명&gt;.github.io/&lt;저장소명&gt;/index.html로 바뀌어 웹사이트 생성 및 배포가 완료된다. \n\n\n\n\n\n\n그림 12.5: 정적 웹사이트 GitHub Pages 연결\n\n\n\n\n\n12.5.2 Quarto Pub 출판\nQuarto Pub 출판과정은 Quarto CLI를 통해 이뤄진다. RStudio의 내부 터미널을 사용하는 것을 권장하는데, 이유는 RStudio와 Quarto가 잘 통합되어 있어, 간편하게 출판 작업을 진행할 수 있기 때문이다. 1 \n$ quarto publish quarto-pub\n? Authorize (Y/n) › \n❯ In order to publish to Quarto Pub you need to\n  authorize your account. Please be sure you are\n  logged into the correct Quarto Pub account in \n  your default web browser, then press Enter or \n  'Y' to authorize.\n첫번째 출판하게 되면 인증작업을 수행하고 나면 _publish.yml 파일이 하나 생성된다.\n- source: project\n  quarto-pub:\n    - id: 1fa3ab1f-c010-453a-aaf2-f462bd074a66\n      url: 'https://quartopub.com/sites/statkclee/quarto-ds'\n이제 모든 준비가 되었기 때문에 다음 명령어로 작성한 출판 문서를 포함한 웹사이트를 로컬에서 미리 확인 한 후에 Quarto Pub으로 전자출판한다. 윈도우에서는 RStudio 내부 Terminal CLI를 사용하는 것을 권장한다.\n$ quarto preview\n$ quarto publish quarto-pub",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>웹사이트와 블로그</span>"
    ]
  },
  {
    "objectID": "dw_website.html#블로그",
    "href": "dw_website.html#블로그",
    "title": "12  웹사이트와 블로그",
    "section": "12.6 블로그",
    "text": "12.6 블로그\n블로그를 책 한권 집필하는 것으로 이해하면 쉽다. 책 내용을 쉽게 쓰고 편집할 수 있게 해주는 ’글쓰기 도구’가 필요하고 집필된 도서를 저장해서 수시로 꺼내볼 수 있는 책장도 필요하고 책을 찾을 수 있는 주소도 필요하다. 블로그에서 콘텐츠 관리 시스템(CMS)이 글쓰기 저작도구 역할을 하고, 블로그 글과 정보는 인터넷 상의 ’호스팅 서비스’에 저장되고 누구나 찾을 수 있도록 블로그에는 도메인 이름이 부여된다. 책의 표지와 디자인이 독자의 관심을 끄는 것처럼, 블로그 디자인과 테마도 방문자에게 중요한 첫인상을 주고, 책에 북마크나 색인을 추가하는 것처럼, 블로그에도 플러그인이나 추가 확장 기능을 부여된다. \n블로그를 작성하고 운영하는 이유도 책을 집필하고 출판하는 이유와 비슷하다. 블로그를 통해 자신의 생각과 경험을 기록하고 공유하면서, 독자들과 소통하고 지식을 나누는 기본적인 기능 외에도 다음과 같은 이유로 과학기술 블로그를 운영한다.\n\n학습: 강의를 듣거나 무언가 읽어 독서를 통해 학습되는 지식보다 글쓰기를 통해 축적되는 지식이 어떻게 보면 학습 효과가 더 크다. 특히, 학습한 내용을 코드로 작성하여 돌려볼 경우 학습효과를 배가시킨다.\n지식나눔: 구글 검색엔진을 통해 검색된 블로그 게시글을 통해 짧은 시간 학습에 도움을 받지만, 마찬가지로 본인이 작성한 블로그 게시글이 다른 사람에게 도움을 주는 것도 사실이다. 한가지 명심할 사항은 본인 실력보다 한두단계 앞선 사람으로 배우는 것이 실질적으로 큰 도움이 된다. 그래서 눈높이 교육이라는 얘기도 있지 않나 싶다.\n구인구직, 포트폴리오: 차곡차곡 누적된 블로그 게시물은 그 자체로 포트폴리오가 되고 헤드헌터를 통해 채용 인터뷰 요청을 받게 된다.\n\n\n12.6.1 블로그 시작\nQuarto 블로그 제작은 RStudio hugo, distill 블로그와 방식에서 몇가지 차이점이 있다. Quarto CLI 를 사용하는 경우 다음 명령어를 투사하게 되면 myblog 디렉토리 아래 블로그 기본 사항이 준비되어 블로그 제작을 시작할 수 있다.\nquarto create-project myblog --type website:blog\n다른 방식은 RStudio 에서 New Project를 선택한 후에 Quarto Blog 프로젝트를 시작하는 방식이다.\n\n\n\n\n\n\n그림 12.6: RStudio 블로그 프로젝트 시작 마법사\n\n\n\n\n\n12.6.2 블로그 미리보기\n쿼토 CLI 를 통해 quarto.cmd preview 명령어를 통해 블로그를 출판하기 전에 로컬 컴퓨텅에서 확인이 가능하다. 2022년 4월 RMarkdown/Bookdown 에서 쿼토로 옮겨간 초창기 경험이 Nicholas Tierney (2022-04-11), “Notes on Changing from Rmarkdown/Bookdown to Quarto” 블로그에 잘 정리되어 있다.\n과거 윈도우는 quarto.cmd preview는 CLI 명령어였으나 현재는 윈도우를 비롯하여 맥이나 리눅스 계열 모두 quarto preview로 충분하다.\nquarto preview\n쿼토 블로그 프로젝트에서 기본적으로 생성되는 파일과 디렉토리가 다음 표 12.1 에 정리되어 있다. 컴파일한 후에 나만의 블로그 웹사이트와 _quarto.yml 파일을 전체적인 구조를 파악하고 나서 나만의 블로그가 되도록 수정하면 된다.\n\n\n\n\n\n\n파일명\n설명\n\n\n\n\n_quarto.yml\n쿼토 프로젝트 설정 파일\n\n\nindex.qmd\n블로그 홈 페이지\n\n\nabout.qmd\n블로그 정보 페이지\n\n\nposts/\n게시물이 포함된 디렉토리\n\n\nposts/_metadata.yml\n게시물에 대한 옵션 설정 파일\n\n\nstyles.css\n웹사이트 사용자 정의 CSS.\n\n\n\n\n\n표 12.1: 쿼토 블로그 프로젝트 기본 뼈대\n\n\n\n\n\n12.6.3 _quarto.yml 블로그 반영\n_quarto.yml 파일에 블로그 메뉴를 지정한다. 블로그 전용 웹사이트를 운영하는 경우 _quarto.yml 파일에 블로그에 맞춰 YAML 파일 구성을 하면 된다.\nwebsite:\n  title: \"Quarto 데이터 사이언스\"\n  site-url: https://quartopub.com/sites/statkclee/quarto-ds\n  twitter-card:\n    card-style: summary_large_image\n    description: \"한글 Quarto 첫걸음\"\n    image: \"fig/koRea_logo.png\"\n  page-footer:\n    left: \"[Quarto](https://quarto.org/) 로 제작\"\n  navbar:\n    background: \"#447099\"\n    left:\n      - href: index.qmd\n        text: \"Home\"\n      - href: quarto_blog.qmd     \n        text: \"Blog\"\n      - text: Quarto\n        menu:\n        - href: quarto_install.qmd\n          text: \"Quarto 설치/출판\"\n        - href: quarto_about.qmd\n          text: \"Quarto 소개\"\n        - href: quarto_slideshow.qmd\n          text: \"Quarto 슬라이드\"\n\n\n12.6.4 index.qmd\n쿼토 블로그도 일종의 웹사이트로 index.qmd가 필수적이고 블로그 웹사이트 관련 기본설정이 담겨있다. 블로그는 여러 토막글로 게시되기 때문에 각 토막글이 어떻게 배치되고 토막글의 내용을 어떻게 보여줄지에 대한 설정이 담겨있다.\n\n\n\n\n\n\n그림 12.7: 기본설정 쿼토 블로그 실행화면\n\n\n\n\n\n12.6.5 _metadata.yml YAML\nQuarto 웹사이트 내부에 블로그를 내장하여 운영하는 것이기 때문에 관례상 posts\\ 디렉토리를 생성하여 관련 블로글 게시글을 각 폴더로 만들어 운영하는 것이 여러모로 유용하다.\nquarto\\\n|-- posts\\\n    |-- _metadata.yml\n    |-- quarto_blog_20220815\n        |-- index.qmd \n    |-- quarto_transfer_20220715\n        |-- index.qmd \n_metadata.yml YAML 파일에 블로그 설정을 담아낸다.\n# Options specified here will apply to all posts in this folder\n\n# freeze computational output\nfreeze: true\n\n# Enable banner style title blocks\ntitle-block-banner: false\n\n# Author name of all blog posts\nauthor: 'Victor Lee'\n\n# Table of content settings\ntoc: true\ntoc-depth: 3\n\npage-layout: article\n\n\n12.6.6 블로그 작성\n이제 블로그에 대한 게시글 작성에 대한 모든 것이 준비되어 index.qmd 파일에 Quarto 블로그 게시글을 작성하면 된다. posts 디렉토리 아래 블로그에 대한 슬러그(slug) 명칭을 잘 정하고 index.qmd 파일을 통해 블로그 토막글을 작성하면 된다.\nposts\\quarto_blog_20220815\\index.qmd\n공익법인 한국 R 사용자회가 2022년부터 다양한 쿼토를 시범제작 운영하면서 축적한 경험이 현재도 남아 있다. Quarto 데이터 과학 블로그로 웹사이트와 함께 다양한 가능성을 탐색하였다. 현재 쿼토 블로그는 과학기술 전문 블로거가 블로그 제작 및 사이트 운영에 필요한 거의 모든 기능을 제공하고 있다. 블로그를 처음 사용하신 분은 쿼토에서 제공하는 기본기능을 웹사이트에 연결시키는 것만으로 대략 80%의 기능을 활용한다고 볼 수 있다. 블로그가 수년동안 운영되는 것을 보면 추후 쿼토 블로그 신규 기능을 반영하거나 다른 블로거 웹사이트를 참고하여 꾸준히 관심을 가지고 블로그 저작을 한다면 빠른 시간내 성과를 낼 것으로 기대된다.\n\n\n\n\n\n\n그림 12.8: 쿼토 블로그 초창기 사례",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>웹사이트와 블로그</span>"
    ]
  },
  {
    "objectID": "dw_website.html#연습문제",
    "href": "dw_website.html#연습문제",
    "title": "12  웹사이트와 블로그",
    "section": "연습문제",
    "text": "연습문제\n\n객관식\n\n웹사이트와 블로그 출판의 주요 장점은 무엇인가요?\n\n인쇄와 배포 비용 절감\n물리적 공간 절약\n실시간 사용자 피드백\n모두 다\n\n\n\n쿼토 웹사이트 프로젝트 생성 시 고려해야 할 주요 파일은 무엇인가요?\n\n_quarto.yml 파일\nindex.html 파일\nstyle.css 파일\n모두 다\n\n\n\n웹사이트에 적용 가능한 테마 유형은 무엇인가요?\n\n부츠트랩 기반 테마\n사용자 정의 테마\n미리 정의된 테마\n모두 다\n\n\n\n\n서술형\n\n웹사이트와 블로그에서의 글꼴과 색상의 중요성에 대해 설명해보세요.\n\n\n웹사이트와 블로그의 컨텐츠 관리 시스템(CMS)의 역할은 무엇인가요?",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>웹사이트와 블로그</span>"
    ]
  },
  {
    "objectID": "dw_website.html#footnotes",
    "href": "dw_website.html#footnotes",
    "title": "12  웹사이트와 블로그",
    "section": "",
    "text": "Quarto Pub↩︎",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>웹사이트와 블로그</span>"
    ]
  },
  {
    "objectID": "dw_slideshow.html",
    "href": "dw_slideshow.html",
    "title": "\n13  PPT 슬라이드\n",
    "section": "",
    "text": "13.1 헬로월드\n쿼토는 기본적으로 프로젝트를 기반으로 시작하기 때문에 프로젝트를 하나 생성한다. RStudio를 실행하고 우측 상단 Project:(None)을 클릭하여 New Project를 새로운 디렉토리를 만들어 생성한다.\n프로젝트가 생성되면 File → New File → Quarto Presentation...을 클릭하여 쿼토 슬라이드 .qmd 문서파일을 생성한다.\nCtrl + Shift + k 단축키를 눌러 .qmd 파일을 웹슬라이드로 제작할 수 있다. 웹슬라이드 파일명을 helloworld.qmd로 저장한다.\n다운로드 예제 PPT 파일",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>PPT 슬라이드</span>"
    ]
  },
  {
    "objectID": "dw_slideshow.html#헬로월드",
    "href": "dw_slideshow.html#헬로월드",
    "title": "\n13  PPT 슬라이드\n",
    "section": "",
    "text": "그림 13.1: 슬라이드 제작을 위한 프로젝트 생성\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n그림 13.2: 쿼토 프리젠테이션 파일 생성\n\n\n\n\n\n첫번째 웹슬라이드 제작과정",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>PPT 슬라이드</span>"
    ]
  },
  {
    "objectID": "dw_slideshow.html#슬라이드-문법",
    "href": "dw_slideshow.html#슬라이드-문법",
    "title": "\n13  PPT 슬라이드\n",
    "section": "\n13.2 슬라이드 문법",
    "text": "13.2 슬라이드 문법\n쿼토 슬라이드는 pandoc의 마크다운 문법을 기반으로 하고 있으며 reveal.js의 슬라이드 문법을 사용할 수 있다. reveal.js의 슬라이드 문법은 쿼토 프리젠테이션을 참고한다.\n\n13.2.1 슬라이드 생성\n# 기호는 h1 큰제목 슬라이드, ## 기호는 h2 중간제목을 갖는 슬라이드를 생성하여 하나 사고체계를 갖는 발표장표를 구성하고 마찬가지로 또다른 # 기호는 h1 큰제목 슬라이드, ## 기호는 h2 중간제목을 갖는 슬라이드를 생성하면 또 다른 사고체계를 갖는 발표장표를 구성할 수 있다.\n\n\n---\ntitle: \"습관\"\nauthor: \"홍길동\"\nformat: revealjs\n---\n\n# 아침\n\n## 기상\n\n- 알람 끄기\n- 침대에서 일어나기\n\n## 아침 식사\n\n- 콩나물국 먹기\n- 커피 마시기\n\n# 저녁\n\n## 저녁 식사\n\n- 삼겹살과 된장찌개\n- 소주 마시기\n\n## 잠들기\n\n- 양치질 하기\n- 잠자리에 들기\n\n\n\n\n\n\n\n\n\n\n13.2.2 2 칼럼\nPPT 발표자료는 가로 길이가 세로 길이보다 넓은 경우가 대부분이라 2칼럼으로 화면을 분할하는 경우가 많다. 쿼토 슬라이드는 .columns 클래스와 width 속성을 이용하여 2칼럼을 구현한다.\n\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n### 왼쪽 ...\n\n텍스트\n:::\n\n::: {.column width=\"60%\"}\n### 오른쪽 ...\n\n텍스트\n:::\n\n::::\n\n\n\n\n\n\n\n\n\n\n13.2.3 한줄씩 보여주기\nincremental 선택옵션을 사용해서 한줄씩 순차적으로 보여주는 것이 가능하다. 영어로 increnetal reveal 혹은 increamental list 기능이라고 한다. 기본설적은 슬라이드 내의 번호 및 글머리 기호 목록이 한 번에 모두 표시된다. incremental 옵션을 사용하면 한 번에 하나씩 표시된다. 코드에 .nonincremental를 넣게 되면 한줄씩 보여주는 기능을 비활성화 할 수 있다.\n\n\n---\ntitle: \"습관\"\nauthor: \"홍길동\"\nformat:\n  revealjs:\n    incremental: true\n---\n\n# 한줄씩 보여주기\n\n## 한국 R 사용자회 커뮤니티\n\n::: {.incremental}\n\n- Facebook 페북 그룹\n\n- 서울 R 미트업\n\n:::\n\n\n## Seoul R User Group\n\n::: {.nonincremental}\n\n- Facebook Group\n\n- Seoul R Meetup\n\n:::\n\n\n\n\n\n\n\n\n\n\n13.2.4 코드와 그래프\n쿼토 슬라이드는 코드와 그래프를 한 슬라이드에 표시할 수 있다. 코드와 출력결과(표, 그래프, 실행결과 등)을 나란히 표시하거나 출력을 지연하여 다른 슬라이드에 표시하는 것은 강의나 발표에 일반적으로 사용되는 기법이다. 쿼토 슬라이드는 output-location 선택옵션 통해 한줄로 기능 구현이 가능하다. output-location 선택옵션은 fragment, slide, column, column-fragment를 지원하기 때문에 필요에 맞춰 발표자료에 적용한다. output-location: column을 설정하면 코드와 출력결과 그래프가 한 슬라이드에 나타나는데 코드를 중복없이 깔끔하게 작성한다는 점이 큰 장점이다.\n\n\n## 코드 출력결과\n#| output-location: column\n#| echo: true\n\nlibrary(ggplot2)\n\nmtcars |&gt; \nggplot(aes(x = wt, y = mpg)) +\n  geom_point() +\n  theme_linedraw()",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>PPT 슬라이드</span>"
    ]
  },
  {
    "objectID": "dw_slideshow.html#쿼토-ppt-사례",
    "href": "dw_slideshow.html#쿼토-ppt-사례",
    "title": "\n13  PPT 슬라이드\n",
    "section": "\n13.3 쿼토 PPT 사례",
    "text": "13.3 쿼토 PPT 사례\n가장 대표적인 마이크로소프트 파워포인트(PPT)와 비교하여 쿼토 슬라이드가 갖는 장점은 태생부터 웹 출판을 염두에 두고 설계 되어 있기 때문에 웹 기반 발표자료를 제작하기 적합하고 무엇보다 공유가 쉽다는 점이다. 쿼토 슬라이드는 마크다운 문법을 사용하기 때문에 마크다운 문법을 알고 있다면 쉽게 배울 수 있고 앞서 소개한 \\(\\LaTeX\\), R/파이썬/SQL/OJS/줄리아 등 프로그래밍 언어 임베딩, 참고문헌, 유튜브 동영상, 인터랙티브 웹 문서를 별 어려움 없이 발표자료에 넣을 수 있고 Git/GitHub 등 버전관리 시스템을 이용하여 발표자료 버전관리는 물론이고 여러 발표자와 협업도 수월하다.\n한국 R 사용자회 발표자료는 2022년 9월부터 모든 발표자료를 쿼토 슬라이드로 제작하여 발표자료 웹사이트에 게시하고 있다. 모든 발표자료는 .qmd 파일로 제작되었으며 발표자료가 많아져 grid 형식을 차용하여 한눈에 발표자료를 일별할 수 있도록 제작했다.\n\n\n\n\n\n그림 13.3: 한국 R 사용자회 발표자료 모음",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>PPT 슬라이드</span>"
    ]
  },
  {
    "objectID": "dw_slideshow.html#연습문제",
    "href": "dw_slideshow.html#연습문제",
    "title": "\n13  PPT 슬라이드\n",
    "section": "연습문제",
    "text": "연습문제\n객관식\n\n쿼토 슬라이드 제작에 사용되는 자바스크립트 라이브러리는 무엇인가요?\n\nreveal.js\npdf.js\nhtml5.js\nmarkdown.js\n\n\n\n\n\nreveal.js 기반 슬라이드의 장점은 무엇인가요?\n\nPDF로의 쉬운 변환\n복잡한 설치 과정\n제한된 스타일링 옵션\n느린 로딩 속도\n\n\n\n\n쿼토 슬라이드의 슬라이드 생성 문법에는 어떤 것이 사용되나요?\n\nHTML 태그\n파이썬 코드\n\n# 기호\nXML 구조\n\n\n서술형\n\n쿼토 슬라이드에서 2칼럼 레이아웃을 구현하는 방법에 대해 설명해보세요.\n\n\n\nreveal.js 기반 쿼토 슬라이드에서 한줄씩 순차적으로 내용을 표시하는 기능의 사용법에 대해 설명해보세요.",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>PPT 슬라이드</span>"
    ]
  },
  {
    "objectID": "dw_dashboard.html",
    "href": "dw_dashboard.html",
    "title": "\n14  대쉬보드\n",
    "section": "",
    "text": "14.1 대쉬보드 제작과정\n대쉬보드 제작을 순차적으로 진행할 수도 있지만 경우에 따라서는 병렬도 동시작업도 가능하다. 가장 일반적인 순차적 대쉬보드 제작과정은 다음과 같다. 먼저, 전세계와 한국의 코로나19 데이터를 수집하고 수집된 데이터를 분석 가능한 형태로 데이터를 전처리하여 대쉬보드 각 구성요소에 맞게 데이터셋을 맞춘다. 대시보드 UI/UX 디자인을 계획하면서 적절한 시각화 도구(gt, highcharter, leaflet, plotly)에 대한 기술적인 검토도 함께 진행한다. (Kulkarni 2019)\n데이터와 UI/UX 디자인과 기술검토가 마무리된 다음, 대시보드 구성요소를 본격적으로 Value 박스, gt 표, ggplot 그래프 등으로 개발한다. 대쉬보드 외양을 정의하는 대시보드 브랜딩과 디자인 작업은 CSS/SCSS 스타일링 작업을 통해 진행된다. 대시보드 테스트 단계는 모든 구성요소가 올바르게 작동하는지 테스트하고, 완성된 대시보드를 깃헙 페이지 웹사이트에 배포한다. 이후 자동화 및 업데이트 운영 및 유지보수 단계에서 데이터가 실시간으로 갱신되도록 자동화시키고 신규 개발 코드와 UI/UX 코드도 CI/CD를 통해 자동화한다.",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>대쉬보드</span>"
    ]
  },
  {
    "objectID": "dw_dashboard.html#대쉬보드-제작과정",
    "href": "dw_dashboard.html#대쉬보드-제작과정",
    "title": "\n14  대쉬보드\n",
    "section": "",
    "text": "그림 14.1: 대쉬보드 제작 흐름",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>대쉬보드</span>"
    ]
  },
  {
    "objectID": "dw_dashboard.html#corona-virus-dashboard",
    "href": "dw_dashboard.html#corona-virus-dashboard",
    "title": "\n14  대쉬보드\n",
    "section": "\n14.2 코로나19 대쉬보드",
    "text": "14.2 코로나19 대쉬보드\n코로나19 대시보드 제작은 여러 단계로 구성된다. 먼저, 코로나19 데이터를 사용할 수 있는데 데이터는 coronavirus 데이터 팩키지로 제작되어 데이터 수집 과정이 간소화되고 이미 잘 구성되어 있어 데이터 수집에 따른 공수를 크게 줄일 수 있다. 데이터를 수집한 후, 쿼토 대시보드(dashboards)를 엔진으로 사용하여 대시보드를 제작한다. 쿼토 대시보드는 쿼토 마크다운을 기반으로 하며 다양한 시각화 도구와 통합이 안정적이고 쉽게 사용할 수 있다.\n\n14.2.1 데이터셋\n코로나 19 데이터셋은 존스 홉킨스 대학(Johns Hopkins University)과 세계보건기구(WHO)에서 제공되는 두가지 형태로 제공되고 있지만 존스 홉킨스 대학 데이터셋이 WHO 데이터셋 보다 더 많은 호응을 받아 coronavirus 데이터 패키지를 사용한다. 원자료가 데이터프레임이라 티블(tibble)로 자료형을 바꾸고 변수명을 janitor 패키지 clean_names() 함수로 변수명을 정리한다. \n\n\ncoronavirus: The coronavirus dataset\n\nCOVID-19: Novel Coronavirus (COVID-19) Cases, provided by JHU CSSE\n\n\n\ncovid: Novel Coronavirus(2019-nCoV) updates from WHO daily reports\n\nPDF WHO 보고서\n\n\n\nlibrary(tidyverse)\n# devtools::install_github(\"RamiKrispin/coronavirus\")\nlibrary(coronavirus)\nlibrary(bslib)\nlibrary(bsicons)\n\ndata(\"coronavirus\")\n\ncoronavirus &lt;- coronavirus %&gt;% \n  as_tibble() %&gt;%\n  janitor::clean_names() \n\n14.2.2 대쉬보드 디자인\n데이터 과학 요소가 들어간 대쉬보드 제작을 위한 UI 설계안을 작성한다. 디자인 작업을 완료한 후, 와이어프레임(wireframe)을 중심으로 데이터 과학 요소가 포함된 대시보드 UI 설계작업을 진행한다. \n아이콘과 디자인 요소를 위해 Font Awesome, Ionicons, Bootstrap, Bootstrap과 같은 라이브러리를 활용하여 다양한 아이콘과 UI 컴포넌트를 통해 대시보드 시각적 표현을 풍부하게 한다.\n\n\n\n\n\n그림 14.2: 코로나19 대쉬보드 UI 설계\n\n\n\n14.2.3 프로토타입 제작\n작성한 wireframe을 기반으로 쿼토 대시보드 문법에 맞춰 대시보드 구성요소를 적절히 배치하고 쿼토 마크다운 코드로 대시보드를 구현한다. 전체적으로 ValueBox를 대시보드 상단에 배치하고, 아래 두 그래프 영역에 필요한 그래프를 삽입하고 전세계와 한국을 탭(tabset)으로 구분하여 표현하고 대쉬보드 메인(main)에 이미지를 두개 배치한다. 쿼토 확장기능 lipsum을 활용하여 대시보드 메인에 이미지를 배치하여 와이어프레임에서 작성한 디자인을 구현한다. 대시보드에 텍스트가 필요한 경우 lipsum을 활용하여 텍스트를 삽입하여 전체적인 대시보드 외양을 살펴보는 것도 가능하다. \n\n\n\n\n\n그림 14.3: 쿼토 대시보드 배치도(layout)\n\n\n# 상단 메뉴바(navbar) “전세계” 탭을 만들게 되고 ## Row 를 통해 Value 박스가 들어갈 항목을 명세한다. flexdashboards 문법과 비교하면 Value 박스 문법이 list와 #|으로 잘 구성되어 코드가 간결한 것을 알 수 있다. 쿼토 확장기능 lipsum을 통해 unsplash 개와 고양이 이미지를 임의로 넣어 대시보드 배치를 확인하도록 코드를 간결히 작성했다.\n---\ntitle: \"코로나19 대쉬보드\"\nformat: dashboard\n---\n\n# 전세계\n\n## Row\n\n```{r}\n#| content: valuebox\n#| title: \"확진자수\"\n\nlist(\n  icon = \"hospital\",\n  color = \"yellow\",\n  value = 100\n)\n```\n\n```{r}\n#| content: valuebox\n#| title: \"사망자수\"\n\nlist(\n  icon = \"moon-fill\",\n  color = \"danger\",\n  value = 100\n)\n```\n\n```{r}\n#| content: valuebox\n#| title: \"회복자수\"\n\nlist(\n  icon = \"heart-fill\",\n  color = \"green\",\n  value = 100\n)\n```\n\n## Column\n\n### Chart 1\n\n\\{\\{&lt; unsplash dog.jpg &gt;\\}\\}\n\n### Chart 2\n\n\\{\\{&lt; unsplash cat.jpg &gt;\\}\\}\n\n14.2.4 구성요소\n코로나19 대시보드를 구성하는 주요 구성요소가 value 박스, 표, 그래프로 구성되기 때문에 각각을 레고블럭처럼 모듈별로 개발한다. \nvalue 박스\n검사자, 확진자, 사망자, 회복자를 value 박스로 만들어 주요현황을 쉽게 파악할 수 있도록 구성한다. 쿼토 대시보드 valuebox 문법에 맞춰 코드를 작성하고 부츠트랩 아이콘도 검색하여 삽입한다.\n## Row\n\n```{r}\n#| content: valuebox\n#| title: \"확진자수\"\n\nlist(\n  icon = \"hospital\",\n  color = \"yellow\",\n  value = 100\n)\n```\n\n```{r}\n#| content: valuebox\n#| title: \"사망자수\"\n\nlist(\n  icon = \"moon-fill\",\n  color = \"danger\",\n  value = 100\n)\n```\n\n```{r}\n#| content: valuebox\n#| title: \"회복자수\"\n\nlist(\n  icon = \"heart-fill\",\n  color = \"green\",\n  value = 100\n)\n```\n\n\n\n\n\n그림 14.4: valueBox\n\n\n표\ncoronavirus 데이터 팩키지에서 월별 코로나 통계표를 전세계 기준으로 작성한다. 먼저 대한민국을 포함한 전세계 년월별 확진자수, 사망자수, 회복자수 정적 gt 코로나 19 통계표를 작성한다.\n\ncoronavirus &lt;- coronavirus::coronavirus %&gt;% \n  as_tibble() %&gt;%\n  janitor::clean_names() \n\ncoronavirus |&gt; \n  mutate(yearmon = floor_date(date, \"month\")) |&gt; \n  group_by(yearmon, type) |&gt;\n  summarise(사례수 = sum(cases)) |&gt; \n  pivot_wider(names_from = type, values_from = 사례수) |&gt; \n  ungroup() |&gt; \n  arrange(desc(yearmon)) |&gt; \n  slice(1:10) |&gt; \n  gt() |&gt; \n  cols_align(columns = yearmon, \"center\") |&gt; \n  cols_label(yearmon = \"년월\",\n             confirmed = \"확진자수\", \n             death = \"사망자수\", \n             recovery = \"회복자수\") |&gt; \n  fmt_number(columns = 2:4, decimals = 0) |&gt; \n  data_color(\n    columns = recovery,\n    palette = \"Greens\"\n  ) |&gt;\n  data_color(\n    columns = death,\n    palette = \"Purples\"\n  ) |&gt;\n  data_color(\n    columns = confirmed,\n    palette = \"Blues\"\n  )  \n\n\n\n\n\n\n\n\n년월\n확진자수\n사망자수\n회복자수\n\n\n\n2023-03-01\n1,247,911\n9,120\n0\n\n\n2023-02-01\n4,587,649\n37,344\n0\n\n\n2023-01-01\n10,270,797\n141,962\n0\n\n\n2022-12-01\n17,219,669\n56,975\n0\n\n\n2022-11-01\n12,388,536\n43,439\n0\n\n\n2022-10-01\n12,795,215\n45,200\n0\n\n\n2022-09-01\n14,721,332\n51,212\n0\n\n\n2022-08-01\n25,713,990\n75,102\n0\n\n\n2022-07-01\n29,650,733\n61,119\n0\n\n\n2022-06-01\n17,732,748\n43,958\n0\n\n\n\n\n\n\n\n\n표 14.1: 대시보드를 위한 전세계 코로나19 통계표\n\n\n\n그래프\n전세계 코로나19 추이를 정적 ggplot 그래프로 작성한다. coronavirus 데이터 패키지에서 확진자(confirmed), 사망자(death), 회복자(recovery)로 나눠져 있는 데이터를 월별로 그래프를 작성한다.\n\ncoronavirus |&gt; \n  mutate(yearmon = floor_date(date, \"month\")) |&gt; \n  group_by(yearmon, type) |&gt;\n  summarise(사례수 = sum(cases)) |&gt; \n  ungroup() |&gt; \n  ggplot(aes(x = yearmon, y = 사례수, color = type)) +\n   geom_line() +\n   geom_point() +\n   theme_minimal(base_family = \"NanumGothic\") +\n   theme(legend.position = \"none\") +\n   scale_y_sqrt(labels = scales::comma) +\n   labs(title = \"전세계 코로나19 추이\",\n        y = \"사례수\",\n        x = NULL,\n        color = \"종류\") +\n    facet_wrap(~type, scales = \"free_y\")\n\n\n\n\n\n\n그림 14.5: 전세계 코로나19 유형별 추세 그래프\n\n\n\n\n\n14.2.5 대시보드\n위에서 작성한 모듈별로 작성한 value 박스, gt 통계표, ggplot 그래프 코드를 대시보드에 결합했고, 색상과 글꼴 레이아웃 등 CSS/SCSS 디자인 기본요소만을 적용하여 대시보드를 완성했다. 로컬 서버에서 대시보드를 미리 보면서, 사용자 인터페이스의 일관성과 시각적 호소력을 높이는 후속 작업과 함께 전세계 옆에 “한국” 탭을 만들어 한국 코로나19 현황을 면밀히 살펴볼 수 있는 대시보드를 추가로 개발한다.\n\n\n코로나19 전세계 대시보드",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>대쉬보드</span>"
    ]
  },
  {
    "objectID": "dw_dashboard.html#corona-korea",
    "href": "dw_dashboard.html#corona-korea",
    "title": "\n14  대쉬보드\n",
    "section": "\n14.3 한국 대시보드",
    "text": "14.3 한국 대시보드\n한국 대시보드는 전세계 대시보드와 동일하며 filter(str_detect(country, \"Korea\")) 코드만 추가하여 한국 코로나19 현황만 추출하면 된다.\n\ncoronavirus |&gt; \n  filter(str_detect(country, \"Korea\")) |&gt; \n  mutate(yearmon = floor_date(date, \"month\")) |&gt; \n  group_by(yearmon, type) |&gt;\n  summarise(사례수 = sum(cases)) |&gt; \n  ungroup()\n\n큰 틀에서 한국 데이터만 추출이 되었지만 대시보드는 “전세계”와 “대한민국” 2개의 탭으로 작성되었기 때문에 코드가 길어지게 되었다. 이때 쿼토 {{ &lt; include *.qmd &gt; }} 기능을 사용하면 대시보드 코드를 모듈화하여 가독성도 높일 수 있고 유지보수도 수월하게 된다. 즉, world.qmd 쿼토 파일에 전세계 대시보드 현황 코드가 작성되어 있고, korea.qmd 쿼토 파일에 한국 대시보드 현황 코드가 작성되어 있다. 나중에 대시보드를 수정사항이 생겼을 때 해당 파일만 수정하면 수월히 대시보드를 유지보수할 수 있다.\n---\ntitle: \"코로나19 대쉬보드\"\nformat: dashboard\n---\n\n```{r}\nlibrary(tidyverse)\nlibrary(bslib); library(bsicons)\n\ncoronavirus &lt;- coronavirus::coronavirus %&gt;% \n  as_tibble() %&gt;%\n  janitor::clean_names() \n\nvaluebox_stat &lt;- coronavirus |&gt; \n  filter(str_detect(country, \"Korea\")) |&gt;\n  group_by(type) %&gt;% \n  summarise(사례수 = sum(cases)) \n\nvaluebox_world &lt;- coronavirus |&gt; \n  group_by(type) %&gt;% \n  summarise(사례수 = sum(cases)) \n```\n\n{{&lt; include world.qmd &gt;}}\n\n{{&lt; include korea.qmd &gt;}}",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>대쉬보드</span>"
    ]
  },
  {
    "objectID": "dw_dashboard.html#배포-대쉬보드",
    "href": "dw_dashboard.html#배포-대쉬보드",
    "title": "\n14  대쉬보드\n",
    "section": "\n14.4 배포 대쉬보드",
    "text": "14.4 배포 대쉬보드\n대시보드 제작이 완료되면 인터넷에 공개하기 위해 gh-pages를 사용해 웹사이트에 배포한다. gh-pages는 GitHub에서 제공하는 무료 웹 호스팅 서비스로, 쿼토 대시보드를 정적 웹사이트 형식으로 변환해 대시보드 서비스를 제공할 수 있다. gh-pages를 사용하면 웹사이트를 만들기 위한 별도의 서버를 구축할 필요가 없고 비용도 들지 않기 때문에 개인정보가 포함되지 않고 공개적으로 공유할 수 있는 대시보드를 만들기에 적합하다. \n배포 과정은 먼저 GitHub 저장소를 생성하고 대시보드 모든 파일을 업로드한 다음 GitHub 설정에서 gh-pages를 활성화하고 대시보드가 포함된 브랜치를 선택한다. 설정이 완료되면 GitHub은 자동으로 웹사이트를 생성하고 해당 URL을 제공한다.\n코로나19 대시보드는 인터넷에 자유롭게 접근 가능하며, 누구나 코로나19 현황을 쉽게 파악하고 이해하도록 도움을 준다. 대쉬보드는 코로나19 대쉬보드 웹사이트에서 확인할 수 있다.\n\n\n\n\n\n\n\n\n\n\n\n그림 14.6: 코로나19 전세계 현황\n\n\n\n\n \n\n\n\n\n\n\n\n그림 14.7: 코로나19 한국 현황\n\n\n\n\n\n\n코로나19 쿼토 대쉬보드",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>대쉬보드</span>"
    ]
  },
  {
    "objectID": "dw_dashboard.html#연습문제",
    "href": "dw_dashboard.html#연습문제",
    "title": "\n14  대쉬보드\n",
    "section": "연습문제",
    "text": "연습문제\n객관식\n\n\nflexdashboard 패키지를 사용하는 주된 이유는 무엇인가요?\n\n복잡한 웹사이트 제작\n간단한 R 마크다운으로 대시보드 제작\n고급 프로그래밍 기술 요구\n오직 JavaScript 개발자용\n\n\n\n\n쿼토 대시보드 제작에 있어서 중요한 구성 요소는 무엇인가요?\n\nValue 박스, 표, 그래프\n복잡한 데이터베이스\n고급 웹 개발 기술\n오직 텍스트 기반 컨텐츠\n\n\n\n\n대시보드 배포를 위해 사용되는 GitHub의 기능은 무엇인가요?\n\ngh-pages\ngit-clone\ngit-merge\ngit-commit\n\n\n서술형\n\n쿼토 대시보드 제작 과정에서 고려해야 할 디자인 요소는 무엇인가요?\n\n\n대시보드 개발과 배포 과정에서의 자동화의 중요성에 대해 설명해보세요.\n\n\n\n\n\nKulkarni, Sagar. 2019. “Building an HR Dashboard in R using Flexdashboard”. Towards Data Science, 9월. https://towardsdatascience.com/building-an-hr-dashboard-in-r-using-flexdashboard-76d14ed3f32.",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>대쉬보드</span>"
    ]
  },
  {
    "objectID": "dw_book.html",
    "href": "dw_book.html",
    "title": "\n15  (전자)책 출판\n",
    "section": "",
    "text": "15.1 전자책 헬로 월드\n쿼토에서 책을 저작하는 가장 간단한 방법은 RStudio 에서 우측 상단 ‘New Project’ 메뉴를 통해 ‘New Directory’ -&gt; ’Quarto Book’을 선택하고 책을 집필할 디렉토리를 지정한다. 버전제어를 위해 Create a git repository를 선택할 것을 추천한다. 책 저작환경도 버전제어로 관리하고자 할 경우 Use renv with this project를 선택하고 소스 코드 방식으로 저작하고자 하면 Use visual markdown editor를 선택하지 않고 워드나 아래한글처럼 위지윅 방식 편집기를 사용하고자 하면 Use visual markdown editor를 선택한다. 그리고 나서 Create Project를 클릭하면 쿼토 책 저작환경이 구축된다.\n책 저작을 위한 기본환경이 구축되어 있기 때문에 _quarto.yml 파일에 책 저작에 대한 모든 내용이 담겨져 있기 때문에 이를 유심히 살펴보면 대략 문서 구조를 이해할 수 있다. 그리고 나서 상단 Render 버튼을 클릭하면 웹사이트에 책이 생성된다.",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>(전자)책 출판</span>"
    ]
  },
  {
    "objectID": "dw_book.html#전자책-헬로-월드",
    "href": "dw_book.html#전자책-헬로-월드",
    "title": "\n15  (전자)책 출판\n",
    "section": "",
    "text": "그림 15.1: 쿼토 책(Book) 저작과정",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>(전자)책 출판</span>"
    ]
  },
  {
    "objectID": "dw_book.html#한글-도서-출판",
    "href": "dw_book.html#한글-도서-출판",
    "title": "\n15  (전자)책 출판\n",
    "section": "\n15.2 한글 도서 출판",
    "text": "15.2 한글 도서 출판\n디지털 저작 언어인 마크다운을 사용하면, R과 파이썬으로 증거에 기반한 데이터 과학 글쓰기를 할 때 표나 그래프 같은 다양한 문서 요소들을 손쉽게 통합할 수 있다. 이 과정에서 인공지능 챗GPT를 이용한 글쓰기는 다른 저작 도구들과 비교해도 손색없이 통합적으로 글을 쓸 수 있게 해준다. 이는 저작 속도를 높이고 품질을 향상시키며 비용도 대폭 절감시킨다. \n도서 집필이 마무리된 후에는 디지털 출판 과정이 이어진다. 영문 도서 출판에 초점이 맞춰진 쿼토(book)와 달리, 한국 R 사용자회가 개발한 bitPublish 도구를 활용하면 한글 출판에 필요한 거의 모든 요소를 포함하여 출판 시간을 크게 단축할 수 있다.\n최종적으로 bitPublish를 사용하여 작품을 컴파일하면, 출판 준비가 완료된 .pdf 파일을 즉시 얻을 수 있다. 파일은 전자책 형태 또는 인쇄하여 대량으로 출판하는 데 즉시 사용할 수 있다. 한국 R 사용자회는 2023년 7월에 쿼토를 통해 “챗GPT 유닉스 쉘”을 출판함으로써 그 가능성을 확인했으며, 이후 축적된 경험을 바탕으로 2024년 2월 “챗GPT SQL”이라는 두 번째 책을 출판했다. 본서도 “챗GPT 유닉스 쉘”과 “챗GPT SQL”에 이어서 bitPublish를 활용하여 출판할 예정이다.\n\n\n\n\n\n그림 15.2: 쿼토 도서 출판 작업흐름\n\n\n\n15.2.1 환경설정\n최신 Download Quarto CLI를 운영체제에 맞춰 설치하고, 도서출판을 위해서 PDF 엔진이 필요하기 때문에, tinytex를 설치한다. tinytex는 TeX Live를 기반으로 하는 경량의 크로스 플랫폼, 휴대성, 유지 관리가 용이한 라텍 배포판이다.\nbitPublish는 quarto use template bit2r/bitPublish 명령어를 통해서 설치되면 _extensions/bit2r 디렉토리 아래 쿼토 확장프로그램으로 설치되어 디지털 도서출판을 위한 모든 사항이 준비된다.\n$ quarto use template bit2r/bitPublish\n\nQuarto templates may execute code when documents are rendered. If you do not\ntrust the authors of the template, we recommend that you do not install or\nuse the template.\n ? Do you trust the authors of this template (Y/n) » Yes\n ? Directory name: » publish\n[&gt;] Downloading\n(/) Unzipping. : File C:\\Users\\statkclee\\OneDrive\\문서\\WindowsPowerShell\\profile.ps1 cannot be loaded because running scripts is disab\nled on this system. For more information, see about_Execution_Policies at https:/go.microsoft.com/fwlink/?LinkID=135170.\n[&gt;] Unzipping\n    Found 1 extension.\n[&gt;] Copying files...\n\nFiles created:\n - chap_exams.qmd\n - chap_intro_bitpublish.qmd\n - chap_troubleshooting.qmd\n - chap_version.qmd\n - img\n - index.qmd\n - references.bib\n - references.qmd\n - _extensions\n - _quarto.yml\n(base)\nbitPublish는 크게 한글 도서출판을 위한 라텍 패키지와 한글식자를 위한 국문, 영문, 한자, 수식 글꼴로 구성되어 있다. bitPublish.tex 텍파일에 PDF 문서 생성을 위한 주요 기능들이 망라되어 필요한 경우 추가 수정을 통해 즉시 출판가능한 수준 PDF 문서 생성이 가능하다.\n\n\nbitPublish 구성요소와 출판 생태계\n\n살펴보기\n_extensions/ 디렉토리 아래 한국 R 사용자회 (bit2r)에서 개발한 bitPublish 템플릿이 포함되어 있어 이를 사용하여 다양하면 즉시 출판이 가능한 기반을 제공하고 있다. 저자는 _quarto.yml 파일에 등록된 .qmd 파일을 주석처리 혹은 수정하여 글쓰기 작업을 진행하면 된다.\n## ../publish\n## ├── chap_exams.qmd\n## ├── chap_intro_bitpublish.qmd\n## ├── chap_troubleshooting.qmd\n## ├── chap_version.qmd\n## ├── docs\n## │   └── bitPublish를-이용하여-한글-책-조판하기.pdf\n## ├── img\n## │   ├── b5217f2a-f129-4bf9-90dc-c5b9783d0ea8_rw_1920.png\n## │   └── pipeline.pdf\n## ├── index.qmd\n## ├── references.bib\n## ├── references.qmd\n## ├── _extensions\n## │   └── bit2r\n## │       └── bitPublish\n## │           ├── bitPublish.tex\n## │           ├── fonts\n## │           │   ├── D2Coding\n## │           │   │   ├── D2Coding-Ver1.3.2-20180524.ttf\n## │           │   │   └── D2CodingBold-Ver1.3.2-20180524.ttf\n## │           │   ├── KOPUBWORLD_OTF_FONTS\n## │           │   │   ├── KoPubWorld Batang_Pro Bold.otf\n## │           │   │   ├── KoPubWorld Batang_Pro Light.otf\n## │           │   │   ├── KoPubWorld Batang_Pro Medium.otf\n## │           │   │   ├── KoPubWorld Dotum_Pro Bold.otf\n## │           │   │   ├── KoPubWorld Dotum_Pro Light.otf\n## │           │   │   └── KoPubWorld Dotum_Pro Medium.otf\n## │           │   ├── NanumSquare\n## │           │   │   ├── NanumSquareB.otf\n## │           │   │   └── NanumSquareR.otf\n## │           │   ├── Nimbus Sans L\n## │           │   │   ├── GNU General Public License.txt\n## │           │   │   ├── NimbusSanL-Bol.otf\n## │           │   │   ├── NimbusSanL-BolIta.otf\n## │           │   │   ├── NimbusSanL-Reg.otf\n## │           │   │   └── NimbusSanL-RegIta.otf\n## │           │   └── STIXTwoText\n## │           │       ├── STIXTwoMath-Regular.otf\n## │           │       ├── STIXTwoText-Bold.otf\n## │           │       ├── STIXTwoText-BoldItalic.otf\n## │           │       ├── STIXTwoText-Italic.otf\n## │           │       ├── STIXTwoText-Medium.otf\n## │           │       ├── STIXTwoText-MediumItalic.otf\n## │           │       ├── STIXTwoText-Regular.otf\n## │           │       ├── STIXTwoText-SemiBold.otf\n## │           │       └── STIXTwoText-SemiBoldItalic.otf\n## │           ├── images\n## │           │   ├── bomb-solid.svg\n## │           │   ├── caution.png\n## │           │   ├── circle-info-solid.svg\n## │           │   ├── information.png\n## │           │   ├── lightbulb-regular.svg\n## │           │   └── triangle-exclamation-solid.svg\n## │           ├── init_environments.R\n## │           ├── style.css\n## │           └── _extension.yml\n## └── _quarto.yml\n헬로월드\nquarto preview 명령어로 미리보기, quarto render 명령어로 .pdf 파일을 생성하게 된다. \n$ quarto preview --to bitPublish-pdf # 미리보기 \n$ quarto render --to bitPublish-pdf  # pdf 파일 생성하기\nquarto render --to bitPublish-pdf 명령어를 실행하게 되면 docs 폴더에 docs\\bitPublish를-이용하여-한글-책-조판하기.pdf 문서 제목하고 동일한 bitPublish를-이용하여-한글-책-조판하기.pdf PDF 파일이 생성된다.\n$ quarto render --to bitPublish-pdf\n\n[1/6] index.qmd\n[2/6] chap_exams.qmd\n\n\nprocessing file: chap_exams.qmd\n                                                                        ... &lt;중간 생략&gt; ...\n                                                                        \nrunning xelatex - 2\n  This is XeTeX, Version 3.141592653-2.6-0.999995 (TeX Live 2023) (preloaded format=xelatex)\n   restricted \\write18 enabled.\n  entering extended mode\n\nrunning xelatex - 3\n  This is XeTeX, Version 3.141592653-2.6-0.999995 (TeX Live 2023) (preloaded format=xelatex)\n   restricted \\write18 enabled.\n  entering extended mode\n\n\nOutput created: docs\\bitPublish를-이용하여-한글-책-조판하기.pdf\nbitPublish 템플릿으로 지원되는 기능들이 PDF 파일에 담겨있다. 필요한 경우 이를 참조하여 글쓰기 외양에 신경쓰지 않고 오로지 글쓰기 본질에 집중하여 마음에 드는 책을 저작하여 일사천리로 출판할 수 있다.\n\n\n\n\n\n\n\n\n\n15.2.2 bitPublish 소개\nQuarto를 이용해서 책으로 만들 수 있는 포맷에는 HTML, PDF, MS Word, EPUB, AsciiDoc이 있습니다. bitPublish는 이중에서 PDF 포맷의 책을 생성합니다.\n현재 bitPublish의 기본 설정에서는 \\(4\\times6\\) 배판 판형을, 갖는 영어를 포함한 라틴계열 언어와 한국어, 중국어를 혼용한 책을 저작할 수 있습니다.\n용지규격\n현재 bitPublish의 기본 페이지 레이아웃 설정은 \\(4\\times6\\) 배판으로 설계되었습니다. \\(4\\times6\\) 배판 판형의 레이아웃 설정을 변경하려면, _extensions/bit2r/bitPublish/_extension.yml 파일의 다음 행들을 수정합니다. LaTeX의 geometry 패키지를 사용합니다.\n\n\n\n\n\n\n\\(4\\times6\\) 배판\n\n\n\nbitPublish 패키지에서 학습 및 참고서를 상정하고 기본 채택한 용지크기는 4x6 배판이다.\n\n  geometry:       # 4x6 배판 도서를 위한 설정\n    - paper=a4paper\n    - layoutwidth=190mm\n    - layoutheight=260mm\n    - layouthoffset=10mm\n    - layoutvoffset=18.5mm\n    - showcrop\n    - top=20mm\n    - headsep=10mm             \n    - bottom=30mm\n    - footskip=15mm                 \n    - left=25mm\n    - right=25mm\n    - centering   \n\n\n국배판(A4): 학원교재\n국배배판(A3): 포스터 등\n신국판: 소설, 수필, 자서전, 전문서적 등\n크라운판: 소설, 수필, 자서전, 전문서적 등\n레터(Letter): 해외대학 학위논문, 해외서적 등\n\n\n\n글꼴\nbitPublish는 전자책이 아닌 종이에 출력되는 책의 저작을 목적으로 만들어졌기 때문에, 폰트의 선택에서 TTF(True Type Font)가 아닌 OTF(Open Type Font)를 선택했다.\n\n\n\n\n\n\n글꼴(폰트) 선정 기준\n\n\n\n\n출판 시 발생할 라이센스 이슈\n\n모든 글꼴을 상업적으로 이용이 가능한 글꼴로 선정\nserif1 영문 글꼴인 Times New Roman 저작권 이슈\n\n가독성이 뛰어난 범용적인 세리프체로 영문 에세이와 학위 논문 표준 글꼴로 자리매김.\n상업용으로 쓸 땐 저작권 면책 조건이 필요함.\n\n\nsans-serif2 영어 글꼴인 헬베티카(Helvetica) 저작권 이슈\n\n대표적인 산세리프 글꼴로 20세기 널리 쓰였음\n\n\n\n\n\n출판 인쇄물의 미적 완성도\n\n가독성, 심미성 등\n\n\n\n저작권(copyright)은 저작물에 대한 권리를 원칙적으로 저작자에게 부여되는 것이고, 라이선스(license)는 저작권 일부를 타인에게 양도하거나 허용하는 계약이다.\n\n\n\n\n\n\n\n\n\n\n\n\n분류\n세부 분류\n추천 글꼴\n설명\n\n\n\n한국어 글꼴\nSerif 글꼴\nKoPubWorld바탕체_Pro\n한국어 본문 텍스트 적합\n\n\n\nSans-Serif 글꼴\nKoPubWorld돋움체_Pro\n한국어 UI 및 제목 적합\n\n\n영어 글꼴\nSerif 글꼴\nSTIX Two Text\nTimes New Roman 대체 글꼴\n\n\n\nSans-Serif 글꼴\nNimbus Sans L\nHelvetica 대체 글꼴, 영어 UI 및 제목에 적합\n\n\n한자 글꼴\n\nKoPubWorld돋움체_Pro\n한자 적합\n\n\n코딩 글꼴\nMono Space 글꼴\nD2Coding\n영어/한국어 모두 동일 글꼴 사용, 자간 틀어짐 방지\n\n\n수학 글꼴\n\nSTIX Two Math\n수학식 적합\n\n\nR 그래픽스 글꼴\n한국어 글꼴\n나눔스퀘어\nR 그래픽 적합\n\n\n\n영어 글꼴\nNimbus Sans L\nR 그래픽 적합\n\n\n\n\n\n표 15.1: bitPublish 글꼴\n\n\n표 15.1 는 각 분류별로 추천하는 글꼴을 요약하여 나타낸다. 이를 참고하여 문서나 프로젝트에 적합한 글꼴을 선택할 수 있다.\n모든 글꼴은 _extensions/bit2r/bitPublish/fonts 디렉토리에 위치하기 때문에 별도 설치할 필요 없지만, 이미 설치된 글꼴도 중복으로 위치하게 된다. KoPubWorld바탕체_Pro와 KoPubWorld돋움체_Pro 글꼴를 사용하기 위해서는 한국출판인회의 홈페이지인 https://forms.gle/aQU7b3EoaF53zMKaA에 사용자 정보를 등록 후 무료로 사용하실 수 있다. 서체 라이선스 문서 일독을 권장한다.\n머리글 바닥글\n머리글(header)과 바닥글(footer)는 fancyhdr 패키지를 사용해서 정의되었다.\n\n\n머리글과 바닥글 적용 파일(홀수 및 짝수 페이지)\n\n_extensions/bit2r/bitPublish/_extension.yml 파일에 다음과 같이 설정되어 있습니다.\n\n\\usepackage{fancyhdr}\n\\pagestyle{fancy}\n\n중간 생략\n\n\\fancyhf{}\n\\fancyhead[EL]{\\changesize \\numberfont --- bitPublish를 이용하여}\n\\fancyhead[OR]{\\changesize \\numberfont 한글 책 조판하기 ---}\n\\fancyfoot[EL]{{\\pagefont\\thepage}{\\hskip4mm}{\\changesize \\leftmark}}\n\\fancyfoot[OR]{{\\changesize \\rightmark}{\\hskip4mm}{\\pagefont\\thepage}}\n\n만약에 머리글과 바닥글의 모양을 바꾸려면 직접 라텍 스크립트를 수정하면 한다. 책 제목을 바꾸기 위해서는 fancyhead의 EL과 OR을 변경한다.\n글줄 사이\n줄간격, 행간 등으로 부르는 글줄 사이(line spacing)는 1.5로 설정되어있다. 수정이 필요하다면, _extensions/bit2r/bitPublish/bitPublish.tex 파일의 다음 행을 수정한다.\n\n%% 줄간격 정의\n\\linespread{1.5}\n\n\nbitPublish 서식\nbitPublish는 본문에서 예제, 연습문제, 주의, 정보, 인용 등을 표현할 수 있는 여러 LaTeX 서식을 지원한다. 서식은 다음과 같은 구조의 라텍 환경(enviroment)으로 제공된다.\n\n\\begin{enviroment name}[optional argument]{main argument}\n  text of enviroment\n\\end{enviroment name}\n\n또한 다음과 같은 라텍 명령(command)으로도 제공된다.\n\n\\command name[optional argument]{main argument} \n\n이야기 박스\nshadequote 환경을 이용하는데 이야기 박스 구문은 다음과 같다.\n\n\\begin{shadequote}[&lt;alignment&gt;]{&lt;author&gt;}\n  text of quote\n\\end{shadequote}\n\n다음처럼 괄호를 비우면, 저자 이야기를 표시한다.\n\n\\begin{shadequote}{}\n나는 통계계산이 수리영역인 줄만 알았다. 그런데, 이제는 논리적인 사고도 필요한\n논리영역임을 느낀다. 그래서 논리적 사고로 통계적 데이터 분석을 위한 성능 좋은\n연장이 필요하기 시작했다.\n\\end{shadequote}\n\n명사의 명언을 인용하여 이야기할 경우에는 화자의 이름을 첫째 괄호에 기입한다. 이 예제는 화자의 이름을 오른쪽 정렬하였습니다. 정렬은 l, c, r로 표기합니다. 각각 왼쪽, 가운데, 오른쪽 정렬을 의미합니다.\n\n\\begin{shadequote}[r]{안창호}\n진실은 반드시 따르는 자가 있고, 정의는 반드시 이루는 날이 있다.\n\\end{shadequote}\n\n\n타이틀 박스\n앞의 예제에서 ’학습목표’를 정의한 박스 서식을 타이틀 박스라 부르기로 한다. 이유는 여러 용도로 사용될 수 있어 목적으로 이름을 특정할 수 없기 때문이다. 학습 시나리오, 학습의 목표든 상관없다. 다음과 같은 라텍 명령으로 제공된다.\n\n\\snbox{text of title}{title fill color}{box fill color}{text of box} \n\n다음 명령은 학습 목표라는 타이틀을 갖는 박스를 생성합니다.\n\n\\snbox{학습 목표}{blue!30}{blue!10}{데이터의 분류 체계로서의 척도를 이해하고, \n이를 기반으로 한 R 데이터 객체를 이해한다. CSV 파일을 읽고, 데이터 프레임 \n객체로 CSV 파일을 생성할 수 있다.}\n\n\n예제\nexample 환경을 이용하고 인용 구문은 다음과 같다.\n\n\\begin{example}{number of example}\n  text of example\n\\end{example}\n\n그러나 예제는 다음처럼 생각보다 복잡합니다.\n\n장(chapter)에서 여러 예제가 있어서, 번호를 매겨야 한다.\n\n번호는 자동으로 채번되어야 추가 및 제거 시 번호의 오류를 줄인다.\n\n\n예제를 본문이나 다른 예제에서 참조하는 경우가 있다.\n\n\n크로스-레퍼런스(cross-reference)를 지원해야 한다.\n\n\n\n예제를 위해서 다음과 같이 장(chapter)의 시작부분에 환경변수를 정의해야 합니다. 장의 라벨과 예제의 순번을 위한 카운더를 설정했습니다.\n\n\\label{chap:bitpublish}                    % 장 라벨 정의\n\\newcounter{exam_num_bitpub}               % 새로운 카운터 생성\n\\setcounter{exam_num_bitpub}{0}            % 카운터 값 0으로 초기화\n\n다음은 예제를 위한 환경 설정과 예제를 구현하는 예제입니다. 크로스-레퍼런스를 위해서 예제에 대해서 ex1이라는 라벨을 example 환경 안에서 정의한 것을 주의깊게 보십시오.\n\n\n\\addtocounter{exam_num_bitpub}{1}          % 예제를 위한 카운터 1 증가\n\\begin{example}{\\ref{chap:bitpublish}.\\arabic{exam_num_bitpub}}\n\\examplelabel{ex1}{\\ref{chap:bitpublish}.\\arabic{exam_num_bitpub}}\nbitPublish의 서식 중에서 예제, 연습문제, 주의, 정보, 인용을 만들어 보아라.\n\\end{example}\n\nex1이라는 라벨을 레퍼런스하는 방법은 다음과 같다.\n\n예제 \\ref{ex1} 를 레퍼런스하기 위해서는 레퍼런스 명령 `\\ref{}`를 사용합니다.\n\n예제 2.1를 레퍼런스하기 위해서 레퍼런스 명령 \\ref{}를 사용한다.\n연습문제\n기술서나 학습서의 경우에는 연습문제를 제공하는 경우가 많다. bitPublish에서 연습문제 서식은 Exercise 환경을 이용한다.\n\n\\begin{Exercise}\n  text of exercise\n\\end{Exercise}\n\n또한 연습문제의 내용을 위해서 tasks 환경과 task 명령을 사용할 수 있다.\n\n\\begin{tasks}[label](1)\n \\task text of task\n \\task text of task\n\\end{tasks}\n\n다음 명령은 예제 장에서 사용한 연습문제를 기술한 라텍 스크립트다.\n\n\n\\begin{Exercise}\\label{EX2}\n\\noindent 1. 다음의 데이터를 R의 객체로 만들어 보아라.\n\\begin{tasks}[label=(\\arabic*)](1)\n \\task 합격, 불합격, 불합격, 합격, 불합격\n \\task 1등급, 2등급, 3등급, 2등급, 5등급, 3등급, 4등급, 4등급, 3등급, 3등급\n \\task 12㎝, 23㎝, 32㎝, 22㎝, 19㎝, 21㎝, 20㎝\n\\end{tasks}\n\n\\noindent 2. 다음의 데이터 객체를 외부 파일로 출력해 보아라.\n\\begin{tasks}[label=(\\arabic*)](1)\n \\task R의 datas 패키지에 포함되어 있는 women 데이터 프레임을 women.csv 파일로 출력해 보아라.\n \\task (1)의 파일을 다시 읽어 들여서 women2라는 이름의 데이터 프레임을 만들어라.\n\\end{tasks}\n\\end{Exercise}\n\n만약에 연습문제를 별도의 페이지에서 시각하고 싶다면 \\\\clearpage 명령어를 사용하면 됩니다.\n\n15.2.3 bitPublish 팁\nbitPublish는 LaTeX 기반 솔루션이기 때문에, 좀더 유용하게 사용하기 위해서 LaTeX에 대한 지식과 R 환경에서는 knitr 패키지를 이용해서 쿼토 문서를 마크다운 문서로 랜더링하기 때문에 knitr 청크에 대한 지식도 필요하다. 하지만, 너무 걱정할 필요는 없다. 심도있는 지식이 아닌, 기초적인 지식으로도 충분하게 책을 저작할 수 있고 챗GPT에 책 저작과 관련된 요청사항을 프롬프트로 전달하면 대부분의 문제는 도움을 받을 수 있다. 필자가 책을 저작할 때 자주 사용되는 LaTeX 팁을 공유한다.\n이미지 삽입\n이미지 파일을 삽입하기 위해서는 다음처럼 knitr 패키지의 include_graphics() 함수를 사용하는 것을 추천한다. 이 때, knitr 청크는 다음과 같이 사용한다.\n```{r}\n#| label: fig-label\n#| echo: false\n#| out-width: \"90%\"\n#| fig-align: \"center\"\n#| fig-cap: \"이미지 캡션\"\n#| fig-pos: \"htb!\"\n\nknitr::include_graphics(\"이미지 파일이름.png\")\n```\n이 예제는 다음과 같은 작업을 수행한다.\n\n`이미지 파일이름.png’ 파일을 본문에 삽입하는데,\n\n이미지의 크기는 본문 너비의 90%에 해당하게 적용하며, 이미지는 가운데 정렬로 배치함\n\n\n이미지의 캡션은 “이미지 캡션”으로 정의하며,\n크로스-레퍼런스를 위한 라벨의 이름은 `fig-label’로 설정하는데, 라벨의 접두어 `fig-’를 사용한 `fig-라벨이름’의 포맷을 권장함\n\n이미지의 페이지 배치는\n\n이미지를 정확히 해당 위치(here)에 일단 배치,\n여의치 않으면, 그 다음 페이지 가장 윗부분에 배치,\n만약 이것도 여의치 않으면, 그 다음 페이지 가장 아랫 부분에 배치.\n\n\n\n이미지 페이지 배치는 다음과 같은 fig-pos(float?) 옵션으로 지정한다.\n\n\n\n\n\n\n플로트 지정자\n의미\n\n\n\nh\nhere의 약자로, 본문에 위치한 그 자리에 이미지 배치\n\n\nt\ntop의 약자로, 이미지가 위치한 페이지의 가장 윗부분에 배치. 크기가 맞지 않으면 다음 페이지의 가장 윗쪽에 배치\n\n\nb\nbottom의 약자로, 이미지가 위치한 페이지 가장 아래에 이미지 배치. 크기가 맞지 않으면 다음 페이지의 가장 아래에 배치\n\n\np\n이미지가 텍스트 없는 단독 페이지를 따로 만들어 배치\n\n\n!\n적절한 위치 결정을 위해, 적용한 지정자 재정의. 지정자가 나열된 순서에 따라 적절한 위치에 이미지 삽입\n\n\n\n플로트 지정자 예제에서 사용한 “htb!”는 일단 이미지를 정확히 그 위치(h)에 배치하려 하고, 여의치 않으면 다음은 위(t)이기 때문에 그 다음 페이지 가장 윗부분에 배치한다. 만약 그것도 여의치 않으면 그 다음은 아래(b)이기 때문에 그 다음 페이지 가장 아랫 부분에 배치한다.\n그런데 bitPublish에서 fig-pos 기본값3이 “htb!”로 설정되었기 때문에 이 설정을 생략해도 적당한 페이지에 이미지를 배치한다. fig-align 기본값도 “center”로 설정되어 있다.\n\n\n\n\n\n\nfig-pos과 label\n\n\n\n웹 페이지로 배포하는 문서는 페이지로 구분되지 않기 때문에 이미지는 항상 그(here) 자리에 출력되기 때문에 본문에서 “다음 그림처럼”과 같은 표현이 가능합니다만, 페이지가 구분되는 책에서는 이 표현은 적절하지 않다. 왜냐하면 페이지 상황에 따라 이미지가 다음 페이지로 넘어갈 수 있는 등 저작 과정에서는 예측이 불가능하다.\n그래서 ’fig-pos’의 값을 “htb!”으로 설정하고 ’label’을 지정하여 크로스-레퍼런스를 이용해서, “그림 2.1처럼”과 같이 표현하는 것이 권장된다.\n\n\nR 그래픽스\nR 스크립트로 그리는 R 그래픽스는 knitr 청크(chunk)를 이용해서, R 스크립트를 실행하여 삽입한다.\n```{r}\n#| label: fig-hist\n#| echo: false\n#| fig-width: 6\n#| fig-height: 4\n#| out-width: \"70%\"\n#| fig-cap: \"정규분포 히스토그램\"\nset.seed(123)\nhist(rnorm(500), col = \"lightblue\", main = \"정규분포의 히스토그램\")\n```\n\n\n\n\n\n\n\n그림 15.3: 정규분포 히스토그램\n\n\n\n\n그런데 R 플롯에 한글이 포함될 경우에 그림 그림 15.3 처럼 한글이 출력되지 않는 문제가 발생된다.\n한글을 정상적으로 출력하기 위해서는 문서의 맨 앞에 다음 스크립트를 추가한다.\n```{r init, include=FALSE}\nsource(here::here(\"_extensions\", \"bit2r\", \"bitPublish\", \"init_environments.R\"))\n```\n그런 후, R 플롯을 그리는 knitr 청크에 nanum 옵션의 값을 true로 추가한다. 이 설정은 나눔스퀘어 폰트를 사용해서 R 플롯을 시각화한다는 것을 의미한다. 다음 스크립트는 그림 [fig-hist2] 같은 R 그래픽스 플롯을 출력한다.\n```{r}\n#| label: fig-hist2\n#| echo: false\n#| fig-width: 6\n#| fig-height: 4\n#| out-width: \"70%\"\n#| fig-cap: \"정규분포 히스토그램\"\n#| nanum: true\nset.seed(123)\n\nhist(rnorm(500), col = \"lightblue\", main = \"정규분포의 히스토그램\")\n```\n\n\n\n\n\n\n\n그림 15.4: 정규분포 히스토그램\n\n\n\n\n만약 한글이 포함되지 않은 플롯에서 라틴 문자에 사용할 글꼴로 Nimbus Sans L 글꼴을 사용하려면, nimbus 옵션의 값을 true로 추가하면 된다.\nggplot2 그래픽스\nggplot2 그래픽스도 별도의 설정없이 한글이 출력된다. 테마는 hrbrthemes 패키지의 theme_ipsum() 함수를 사용하며, 글꼴은 R 그래픽스와 동일한 방법으로 나눔스퀘어 글꼴을 사용할 수 있다.\n다음 스크립트는 그림 [fig-hist3]같은 ggplot2 그래픽스 플롯을 출력한다.\n```{r}\n#| label: fig-hist3\n#| echo: false\n#| fig-width: 6\n#| fig-height: 4\n#| out-width: \"70%\"\n#| fig-cap: \"ggplot2 정규분포 히스토그램\"\n#| nanum: true\nset.seed(123)\nrandom_norm &lt;- data.frame(rnd = rnorm(500))\n\nggplot(random_norm, aes(x = rnd)) +\n  geom_histogram(color = \"darkblue\", fill = \"lightblue\") +\n  labs(title = \"ggplot2의 히스토그램\",\n       subtitle = \"500개 정규분포 난수\")\n```\n\n\n\n\n\n\n\n그림 15.5: ggplot2 정규분포 히스토그램\n\n\n\n\n표 삽입\n본문에 표를 삽입하는 방법에 다음처럼 3가지 방법을 사용할 수 있다.\n\n마크다운을 이용한 표\n\n캡션의 핸들링과 라벨의 지정에 취약해서 권하지 않음\n그러나, 캡션과 라벨을 사용하지 않을 때에는 유용함\n\n\nLaTeX을 이용한 표\n\n가장 세밀하게 조정할 수 있으나, LaTeX에 대한 지식이 필요함\n\n\nR을 이용한 표\n\nR에 익숙하면 쉽게 사용할 수 있음\n\n\n\n마크다운을 이용한 표\n마크다운을 이용한 표 생성의 경우에는 캡션이 표 내부에 위치하고, 라벨을 지정할 수 없어서 표를 삽입하는 방법으로 적절하지 않다.\n다음과 같이 표를 정의합니다. 캡션과 라벨을 사용하지 않을 때에는 유용합니다.\n| 기본값  | 왼쪽 정렬 | 가운데 정렬 | 오른쪽 정렬 |\n|---------|:----------|:-----------:|------------:|\n|내용 1   |내용 2     |내용 3       |내용 4       |\n|내용 5   |내용 6     |내용 7       |내용 8       |\n|내용 9   |내용 10    |내용 11      |내용 12      |\n\nTable: 마크다운 기반 표    \n\n마크다운 기반 표\n\n기본값\n왼쪽 정렬\n가운데 정렬\n오른쪽 정렬\n\n\n\n내용 1\n내용 2\n내용 3\n내용 4\n\n\n내용 5\n내용 6\n내용 7\n내용 8\n\n\n내용 9\n내용 10\n내용 11\n내용 12\n\n\nLaTeX을 이용한 표\nLaTeX을 이용한 표를 삽입하는 방법은 LaTeX 스크립트를 기술하는 것이다. 다음처럼 테이블을 생성하는 LaTeX 스크립트를 기술한다.\n\n\n\\begin{table}[htb!]\n\\centering\n\\begin{tabular}[]{llcr}\n\\toprule\n기본값  & 왼쪽 정렬 & 가운데 정렬 & 오른쪽 정렬 \\\\\n\\midrule\n내용 1 & 내용 2  & 내용 3   & 내용 4    \\\\\n내용 5 & 내용 6  & 내용 7   & 내용 8    \\\\\n내용 9 & 내용 10 & 내용 11  & 내용 12   \\\\\n\\bottomrule\n\\end{tabular}\n\\caption{\\label{tab-latex}LaTex 기반 표}\n\\end{table}\n\nR을 이용한 표\nR을 이용해서 표를 만드는 방법에 대표적인 것이 knitr 패키지 kable() 함수와 kableExtra 패키지 kable_styling() 함수를 사용하는 방법이다. 그러나 이 방법은 캡션의 위치가 표의 위에 위치하는 것과 아직 쿼토에서 크로스-레퍼런스가 지원되지 않는 관계로 gt 패키지 gt() 함수를 사용한다. 이 함수로 크로스-레퍼런스가 지원되지 않았으나, as_latex_with_caption() 함수가 이를 지원한다. 이 함수는 bitPublish에서 제공하는 사용자 정의 함수다.\n다음은 표 [tab-r]생성한다.\n\n```{r}\n#| echo: false\ntab &lt;- tibble::tribble(\n  ~기본값, ~`왼쪽 정렬`, ~`가운데 정렬`, ~`오른쪽 정렬`,\n  \"내용 1\", \"내용 2\", \"내용 3\", \"내용 4\",\n  \"내용 5\", \"내용 6\", \"내용 7\", \"내용 8\",\n  \"내용 9\", \"내용 10\", \"내용 11\", \"내용 12\"\n)\n\ntab |&gt; \n  gt::gt() |&gt; \n  gt::cols_align(align = \"left\", columns = `왼쪽 정렬`) |&gt; \n  gt::cols_align(align = \"center\", columns = `가운데 정렬`) |&gt; \n  gt::cols_align(align = \"right\", columns = `오른쪽 정렬`) |&gt;\n  as_latex_with_caption(label = \"tab-r\", caption = \"R 기반 표\")\n```\n수식 입력\n수식 입력은 Latex의 수학 공식을 입력하는 TeX 문법을 따른다.\n인라인 수식의 경우에는 \\$와 \\$ 사이에서 수식을 정의하고, 한 라인 전체에 수식을 사용하기 위해서는 \\$\\$와 \\$\\$ 사이에서 수식을 정의한다.\n\n데이터가 $x_1, x_2, x_3, \\cdots, x_n$일 때, 도수분포표는 다음과 같이 만든다.\n\n데이터가 \\(x_1, x_2, x_3, \\cdots, x_n\\)일 때, 도수분포표는 다음과 같이 만든다.\n\n누적상대도수: \n$$\nC F_k=\\sum_{i=1}^k f_i^R=\\frac{F_k}{n}\n$$\n\n누적상대도수: \\[\nC F_k=\\sum_{i=1}^k f_i^R=\\frac{F_k}{n}\n\\]\n\n15.2.4 찾아보기 등록\nLaTeX의 찾아보기(인덱싱) 기능을 활성화하기 위해, 이미 bitPublish는 프리엠블에 다음처럼 makeidx 패키지를 로드하고 있다.\n\n\\usepackage{makeidx}\n\n또한 프리엠블에서는 찾아보기 기능을 활성화하기 위해서 다음의 명령을 포함했다.\n\n\\makeindex\n\n그리고 문서에 찾아보기 색인을 표시하기 위한 다음의 명령어를 사용해야 하는데,\n\n\\printindex\n\n이 명령어는 _extensions/bit2r/bitPublish/_extension.yml 파일에 다음과 같이 설정되어 있다.\n\ninclude-after-body:  \n  - text: |      \n      \\printindex  \n\n그러므로 찾아보기에 색인 등록을 위해서는 저자가 작성할 본문에 다음 인덱스 명령을 사용하기만 하면 된다.\n\n\\index{key}\n\n다음 예는 찾아보기 색인에 척도를 등록하고 LaTeX이 알아서 해당 문장이 위치한 페이지를 찾아보기 색인과 연결해 준다.\n\n그 현상에 숫자를 부여한 것을 척도\\index{척도}라 한다.\n\n\n\n\n\n\n\n찾아보기에서의 언더라인의 표현 R마크다운 bookdown\n\n\n\nLaTeX에서는 언더라인(_)은 특수문자로 인식된다. 그래서 문자로서 언더라인을 입력하려면 역슬래시(\\)를 붙여야 한다. 그러므로 \\index{key} 명령의 key 값에 언더라인이 있다면 다음처럼 역슬래시를 붙여 표현해야 한다.\n\\index{include\\_graphics()}\n\n\n자동조사 처리\n예제, 그림, 표 등에 라벨을 지정해서 크로스-레퍼런스를 구현하면 저작자는 번호의 증감에 신경쓸 필요가 없다. 그림과 그림 사이에 또 하나의 그림을 삽입하거나, 또는 기존 그림을 제거함으로서 빠뀌게 될 참조 번호를 수정할 필요가 없다. LaTeX이 알아서 번호를 수정해주기 때문이다.\n다음과 같이 출력되는 본문이 있다고 가정하자.\n그림 2.3과 같이 정규분포를 따르는 히스토그램을 그린다.\n그런데 앞 부분에 크로스-레퍼런스를 적용한 그림 하나를 추가하면 이 문장은 다음과 같이 바뀐다.\n그림 2.4과 같이 정규분포를 따르는 히스토그램을 그린다.\n그림에 크로스-레퍼런스를 적용해서 그림의 번호 3이 4로 정상적으로 변경되었는데, 조사가 어색하다. `그림 2.4과’가 아니라 `그림 2.4와’로 출력되야하기 때문이다. 왜냐하면 우리말 조사에는 다음과 같은 규칙이 있기 때문이다. 앞단어의 끝소리의 자소에 따라 다음처럼 조사가 결정되기 때문이다.(kim2007?)\n\n\n\n\n\n\n\n\n\n\n\n앞단어 끝소리\n와 / 과\n을 / 를\n이 / 가\n은 / 는\n(이)라\n(으)로\n\n\n\n리을(ㄹ)\n과\n을\n이\n은\n이라\n로\n\n\nㄹ 아닌 종성\n과\n을\n이\n은\n이라\n으로\n\n\n중성\n와\n를\n가\n는\n라\n로\n\n\n\nLaTeX이 크로스-레퍼런스에서 계산되는 아라비아 숫자의 한글 독음 끝소리 자소에 따라 자동으로 자동조사 처리를 하기 위해서는, 크로스-레퍼런스를 위한 \\ref{} 명령에 붙는 조사에 역 슬래시(\\)불여주면 된다.\n다음은 크로스-레퍼런스에서 번호가 계산되었다는 전제로 자동조사 처리를 테스트한 사례다.\n\n그림 2.3\\와 그림 2.4\\은 같이 정규분포를 따르는 히스토그램을 그린다. \n그림 2.3\\과 그림 2.4\\는 같이 정규분포를 따르는 히스토그램을 그린다.\n\n그림 2.3\\와 그림 2.4\\은 같이 정규분포를 따르는 히스토그램을 그린다.\n그림 2.3\\과 그림 2.4\\는 같이 정규분포를 따르는 히스토그램을 그린다.\n참고문헌 등록\n참고문헌(bibliography) 등록은 LaTeX의 biblatex 패키지를 이용한다. 이 패키지를 사용할 수 있는 설정은 이미 되어 있으니, ‘bitPublish를 이용하여 한글 책 조판하기’ 예제를 위한 다음의 `_quarto.yml’을 참고하여 참고문헌 등록을 적용한다.\nbook:\n  title: \"bitPublish를 이용하여 한글 책 조판하기\"\n  chapters:\n    - index.qmd\n    - chap_exams.qmd\n    - chap_intro_bitpublish.qmd\n    - references.qmd\nbibliography: references.bib\nlink-citations: false\n상기 YAML 헤더에서 chapters 옵션은 책에 장을 추가하는데 ‘references.qmd’ 파일이 참고문헌 등록에 해당하는 파일이다. 이 설정은 참고문헌을 나타내는 시작 페이지의 제목을 “참고문헌”으로 표기한다.\n\n\n\n\n\n그림 15.6: bitPublish 참고문헌\n\n\n그리고 참고문헌에 등록하기 위해서는 YAML 헤더에 bibliography 옵션에 기술된 ‘references.bib’ 파일에 참고문헌을 정의한다.\n다음은 ‘references.bib’ 파일에 정의된 일부분으로 참고한 도서와 웹 사이트의 사례다.\n@book{rstat,\n  author = {유충현, 이상호},\n  title = {R을 이용한 통계학 이해},\n  year = {2013},\n  publisher = {자유아카데미}\n}\n\n@misc{quarto,\n  author = {posit},\n  title = {Welcome to Quarto},\n  howpublished = {\\url{https://quarto.org/}},\n  note = {Accessed: 2023-05-15}\n}\n‘references.bib’ 파일에 참고문헌을 정의했다고 `참고문헌’이라는 제목의 참고문헌에 등록되지 않는다. 참고문헌에 등록하기 위해서는, 참고한 본문 내용에 인용(citation) 명령을 적용해야 한다.\n다음과 같은 LaTeX 인용 명령을 사용한다.\n\\cite{key}\n다음의 \\\\cite{} 명령은 ‘참고 문헌’ 페이지에 참고한 문헌에 대한 정보를 기술하고, 인용된 본문에 링크를 연결해준다.\nQuarto 홈페이지의 Quarto에 대한 소개\\cite{quarto}는 다음과 같다. 이러쿵 저러쿵...\n마크다운에도 인용을 위한 다음과 같은 명령이 있다.\n[@key]\n그러므로 다음은 앞에서의 LaTeX 명령과 동일한 작업을 수행한다.\nQuarto 홈페이지의 Quarto에 대한 소개[@quarto]는 다음과 같다. 이러쿵 저러쿵...\n\n\n\n\n\n그림 15.7: bitPublish 인용\n\n\n\\begin{shadequote}{}\n인용의 경우에는 LaTeX 명령보다 마크다운 명령을 사용할 것을 권장합니다. 왜냐하면 bitPublish가 현재는 LaTeX 기반의 PDF 파일 포맷만 지원하지만, 향후 HTML, ePub 포맷과 같은 전자책 저작도 지원할 계획입니다. 호환을 위한 LaTeX 명령을 자제하는 것이 좋습니다.\n\\end{shadequote}",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>(전자)책 출판</span>"
    ]
  },
  {
    "objectID": "dw_book.html#연습문제-1",
    "href": "dw_book.html#연습문제-1",
    "title": "\n15  (전자)책 출판\n",
    "section": "연습문제",
    "text": "연습문제\n객관식\n\n쿼토로 제작된 책에서 사용할 수 있는 출력 형식은 무엇인가요?\n\nHTML\nPDF\nEPUB\n모두 다\n\n\n\n\n쿼토 책 출판의 주요 장점 중 하나는 무엇인가요?\n\n빠른 인쇄 속도\n고급 디자인 옵션\n복잡한 프로그래밍 요구\n코드, 데이터, 텍스트의 통합\n\n\n\n\n쿼토 책 출판 시 고려해야 할 중요한 요소는 무엇인가요?\n\n페이지 수\n글꼴 크기\n독자 대상\n표지 디자인\n\n\n서술형\n\n쿼토를 사용하여 책을 출판하는 과정에서 고려해야 하는 내용의 구성 요소는 무엇인가요?\n\n\n쿼토 책 출판에서 코드와 데이터의 통합이 중요한 이유는 무엇인가요?",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>(전자)책 출판</span>"
    ]
  },
  {
    "objectID": "dw_book.html#footnotes",
    "href": "dw_book.html#footnotes",
    "title": "\n15  (전자)책 출판\n",
    "section": "",
    "text": "serif 폰트는 바탕체 폰트를 의미합니다. 글자의 획에서 부리처럼 날카롭게 튀어나온 부분을 세리프(serif)라 합니다. 영어는 로만체, 한국어의 경우에는 과거에 명조체라는 이름으로 통용되던 바탕체 서체를 의미합니다.↩︎\nsans-serif 폰트는 돋움체 폰트를 의미합니다. 프랑스어로 sans는 “~가 없이”라는 뜻으로, sans-serif는 세리프가 없는 서체입니다. 한국어의 경우에는 과거에 고딕체라는 이름으로 통용되던 돋움체 서체를 의미합니다.↩︎\n“htb!”을 기본값으로 설정하기 위해서는, 뒷부분에서 설명할 플롯에서의 한글 폰트 적용을 위한 init_environments.R 파일을 로드하는 설정을 전제로 한다.↩︎",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>(전자)책 출판</span>"
    ]
  },
  {
    "objectID": "dw_params.html",
    "href": "dw_params.html",
    "title": "16  변수 설정 문서",
    "section": "",
    "text": "16.1 문서 프로그래밍\n일반적인 보고서 작성을 위한 작업흐름과 필요한 요소는 다음과 같다. 데이터 기반 보고서를 작성할 때 데이터와 데이터를 처리하는데 필요한 R/파이썬/SAS/SPSS/파이썬 스크립트, 마크다운으로 작성한 문서가 포함된다. 즉, 데이터를 데이터베이스, 웹, 파일형태로 가져오면 R 스크립트를 통해 전처리를 하고 필요한 통계량을 뽑아내고 시각적으로 히스토그램, 막대그래프, 원그래프, 시계열 추세 선 그래프 등이 포함된다. 그리고, 데이터에서 나온 다양한 통계량 및 시각적 산출물에 대한 견해와 함께 최종 보고서 작성자의 의견을 덧붙여 마무리하고 보고서 작성자, 참고문헌, 목차, 각주 등을 붙여 보고서를 완성한다.\nGUI가 아닌 CLI 방식으로 데이터를 분석한 후, 분석 결과를 .R, .py 파일로 저장한다. 코드와 문서가 결합된 .qmd 파일로 작성하여 컴퓨터 자동화를 통해 원하는 형태 문서인 .pdf, .html, .docx 파일을 생성한다. 생성된 문서들은 웹용, PC 기반 배포 문서, 추가 저작이 가능한 문서 형태로 배포한다.",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>변수 설정 문서</span>"
    ]
  },
  {
    "objectID": "dw_params.html#문서-프로그래밍",
    "href": "dw_params.html#문서-프로그래밍",
    "title": "16  변수 설정 문서",
    "section": "",
    "text": "그림 16.1: 문학적 프로그래밍(Knuth 1984) 구성요소와 작업흐름",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>변수 설정 문서</span>"
    ]
  },
  {
    "objectID": "dw_params.html#보고서-자동-생성",
    "href": "dw_params.html#보고서-자동-생성",
    "title": "16  변수 설정 문서",
    "section": "16.2 보고서 자동 생성",
    "text": "16.2 보고서 자동 생성\n하루일과는 아침에 일어나서 밥을 먹고, 학교나 회사에 출근하고, 점심먹고, 오후에 놀거나 추가 작업을 하고, 퇴근을 하고 저녁을 먹고, 쉬고 잠을 자는 과정이 일반적인 일상이다. 이런 과정이 매일 매일 반복된다. 마찬가지로 보고서도 이런 일상적인 과정을 담아내야 한다. 즉, 일별로 생성되는 데이터를 동일한 형태의 보고서로 작성하게 된다. 이를 위해 상기 “일반적인 보고서 작성 흐름”을 복사해서 붙여넣기 신공을 발휘하기 보다는 데이터를 바꿔넣고 해당 데이터를 매개변수(parameter)로 넘겨 일별 보고서 생성을 자동화시킨다.\n따라서, 일자 정보를 .qmd 파일에 전달하는 과정을 거치는 것이 필요하고, 통계보고서를 자동생성시키는 과정을 별도 스크립트로 만들어서 실행시킨다.\n\n\n\n\n\n\n그림 16.2: 일별 보고서 자동생성",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>변수 설정 문서</span>"
    ]
  },
  {
    "objectID": "dw_params.html#작업방법",
    "href": "dw_params.html#작업방법",
    "title": "16  변수 설정 문서",
    "section": "16.3 작업방법",
    "text": "16.3 작업방법\n변수 설정 문서는 프로그래밍 함수의 개념을 문서 생성에 확장한 것으로 문서 제작자는 단 하나의 템플릿을 이용해 입력값을 달리하여 맞춤형 문서를 생성할 수 있다. 먼저, ‘보고서.qmd’라는 쿼토 보고서 문서를 하나 생성해야 한다. 이는 마치 R/파이썬에서 스크립트를 작성하는 것과 유사하다. 다음 단계로 R/파이썬 함수를 만드는 과정이 필요한데 YAML 헤더에 인자를 params으로 설정한다. 인자는 하나일 필요는 없고 여러 개일 수도 있다. 템플릿.qmd 파일에 ’params’ 옵션을 사용해 ‘province’ 변수 값을 ’서울특별시’와 같이 지정하면, 해당 지역에 맞는 내용을 담은 문서를 생성할 수 있다. 템플릿과 데이터, 스크립트를 조합하여 최종 PDF, HTML, DOCX 형태 최종 문서를 생성할 수 있다. 이런 식으로 변수 설정 문서는 하나의 템플릿에서 시작해 다수의 맞춤형 문서를 효율적으로 생성할 수 있는 방법을 제공한다.\n\n\n\n\n\n\n그림 16.3: 매개변수 문서 제작과정\n\n\n\n변수설정 보고서 실제 사례로 제19대 대통령선거에서 시도별 특성을 반영한 개별 보고서를 PDF로 작성하는 과정을 살펴보자.\n\n16.3.1 기본 보고서\nreport.qmd 보고서 파일은 PDF 파일을 제작하기 위해 YAML 헤더 .qmd 파일에 latex-engine: xelatex으로 xelatex을 설정하고 로컬 컴퓨터에 설치된 CJKmainfont: NanumGothic을 통해 NanumGothic 글꼴을 지정했다.\n---\ntitle: \"대통령 선거 득표 보고서\"\nsubtitle: \"경기도 \"\nauthor:\n    name: 이광춘\n    affilates: 한국 R 사용자회\ndate: \"`r Sys.Date()`\"\nformat:\n  pdf:\n    latex-engine: xelatex   \n    keep-tex: false          \nCJKmainfont: NanumGothic\nreport.qmd 파일을 쿼토로 컴파일하게 되면 report.pdf이 생성된다.\n\n\n\n\n\n\n그림 16.4: 쿼토 기본 PDF 보고서",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>변수 설정 문서</span>"
    ]
  },
  {
    "objectID": "dw_params.html#매개변수-보고서",
    "href": "dw_params.html#매개변수-보고서",
    "title": "16  변수 설정 문서",
    "section": "16.4 매개변수 보고서",
    "text": "16.4 매개변수 보고서\nreport_template.qmd 파일은 report.qmd 파일을 템플릿으로 사용하여 params 옵션을 사용해 province 변수 값을 서울특별시로 지정해서 매개변수를 보고서에 적용했다. 주목해서 살펴볼 점은 subtitle: 부분에 r params$province으로 변수값 중 province를 지정했다는 점이다. province 변수 값을 서울특별시 대신 다른 시도로 변경하면 변경된 값이 그대로 적용된다.\n---\ntitle: \"대통령 선거 득표 보고서\"\nsubtitle: \"`r params$province`\"\nauthor:\n    name: 이광춘\n    affilates: 한국 R 사용자회\ndate: \"`r Sys.Date()`\"\nformat:\n  pdf:\n    latex-engine: xelatex   \n    keep-tex: false          \nCJKmainfont: NanumGothic\nparams:\n  province: \"서울특별시\"\n한걸음 더 나아가 r params$province 변수값을 마크다운 뿐만 아니라 R 코드에도 적용한다는 점이다. params$province를 변수로 필요한 곳(마크다운, R/파이썬 코드)에 적용시킴으로써 유연한 보고서를 복사하여 붙여넣기 대신하여 자유자재로 생성할 수 있다.\n---\n\n# 대선 득표 데이터 {#election-dataset}\n\n엑셀로 정리된 제19대 대통령선거 데이터 중 `r params$province` 데이터만 가져와서  시각화와 표제작을 위한 적절한 형태로 정제 작업을 거친다.",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>변수 설정 문서</span>"
    ]
  },
  {
    "objectID": "dw_params.html#보고서-자동-생성-1",
    "href": "dw_params.html#보고서-자동-생성-1",
    "title": "16  변수 설정 문서",
    "section": "16.5 보고서 자동 생성",
    "text": "16.5 보고서 자동 생성\n시도별 PDF 보고서를 달리하여 생성하기 위해서는 데이터와 스크립트가 필요한데 본 보고서의 경우 데이터가 복잡하지 않고 단순히 시도명만 필요하기 때문에 제19대 대통령 선거 결과 데이터에서 시도명을 추출하여 벡터로 만든 후에 이를 quarto 패키지 quarto::quarto_render 함수에 전달한다. for 반복문을 돌리면서 시도명을 쿼토 report_template.qmd 보고서에 전달하여 완성된 .qmd 파일을 생성한 후 PDF 파일을 제작하는 과정을 전체 시도에 대해서 반복한다.\n# 0. 환경설정 ---------------------------------------\nlibrary(tidyverse)\nlibrary(quarto)\n\n# 1. 시도명 ---------------------------------------\nprovinces &lt;- c(\"강원도\", \"경기도\", \"경상남도\", \"경상북도\", \"광주광역시\", \n               \"대구광역시\", \"대전광역시\", \"부산광역시\", \"서울특별시\", \n               \"세종특별자치시\", \"울산광역시\", \"인천광역시\", \"전라남도\", \n               \"전라북도\", \"제주특별자치도\", \"충청남도\", \"충청북도\")\n\n# 2. 보고서 만들기 ---------------------------------------\nfor(province in provinces) {\n  quarto_render(input = str_glue(\"{here::here()}/report_template.qmd\"),\n                execute_params = list(province = province),\n                output_file = str_glue(\"report_{province}.pdf\"))\n}\n현재기준 quarto quarto_render 함수에 출력 디렉토리를 지정하는 기능은 별도 제공되고 있지 않아 자동으로 생성된 PDF 보고서는 작업 디렉토리 루트에 저장된다. 이것도 자동화하기 위해 move 기능을 추가로 와일드카드가 포함된 정규표현식을 사용하여 코드를 작성하면 된다.\n\n\n\n\n\n\n그림 16.5: 시도별 PDF 분석보고서 자동생성결과",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>변수 설정 문서</span>"
    ]
  },
  {
    "objectID": "dw_params.html#연습문제",
    "href": "dw_params.html#연습문제",
    "title": "16  변수 설정 문서",
    "section": "연습문제",
    "text": "연습문제\n\n객관식\n\n쿼토에서 매개변수를 사용하는 주된 목적은 무엇인가요?\n\n문서의 속도 향상\n다양한 데이터 소스 관리\n문서 내용의 동적 변경\n보안 강화\n\n\n\n매개변수화 문서에서 사용할 수 있는 입력 유형은 무엇인가요?\n\n텍스트\n숫자\n날짜\n모두 다\n\n\n\n쿼토에서 매개변수화 기능은 어떤 유형의 파일에 사용할 수 있나요?\n\n마크다운 파일\nHTML 파일\nPDF 파일\n위 모두\n\n\n\n\n서술형\n\n매개변수화 문서 제작 시 고려해야 할 주요 설계 원칙은 무엇인가요?\n\n\n쿼토에서 매개변수화 문서를 사용하는 경우의 예시 시나리오는 무엇이 있을까요?\n\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming”. Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "저작물",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>변수 설정 문서</span>"
    ]
  },
  {
    "objectID": "gpt_writing.html",
    "href": "gpt_writing.html",
    "title": "17  챗GPT 쿼토",
    "section": "",
    "text": "17.1 챗GPT 등장\n챗GPT 등장은 글쓰기 패러다임을 혁신적으로 바꾸고 있다. 전통적인 글쓰기는 문법, 어휘, 문장 구조 등 언어의 다양한 요소를 활용하여 아이디어나 메시지를 구조화하는 데 주력했고, 전통적인 글쓰기에서 저작은 종이와 펜, 출판은 워드 프로세서 도구로 필요한데, 디지털 도구에 익숙하지 않은 사람들에게는 글쓰기 자체가 큰 부담이 되었다.\n그러나 챗GPT는 뛰어난 자연어 처리 능력 덕분에 저자는 복잡한 문법이나 어휘 없이도 자신의 생각을 쉽게 표현할 수 있을 뿐만 아니라, 챗GPT는 다양한 형태의 콘텐츠, 예를 들어 수식, 표, 그래프, 다이어그램, 코드 등을 쉽게 생성하고 편집할 수 있어, 글쓰기 범위가 전통적인 텍스트를 넘어 다양한 미디어로 확장되고 있다.\n펜과 종이로 저작하여 종이 매체를 중심으로 인쇄출판이 주류를 이뤘던 시대를 워드 프로세서로 저작하여 웹사이트에 디지털 출판하는 시대로 바뀌었던 것에 비견될만큼 챗GPT는 디지털 글쓰기의 패러다임을 혁신적으로 바꾸고 있다. 챗GPT Text-to-X 기능은 글쓰기 가능성을 더욱 확장시켜 저자는 아이디어나 메시지를 표현하고 전달하는데 단순한 텍스트 입력을 넘어 수식, 그래프, 표, 다이어그램, 코드 등 다양한 형태의 콘텐츠를 쉽게 생성할 수 있게 됨에 따라, 글쓰기 경계를 훨씬 넓히게 되었다. 챗GPT 시대 누구나 복잡한 도구나 전문 지식 없이도 자신의 아이디어나 정보를 풍부하게 표현할 수 있게 되었다.",
    "crumbs": [
      "챗GPT 활용",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>챗GPT 쿼토</span>"
    ]
  },
  {
    "objectID": "gpt_writing.html#글쓰기-진화과정",
    "href": "gpt_writing.html#글쓰기-진화과정",
    "title": "17  챗GPT 쿼토",
    "section": "17.2 글쓰기 진화과정",
    "text": "17.2 글쓰기 진화과정\n글쓰기 역사는 인류 문명과 밀접하게 연결되어 있다. 고대에는 점토판과 쐐기를 사용하여 기록을 남겼다. 중세에 이르러 필경사가 등장하고, 붓과 머루, 잉크와 깃털펜이 사용되기 시작했다. 근대에 들어서면 타자기가 등장하고, 1868년에 첫 타자기가, 1902년에 전동타자기가 개발되었다.\n컴퓨터 등장은 글쓰기 패러다임을 또 다시 바꾸었다. 1946년에 에니악 컴퓨터가, 1964년에 IBM 워드프로세서 MT/ST가 등장했다. 이후에는 IBM 저장장치 MagCards가 1969년에, TeX가 1978년에, LaTeX이 1984년 등장하면서 디지털 글쓰기 기술적 토대가 탄탄해졌다.\n1983년에 마이크로소프트 워드 1.0의 출시로 개인용 컴퓨터에서도 글쓰기가 가능해지면서 디지털 글쓰기의 새로운 시대가 열렸다. 그 후로 프로그래밍 언어와 글쓰기가 통합되기 시작했고, 마크다운, R, 파이썬 등을 활용한 글쓰기가 일반화되면서 문학적 프로그래밍(Literate Programming)(Knuth 1984)이라는 새로운 형태의 글쓰기를 가능하게 했다. 최근에는 챗GPT의 등장으로 문학적 프로그래밍이 한 단계 더 진화하고 있다. 챗GPT는 자연어 처리 능력을 활용하여 코드와 텍스트, 그리고 다양한 미디어 요소를 통합적으로 다룰 수 있어, 디지털 글쓰기의 패러다임을 혁신적으로 바꾸고 있다.\n\n\n\n챗GPT 디지털 글쓰기 진화과정",
    "crumbs": [
      "챗GPT 활용",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>챗GPT 쿼토</span>"
    ]
  },
  {
    "objectID": "gpt_writing.html#글쓰기-작업흐름",
    "href": "gpt_writing.html#글쓰기-작업흐름",
    "title": "17  챗GPT 쿼토",
    "section": "17.3 글쓰기 작업흐름",
    "text": "17.3 글쓰기 작업흐름\n챗GPT 디지털 글쓰기의 일반적인 작업흐름은 더 세분화할 수 있지만, “디지털 글쓰기”, “구조와 외양”, “배포와 공유”로 구분할 수 있다.\n첫 번째 단계인 “디지털 글쓰기”에서는 글감을 시작점으로 하여 다양한 형태의 콘텐츠를 생성하는데 수식, 표, 그래프, 파이썬/R/SQL 코드, 그림, 도형 등이 포함된다. 자연어로 챗GPT를 통해 다양한 저작물 구성요소를 쉽고 빠르게 생성하고 편집할 수 있다.\n두 번째 단계인 “구조와 외양”에서 문서의 전반적인 구조와 서식을 결정한다. 문서의 구조, 서식, 레이아웃, 그리고 참조 등이 확립되는데 챗GPT 부조종사(Copilot)이 유령 텍스트(Ghost Text) 기능을 통해 자연어로 저자 작업을 더욱 효율적으로 지원한다.\n마지막 단계인 “배포와 공유”에서 작성된 저작물이 독자에게 다양한 매체를 통해 전달한다. 독자가 반듯이 사람일 필요는 없고 독자가 저작자 자신일 수도 있으며, 심지어 기계일 수도 있다. 챗GPT 배포와 공유 과정에서 발생되는 다양한 기술적 문제를 해결해주는 공동 저작자이자 동료로서 디지털 글쓰기 전체적인 흐름을 완성한다.\n\n\n\n\n\n\ngraph LR\n\n    chatGPT[\"챗GPT\"] --&gt; Contents\n\n    subgraph Contents[\"디지털 글쓰기\"]\n        direction LR\n        Writing[\"글감\"] --&gt; Table[\"표\"]\n        Writing --&gt; Graph[\"그래프\"]\n        Writing --&gt; Code[\"파이썬/R/SQL&lt;br&gt;코드\"]\n        Writing --&gt; Figure[\"그림\"]\n        Writing --&gt; Diagram[\"도형\"]        \n    end\n\n    chatGPT --&gt; Format\n    Contents --&gt; Format\n\n    subgraph Format[\"구조와 외양\"]\n        direction LR\n        Theme[\"구조와 외양\"] --&gt; Title[\"문서 구조\"]\n        Theme               --&gt; Formatting[\"문서 서식\"]\n        Theme               --&gt; Layout[\"문서 레이아웃\"]\n        Theme               --&gt; reference[\"문서 참조\"]\n    end\n\n    chatGPT --&gt; Deployment\n    Format --&gt; Deployment\n\n    subgraph Deployment[\"배포와 공유\"]\n        direction LR\n        Deploy[\"배포\"] --&gt; Reader[\"독자(사람)\"]\n        Deploy --&gt; Author[\"독자(저작자)\"]\n        Deploy --&gt; Machine[\"독자(기계)\"]\n    end\n\n    style chatGPT fill:#f5f5f5,stroke:#333,stroke-width:3px\n\n\n\n\n그림 17.1: 챗GPT 디지털 글쓰기 작업흐름",
    "crumbs": [
      "챗GPT 활용",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>챗GPT 쿼토</span>"
    ]
  },
  {
    "objectID": "gpt_writing.html#이력서와-영화-시놉시스",
    "href": "gpt_writing.html#이력서와-영화-시놉시스",
    "title": "17  챗GPT 쿼토",
    "section": "17.4 이력서와 영화 시놉시스",
    "text": "17.4 이력서와 영화 시놉시스\n챗GPT와 쿼토는 각기 다른 방식으로 문서 제작에 큰 장점을 갖고 있다. 챗GPT는 자연어 처리 기술을 바탕으로 다양한 콘텐츠를 창의적으로 생성하는 데 강점이 있다. 예를 들어, 이력서 작성 시 저자로부터 기본 정보와 경력 사항을 입력받아 자연스러운 문장으로 구성된 이력서 내용을 생성한다. 챗GPT는 텍스트 문맥을 이해하고 관련 정보를 적절히 배열하여 읽기 쉽고 전문적인 이력서 콘텐츠를 생산하다. \n반면, 쿼토는 문서와 코드를 통합적으로 관리하는 데 특화되어 있다. 이력서 작성에 쿼토는 저자 학력, 경력, 자격증, 기술, 학술논문 등 데이터를 코드 블록과 연결하여 동적으로 관리할 수 있다. 예를 들어, 경력 데이터가 업데이트될 때마다 자동으로 이력서 해당 부분을 갱신하는 것이 가능하기 때문에 과학기술 중심 직업을 가진 전문직 종사자에 특히 유용하다.\n따라서, 챗GPT와 쿼토를 함께 사용하면 각각의 약점이 보완되어 이력서 제작이 효율적이고 정확해진다. 챗GPT는 이력서 텍스트를 자연스럽고 전문적으로 구성하는 데 기여하고, 쿼토는 이력서 데이터 관리와 업데이트를 간소화한다. 또한, 쿼토의 웹 출판 기능은 작성된 이력서를 웹상에서 쉽게 공유하고 관리할 수 있어 이력서의 활용성과 접근성이 크게 향상된다.\n두번째 사례로 챗GPT와 쿼토를 통해 영화 시놉시스 제작하는 사례를 살펴보자. 챗GPT는 영화 시놉시스 제작에 있어서 창의적인 콘텐츠 생성 능력을 발휘한다. 저자가 프롬프트를 통해 챗GPT는 제공한 기본 아이디어나 키워드를 바탕으로 독창적이고 매력적인 시놉시스를 만들어 낸다. 챗GPT 자연어 처리 능력은 캐릭터, 설정, 줄거리 등 다양한 요소들을 자연스럽고 흥미로운 방식으로 결합하여 새로운 영화 시놉시스를 정말 빠른 시간내에 수도 없이 만들어 낼 수 있고, 다양한 장르와 스타일에 대한 이해를 바탕으로 사용자의 요구에 맞춘 시놉시스를 맞춤형으로 제작하는데도 유용하다.\n쿼토는 영화 시놉시스 작성 과정에서 버전 제어, 문서 변환, 배포 기능을 제공함으로써 챗GPT와 협업으로 생산된 콘텐츠의 가치를 높일 수 있다. 시놉시스의 다양한 버전을 효과적으로 관리하고, 변화의 과정을 추적할 수 있을 뿐만 아니라, 쿼토는 시놉시스를 PDF, PPT, 웹사이트와 같은 다양한 형식으로 쉽게 변환하고 배포할 수 있는 기능을 제공함으로써 다양한 이해당사자와 커뮤니케이션에 기여한다. 이를 통해 저작자는 영화 시놉시스를 다양한 매체와 플랫폼에 맞게 최적화하여 보다 넓은 범위의 관객과 공유하고, 프레젠테이션, 출판 또는 온라인 배포를 위한 다양한 형태로 활용할 수 있다.\n결국, 챗GPT와 쿼토를 함께 사용함으로써 영화 시놉시스 제작 과정이 더욱 효율적이고 창의적이 되는 시너지 효과를 볼 수 있다. 두가지 도구의 결합을 통해 챗GPT는 저자의 아이디어를 바탕으로 새로운 시놉시스를 창출하고, 쿼토는 시놉시스 콘텐츠를 효과적으로 관리하고 커뮤니케이션에 활용할 수 있게 됨으로써 저자가 보다 창의적이고 전문적인 작업을 수행할 수 있도록 기여한다.",
    "crumbs": [
      "챗GPT 활용",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>챗GPT 쿼토</span>"
    ]
  },
  {
    "objectID": "gpt_writing.html#연습문제",
    "href": "gpt_writing.html#연습문제",
    "title": "17  챗GPT 쿼토",
    "section": "연습문제",
    "text": "연습문제\n\n객관식\n\n챗GPT를 글쓰기에 활용하는 주요 장점은 무엇인가요?\n\n빠른 텍스트 생성\n향상된 문법 정확성\n창의적인 아이디어 제안\n모두 다\n\n\n\n챗GPT의 ‘텍스트-투-X(Text-to-X)’ 기능은 무엇을 의미하나요?\n\n텍스트를 음성으로 변환\n텍스트를 다른 언어로 번역\n텍스트 기반으로 다양한 콘텐츠 생성\n텍스트를 이미지로 변환\n\n\n\n챗GPT가 디지털 글쓰기에서 기존 도구들과 차별화되는 특징은 무엇인가요?\n\n높은 속도\n고급 인터페이스\n자연어 처리 능력\n텍스트 편집 기능\n\n\n\n\n서술형\n\n챗GPT가 디지털 글쓰기에서 전통적인 방식과 어떻게 다른지 설명해보세요.\n\n\n챗GPT의 등장이 글쓰기의 패러다임에 어떤 변화를 가져왔는지 설명해보세요.\n\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming”. Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "챗GPT 활용",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>챗GPT 쿼토</span>"
    ]
  },
  {
    "objectID": "gpt_resume.html",
    "href": "gpt_resume.html",
    "title": "18  이력서",
    "section": "",
    "text": "18.1 쿼토 확장기능\nQuarto-cv는 쿼토 확장기능(extension)으로 별도 이력서 문서로 작성할 수도 있고 작성 중인 쿼토 문서 중 하나의 페이지로 이력서를 추가할 수도 있다. 먼저, 이력서 문서를 작성하기 위해서 쿼토 확장기능을 설치한다.\nquarto-cv 확장기능에서 제공하는 template.qmd 파일명을 gpt_template.qmd로 바꿔 컴파일하면 깔끔한 영문 PDF 이력서를 얻을 수 있다. peer_bib.bib, other_bib.bib 참고문헌 파일을 별도 BibTEX 파일로 관리하여 .qmd 이력서 코드는 쿼토 YAML 헤더에 이력서 기본정보를 :으로 구분되는 키값(key-value) 쌍으로 작성하고 이력서 본문 내용을 경력(Employment), 학력(Education), 논문(Publications), 기술보고서(Technical Reports), 추천인(references)을 작성한다.",
    "crumbs": [
      "챗GPT 활용",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>이력서</span>"
    ]
  },
  {
    "objectID": "gpt_resume.html#쿼토-확장기능",
    "href": "gpt_resume.html#쿼토-확장기능",
    "title": "18  이력서",
    "section": "",
    "text": "quarto install extension mps9506/quarto-cv@v1.0.3\n\n\n\n---\ntitle: CV\nformat:\n  quarto-cv-pdf: default\nauthor: William Gosset\ndate: last-modified\nphone: 123-456-7890\naddress: \"Guinness Brewery·Park Royal·London NW10 7RR, UK\"\nemail: guinness@consumer-care.net\nfontsize: 11pt\norcid: 0000-0002-1825-0097 # orcid identifier\nweb: quarto.org\nfontawesome: yes\nnocite: '@*'\nbibliography:   \n  peer: data/peer_bib.bib  \n  other: data/other_bib.bib  \nvalidate-yaml: false\ncsl: data/apa-cv.csl\n---\n\n# Employment\n\n*Arthur Guinness & Son*\n\nChief Brewer (Park Royal) \\hfill 1935-1937\n\nResearcher (Dublin) \\hfill 1899-1935\n\n# Education\n\n*New College, Oxford University*, B.A. Chemistry \\hfill 1899\n\n# Publications\n\n::: {#refs-peer}\n:::\n\n# Technical Reports\n\n::: {#refs-other}\n:::\n\n# References\n\nAvailable upon request, though likely would include Karl Pearson and Ronald A. Fisher.\n 이력서 템플릿 \n\n\n\n\n\n\n\n\n\n그림 18.1: quarto-cv 기본설정 이력서",
    "crumbs": [
      "챗GPT 활용",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>이력서</span>"
    ]
  },
  {
    "objectID": "gpt_resume.html#챗gpt-이력서",
    "href": "gpt_resume.html#챗gpt-이력서",
    "title": "18  이력서",
    "section": "18.2 챗GPT 이력서",
    "text": "18.2 챗GPT 이력서\n챗GPT 생성형 AI 기능을 쿼토와 함께 활용하면 이력서 콘텐츠를 빠르게 생성하여 quarto-cv 템플릿에 넣게 되면 PDF 이력서를 빠르게 확인할 수 있다. 템플릿 이력서 내용을 챗GPT 프롬프트에 맥락 정보로 넣어주고 물리학자 이력서 생성 요청을 프롬프트로 전달하면 그럴 듯한 물리학자로 관련 정보를 채워준다.\n\n프롬프트실행 결과\n\n\n다음 내용을 바탕으로 물리학자 이력서 정보를 만들어줘\n\n---\ntitle: CV\nformat:\n  quarto-cv-pdf: default\nauthor: William Gosset\ndate: last-modified\nphone: 123-456-7890\naddress: \"Guinness Brewery·Park Royal·London NW10 7RR, UK\"\nemail: guinness@consumer-care.net\nfontsize: 11pt\norcid: 0000-0002-1825-0097 # orcid identifier\nweb: quarto.org\nfontawesome: yes\nnocite: '@*'\nbibliography: \n  peer: data/peer_bib.bib\n  other: data/other_bib.bib\nvalidate-yaml: false\ncsl: data/apa-cv.csl\n---\n\n# Employment\n\n*Arthur Guinness & Son*\n\nChief Brewer (Park Royal) \\hfill 1935-1937\n\nResearcher (Dublin) \\hfill 1899-1935\n\n# Education\n\n*New College, Oxford University*, B.A. Chemistry \\hfill 1899\n\n# Publications\n\n\n# Technical Reports\n\n\n# References\n\nAvailable upon request, though likely would include Karl Pearson and Ronald A. Fisher.\n\n\nTo create a resume for a physicist based on the given template, we need to adjust the content to fit the background and achievements of a physicist, rather than a brewer. Here's a revised version:\n\n---\ntitle: CV  \nformat:  \n  quarto-cv-pdf: default  \nauthor: William Gosset  \ndate: last-modified  \nphone: 123-456-7890  \naddress: \"Department of Physics, University of Cambridge, Cambridge CB3 0HE, UK\"  \nemail: wg.physicist@cam.ac.uk  \nfontsize: 11pt  \norcid: 0000-0002-1825-0097  \nweb: cam.ac.uk  \nfontawesome: yes  \nnocite: '@*'  \nbibliography:   \n  peer: data/peer_bib.bib  \n  other: data/other_bib.bib  \nvalidate-yaml: false  \ncsl: data/apa-cv.csl  \n---\n\n# Employment\n\n*University of Cambridge*  \n\nProfessor of Theoretical Physics \\hfill 2000-Present  \n\nPostdoctoral Researcher \\hfill 1995-2000  \n\n# Education\n\n*Princeton University*, Ph.D. in Physics \\hfill 1995  \n\n*Massachusetts Institute of Technology*, B.S. in Physics \\hfill 1991  \n\n# Publications\n\n\n# Technical Reports\n\n\n# References\n\nAvailable upon request, though likely would include notable physicists such as Stephen Hawking and Brian Greene.\n\n---\n\nThis resume template maintains the structure and elements of the original, but the content is tailored to reflect a career in physics. The employment history, education, and potential references are aligned with what might be expected of an accomplished physicist.\n\n\n\n연구논문에 대한 BibTex 파일에 들어갈 내용을 챗GPT 프롬프트를 작성하여 생성한다.\n\n프롬프트실행 결과\n\n\n물리학 논문 bibtex으로 2개, 보고서 bibtex 1개 작성해줘.\n\n\nSure, I'll create sample BibTeX entries for two fictional physics papers and one technical reports. These entries are just examples and are not based on actual publications or reports.\n\n### Physics Papers\n\n```bibtex\n@article{Gosset2024Quantum,\n  title={Quantum Entanglement in Multi-Particle Systems},\n  author={William Gosset and Jane Doe},\n  journal={Physical Review Letters},\n  volume={132},\n  number={4},\n  pages={501-505},\n  year={2024},\n  publisher={American Physical Society}\n}\n\n@article{Gosset2023DarkMatter,\n  title={Exploring the Properties of Dark Matter in the Early Universe},\n  author={William Gosset and John Smith},\n  journal={Astrophysical Journal},\n  volume={780},\n  number={1},\n  pages={100-115},\n  year={2023},\n  publisher={IOP Publishing}\n}\n```\n\n### Technical Reports\n\n```bibtex\n@techreport{GossetLab2024Fusion,\n  title={Advancements in Controlled Nuclear Fusion: A Report},\n  author={William Gosset and Research Team},\n  year={2024},\n  institution={Gosset Physics Laboratory},\n  address={Cambridge, UK}\n}\n```\n\nThese BibTeX entries can be used in a LaTeX document to cite the papers and reports in the bibliography section. Remember, these are fictional examples and do not correspond to actual publications.\n\n\n\n이제 참고문헌과 물리학자 이력서 콘텐츠가 작성되었으니 쿼토에서 컴파일하면 물리학자 이력서를 확인할 수 있다.\n\n\n---\ntitle: CV  \nformat:  \n  quarto-cv-pdf: default  \nauthor: William Gosset  \ndate: last-modified  \nphone: 123-456-7890  \naddress: \"Department of Physics, University of Cambridge, Cambridge CB3 0HE, UK\"  \nemail: wg.physicist@cam.ac.uk  \nfontsize: 11pt  \norcid: 0000-0002-1825-0097  \nweb: cam.ac.uk  \nfontawesome: yes  \nnocite: '@*'  \nfilters:\n  - multibib\nbibliography: \n  peer: data/peer_bib.bib  \n  other: data/other_bib.bib  \nvalidate-yaml: false  \ncsl: data/apa-cv.csl\n---\n\n# Employment\n\n*University of Cambridge*  \n\nProfessor of Theoretical Physics \\hfill 2000-Present  \n\nPostdoctoral Researcher \\hfill 1995-2000  \n\n# Education\n\n*Princeton University*, Ph.D. in Physics \\hfill 1995  \n\n*Massachusetts Institute of Technology*, B.S. in Physics \\hfill 1991  \n\n# Publications\n\n::: {#refs-peer}  \n:::  \n\n# Technical Reports\n\n::: {#refs-other}  \n:::  \n\n# References\n\nAvailable upon request, though likely would include notable physicists such as Stephen Hawking and Brian Greene.\n\n 물리학자 이력서 \n\n\n\n\n\n\n\n\n\n그림 18.2: 물리학자 영문이력서",
    "crumbs": [
      "챗GPT 활용",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>이력서</span>"
    ]
  },
  {
    "objectID": "gpt_resume.html#국문-이력서",
    "href": "gpt_resume.html#국문-이력서",
    "title": "18  이력서",
    "section": "18.3 국문 이력서",
    "text": "18.3 국문 이력서\n홍길동이라는 가상의 인물에 대한 국문 이력서를 제작해보자. 먼저 챗GPT로 한국 고대사 연구학자 “홍길동” 박사에 대한 이력서를 앞서 작업한 것을 준용하여 제작하도록 프롬프트를 작성한다.\n\n프롬프트실행 결과\n\n\n한국 고대사 연구학자 “홍길동” 이력서를 작성해줘 상기 CV 형식에 맞춰 한글로 작성해줘.\n\n\n홍길동 씨의 이력서를 한국어로 작성해드리겠습니다. 아래에 제시된 형식은 영문 이력서 형식을 바탕으로 하되, 한국어 문맥에 맞게 조정하였습니다.\n\n---\n제목: 이력서  \n작성일: [최종 수정일]  \n연락처: 010-1234-5678  \n주소: \"서울특별시 관악구 관악로, 서울대학교 한국사학과\"  \n이메일: hong.gildong@snu.ac.kr  \n글꼴 크기: 11pt  \nORCID: 0000-0003-1234-5678  \n웹사이트: snu.ac.kr  \n\n---\n\n# 직업 경력\n\n*서울대학교*\n\n한국 고대사 교수 \\hfill 2010-현재\n\n부교수 \\hfill 2005-2010\n\n# 학력\n\n*하버드 대학교*, 동아시아 언어 및 문명학 박사 \\hfill 2005\n\n*서울대학교*, 역사학 학사 \\hfill 2000\n\n# 주요 논문\n\n\n# 기술 보고서\n\n\n# 추천인\n\n요청 시 제공 가능하며, 주요 추천인으로는 한국사 및 동아시아 연구 분야의 저명한 학자들이 포함될 것입니다.\n\n---\n\n이 이력서는 가상의 인물인 홍길동 교수님의 경력을 한국 고대사 연구학자로 설정하여 작성된 것입니다. 학력, 경력 및 기타 세부 사항은 예시로 제시된 것이며 실제와는 다를 수 있습니다.\n\n\n\n챗GPT가 국문으로 이력서를 작성했으나 YAML에 대한 이해가 없어 번역하지 말아야 하는 것도 번역하는 실수를 했다. 크게 타이핑을 요구하는 것이 아니라 일단 해당 내용을 바탕으로 .qmd 파일을 작성하여 쿼토에서 컴파일한다. quarto-cv 확장기능은 기울임 글꼴 제대로 처리하지 못하는 문제가 있어 이 문제 해결을 위해서 apa-cv.csl 파일을 elsevier-harvard.csl으로 교체하면 참고문헌에 나타나는 기울임 글꼴이 제대로 처리된다. \\(\\LaTeX\\) 한글을 제대로 출력하기 위해서 한글 글꼴 설정을 주석을 해제하고 CJKmainfont: 에 적절한 한글글꼴로 지정한다. 또한, 연구논문에 대한 BibTEX 파일에 들어갈 내용을 챗GPT 프롬프트를 작성하여 생성한다.\n\n프롬프트실행 결과\n\n\n주요 논문과 기술보고서에 들어갈 bibtex을 2개 1개 작성해줘.\n\n\n홍길동 교수님의 가상의 주요 논문과 기술 보고서를 위한 BibTeX 항목을 각각 2 개와 1 개씩 작성하겠습니다. 이 항목들은 실제 문헌이나 보고서를 기반으로 한 것이 아니라 순전히 가상의 예시입니다.\n\n### 주요 논문\n\n```bibtex\n@article{Hong2024Baekje,\n  title={백제의 정치적 구조와 문화적 교류에 관한 연구},\n  author={홍길동},\n  journal={한국고대사연구},\n  volume={45},\n  number={2},\n  pages={30-60},\n  year={2024},\n  publisher={한국고대사학회}\n}\n\n@book{Hong2023Silla,\n  title={신라의 불교 예술과 사회 변화},\n  author={홍길동},\n  year={2023},\n  publisher={서울대학교출판부}\n}\n```\n\n### 기술 보고서\n\n```bibtex\n@techreport{Hong2023AncientKoreanTechnology,\n  title={고대 한국의 기술과 과학: 새로운 발견과 해석},\n  author={홍길동},\n  year={2023},\n  institution={서울대학교 한국사학과},\n  address={서울, 대한민국}\n}\n```\n\n이 BibTeX 항목들은 LaTeX 문서에서 해당 논문과 보고서를 인용하기 위해 사용될 수 있으며, 가상의 인물인 홍길동 교수님의 한국 고대사 연구를 위한 예시적인 문헌들입니다. 실제 존재하는 문헌이나 보고서가 아님을 유념해 주시기 바랍니다.\n\n\n\n이제 참고문헌과 학국학 연구자 홍길동 박사에 대한 이력서 콘텐츠가 작성되었으니 쿼토에서 컴파일하면 홍길동 박사 이력서를 확인할 수 있다.\n\n\n---\ntitle: CV\nformat:\n  quarto-cv-pdf: default\nauthor: 홍길동\ndate: last-modified\nphone: 010-1234-5678\naddress: \"서울특별시 관악구 관악로, 서울대학교 한국사학과\"\nemail: hong.gildong@snu.ac.kr\nfontsize: 11pt\nCJKmainfont: NotoSerifKR\nautoFakeSlant: true\norcid: 0000-0003-1234-5678\nweb: snu.ac.kr\nfontawesome: yes\nnocite: '@*'\nbibliography:\n  peer: data/peer_bib_korean.bib\n  other: data/other_bib_korean.bib\nvalidate-yaml: false\ncsl: data/elsevier-harvard.csl\n---\n\n# 직업 경력\n\n**서울대학교**\n\n한국 고대사 교수 \\hfill 2010-현재\n\n부교수 \\hfill 2005-2010\n\n# 학력\n\n하버드 대학교, 동아시아 언어 및 문명학 박사 \\hfill 2005\n\n서울대학교, 역사학 학사 \\hfill 2000\n\n# 주요 논문\n\n::: {#refs-peer}\n:::\n\n# 기술 보고서\n\n::: {#refs-other}\n:::\n\n# 추천인\n\n요청 시 제공 가능하며, 주요 추천인으로는 한국사 및 동아시아 연구 분야의 저명한 학자들이 포함될 것입니다.\n\n 홍길동 이력서 \n\n\n\n\n\n\n\n\n\n그림 18.3: 홍길동 국문 이력서",
    "crumbs": [
      "챗GPT 활용",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>이력서</span>"
    ]
  },
  {
    "objectID": "gpt_resume.html#연습문제",
    "href": "gpt_resume.html#연습문제",
    "title": "18  이력서",
    "section": "연습문제",
    "text": "연습문제\n\n객관식\n\n챗GPT와 쿼토를 활용하여 이력서를 작성하는 주된 장점은 무엇인가요?\n\n높은 정확도\n신속한 문서 작성\n혁신적인 디자인\n코딩 능력 필요 없음\n\n\n\n쿼토 확장기능을 이용한 이력서 작성 과정에서 주로 사용되는 파일 형식은 무엇인가요?\n\n.docx\n.qmd\n.pdf\n.html\n\n\n\n챗GPT와 쿼토를 활용한 이력서 작성 과정에서 가장 중요한 고려사항은 무엇인가요?\n\n키워드 최적화\n문서의 시각적 디자인\n개인 정보의 보안\n내용의 맞춤화와 개인화\n\n\n\n\n서술형\n\n챗GPT를 이용하여 이력서를 작성하는 과정에서 어떤 점을 주의해야 할까요?\n\n\n쿼토를 활용한 이력서 제작의 이점에는 어떤 것들이 있을까요?",
    "crumbs": [
      "챗GPT 활용",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>이력서</span>"
    ]
  },
  {
    "objectID": "gpt_case_study.html",
    "href": "gpt_case_study.html",
    "title": "\n19  국제시장과 펭귄\n",
    "section": "",
    "text": "19.1 챗GPT 글감 작성\n챗GPT는 프롬프트에 대한 답변을 생성하는 언어 모형으로 챗GPT는 데이터베이스나 실시간 정보에 접근하지 않고 기존에 학습된 데이터를 기반으로 답변을 제공한다. 따라서, 100% 사실은 아니지만 빠르게 답변을 제공받아 시놉시스 제작에 활용하는 경우 대략 8~90% 정확도를 보이는 업무에 챗GPT 활용도가 높다. 예를 들어, “관람객 기준으로 가장 많은 관람객을 갖는 한국 영화 상위 5개 알려주세요”라는 프롬프트에 대한 답변을 챗GPT로 받아 다음과 같이 마크다운 형태로 가공하여 후속 작업에 활용한다. 실제 데이터가 필요한 경우 영화진흥위원회에서 매년 발표하는 “한국영화연감”의 영화별 흥행기록 역대 박스오피스 (공식통계 기준)에서 정확한 데이터를 확인할 수 있다.",
    "crumbs": [
      "챗GPT 활용",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>국제시장과 펭귄</span>"
    ]
  },
  {
    "objectID": "gpt_case_study.html#챗gpt-글감-작성",
    "href": "gpt_case_study.html#챗gpt-글감-작성",
    "title": "\n19  국제시장과 펭귄\n",
    "section": "",
    "text": "프롬프트\n\n\n\n\n관람객 기준으로 가장 많은 관람객을 갖는 한국 영화 상위 5개 알려주세요 시놉시스는 200자 길이로 작성해주세요. 출력형식은 다음과 같은 형태로 마크다운 소스파일 형태로 출력해 주세요.\n|순위|영화명| 연도|감독|배급사|관객수|시놉시스|\n\n출력결과\n죄송합니다, 제 정보는 2021년 9월까지로 제한되어 있어서 그 이후의 데이터에 대한 정확한 정보를 제공할 수 없습니다. 그러나, 2021년 9월까지 기준으로 가장 많은 관람객을 가진 한국 영화 상위 5개는 다음과 같습니다.\n\n챗GPT 박스오피스 영화 순위\n\n\n\n\n\n\n\n\n\n\n순위\n영화명\n연도\n감독\n배급사\n관객수\n시놉시스\n\n\n\n1\n명량\n2014\n김한민\n씨제이이앤엠\n1761만\n1592년 임진왜란, 이때 조선은 거대한 전쟁의 중심에 있었다. 여기에서 조선 최고의 장군 이순신이 일어나 대역적인 전투를 벌인다.\n\n\n2\n극한직업\n2019\n이병헌\n씨제이이앤엠\n1626만\n각종 범죄 현장에서 물리적인 고난과 위험을 감수하며 사건을 해결하는 특수 대원들의 이야기. 그러나 그들의 직업은 상상을 초월하는 극한의 직업, 치킨집 사장이었다.\n\n\n3\n신과함께-인과 연\n2018\n김용화\n롯데엔터테인먼트\n1441만\n살아있는 동안 저지른 죄에 대해 사후세계에서 재판을 받는 과정을 그린 영화. 사망 후 49일 동안 7개의 지옥에서 7번의 재판을 받아야 하는데, 이 과정을 수행하는 천사들의 이야기.\n\n\n4\n국제시장\n2014\n윤제균\n씨제이엔터테인먼트\n1426만\n한국 전쟁을 배경으로 한 영화로, 한 남자가 가족을 지키고, 살아남기 위해 펼쳐나가는 감동적인 사랑과 희망의 이야기를 담고 있다.\n\n\n5\n어벤져스: 엔드게임\n2019\n안소니 루소, 조 루소\n월트 디즈니 코리아\n1393만\n타노스에 의해 절반의 생명이 사라진 채 패배한 어벤져스. 남은 멤버들은 어떻게든 가족과 친구들을 다시 데려오기 위한 모든 것을 걸고 마지막 전투에 나선다.\n\n\n\n\n\n\n19.1.1 실제 데이터\n챗GPT3은 2021년 9월까지 실제 인터넷에 공개된 데이터를 바탕으로 학습한 언어모형이다. 최근에 챗GPT4가 공개되면서 2023년 4월까지 데이터를 학습했다. 따라서 실시간 데이터는 반영하지 못하고 과거 학습한 데이터도 모든 과거를 대표하는 것도 아니다. 잘 작성된 프롬프트를 챗GPT 언어모형과 결합하여 나온 텍스트는 100% 사실은 아니지만 대략적인 흐름을 파악하는 데는 충분하다. 영화진흥위원회에서 매년 발표하는 “한국영화연감”의 영화별 흥행기록 역대 박스오피스 (공식통계 기준)에서 통계적으로 정확한 한국 영화 10개를 뽑아보면 대략 일치함을 확인할 수 있다. 시간이 지나면서 챗GPT에 대한 활용이 늘어나고 언어모형이 고도화되면 이러한 통계적인 정확도는 더욱 높아질 것으로 보인다. \n\n\n\n\n\n\n\n\n\n순위\n영화명\n개봉일\n매출액\n관객수\n배급사\n\n\n\n1\n명량\n2014\n1,357\n1,761\n(주)씨제이이엔엠\n\n\n2\n극한직업\n2019\n1,396\n1,626\n(주)씨제이이엔엠\n\n\n3\n신과함께-죄와 벌\n2017\n1,157\n1,441\n롯데쇼핑㈜롯데엔터테인먼트\n\n\n4\n국제시장\n2014\n1,109\n1,426\n(주)씨제이이엔엠\n\n\n5\n어벤져스: 엔드게임\n2019\n1,222\n1,393\n월트디즈니컴퍼니코리아\n\n\n6\n겨울왕국 2\n2019\n1,148\n1,375\n월트디즈니컴퍼니코리아\n\n\n7\n아바타\n2009\n1,284\n1,362\n해리슨앤컴퍼니,이십세기폭스코리아(주)\n\n\n8\n베테랑\n2015\n1,052\n1,341\n(주)씨제이이엔엠\n\n\n9\n괴물\n2006\n0\n1,302\n(주)쇼박스\n\n\n10\n도둑들\n2012\n937\n1,298\n(주)쇼박스\n\n\n\n\n\n\n\n\n표 19.1: KOBIS 2023년 5월기준 박스오피스\n\n\n\n\n19.1.2 펭귄 데이터셋\n미국에서 “George Floyd”가 경찰에 의해 살해되면서 촉발된 “Black Lives Matter” 운동은 아프리카계 미국인을 향한 폭력과 제도적 인종주의에 반대하는 사회운동이다. 한국에서도 소수 정당인 정의당에서 기사로 낼 정도로 적극적으로 나서고 있다.(정환봉 2020)\n데이터 과학 분야에서, 피셔(R.A. Fisher)가 저술한 “The genetical theory of natural selection” 논문(Edwards 2000)에 나타난 우생학적 관점이 논란이 되고 있다. 논란의 여파로, 데이터 과학에서 널리 사용되던 첫 번째 데이터셋인 ‘붓꽃(iris)’ 데이터에 대한 대체 움직임이 활발하게 전개되고 있다. ‘펭귄’ 데이터를 대안으로 사용하는 제안이 많은 관심을 받고 있고, 특히 palmerpenguins (KB, TD, 와/과 WR 2014) 데이터셋이 붓꽃 데이터 자리를 대신하고 있다. (AbdulMajedRaja 2020), (Levy 2019) \n\n19.1.3 시놉시스 생성\n챗GPT를 활용하면 더욱 정교하고 창의적인 답변 및 콘텐츠를 제작할 수 있다. 예시로 “영화의 시놉시스와 펭귄에 관한 데이터를 결합하여 새로운 영화 시놉시스를 구성해 주세요”라는 프롬프트는 챗GPT에게 서로 다른 주제를 통합해 새로운 작품 시놉시스 제작 지시를 내린다. 챗GPT는 제공된 프롬프트를 분석하고 이해한 뒤 새로운 시놉시스를 만들어 낸다. 특히 눈에 띄는 점은 챗GPT가 새로운 시놉시스를 대략 5초 내로 빠르게 생성한다는 점이다.\n\n\n\n\n\n\n프롬프트\n\n\n\n\n영화 시놉시스와 펭귄 데이터가 백틱(```)으로 감싸져 있습니다. 다음 영화 시놉시스와 데이터를 하나로 합하여 전혀 새로운 영화 시놉시스를 작성해주세요.\n```  첫번째 영화: 국제시장 \n덕수(황정민)의 가족은 흥남 철수 때 부산 국제시장에 내려온 피난민이다. 전쟁통에 아버지를 잃은 덕수는 졸지에 어머니와 두 동생의 생계를 책임지게 됐다. 동생의 학비와 생활비를 벌기 위해 자신의 꿈을 버린 채 친구 달구(오달수)와 함께 서독의 탄광으로, 베트남전으로 뛰어들어야 했던 덕수. 덕분에 사랑하는 아내 영자(김윤진)를 만날 수 있었고, 토끼 같은 자식들을 대학에 보낼 수 있었지만, 그의 인생에서 ’그’는 한번도 없었다.\n데이터: 펭귄 데이터 \n이 데이터는 미국 장기 생태 연구 네트워크의 일부인 파머 스테이션 장기 생태 연구 프로그램의 크리스틴 고먼 박사가 2007년부터 2009년까지 수집한 것입니다. 이 데이터는 환경 데이터 이니셔티브(EDI) 데이터 포털에서 직접 가져온 것으로, 팔머 스테이션 데이터 정책에 따라 CC0 라이선스(“권리 없음”)로 사용할 수 있습니다. ```\n응답\n새로운 영화 시놉시스: \n\n응답\n새로운 영화: “펭귄의 꿈”\n덕수(황정민)는 부산 국제시장에서 가족을 부양하며 살아가는 평범한 사람이었다. 그러나 그의 가족은 흥남 철수 때 피난민으로 내려온 펭귄들이었다. 덕수는 아버지를 잃은 후, 어머니와 두 동생 펭귄의 생계를 책임지게 되었다.\n덕수는 동생 펭귄들의 학비와 생활비를 벌기 위해 자신의 꿈을 포기하고, 친구 달구(오달수)와 함께 미국 장기 생태 연구 네트워크의 일부인 파머 스테이션으로 떠나게 된다. 그곳에서 그는 크리스틴 고먼 박사와 함께 2007년부터 2009년까지 펭귄 데이터를 수집하는 일을 하게 된다.\n덕수의 노력 덕분에 사랑하는 아내 영자(김윤진)와 펭귄 동생들을 대학에 보낼 수 있었다. 그러나 그의 인생에서 ’그’는 한번도 없었다. 그는 항상 펭귄들을 위해 자신을 희생하며 살아갔다. 그러나 그의 꿈은 언제나 그의 마음속에 살아있었다. 그의 꿈은 펭귄들이 자유롭게 날아다닐 수 있는 세상을 만드는 것이었다. 그의 이야기는 우리에게 희망과 용기, 그리고 사랑에 대한 진정한 의미를 가르쳐준다.\n새로운 영화: “펭귄의 꿈”\n덕수(황정민)는 부산 국제시장에서 가족을 부양하는 평범한 사람이었다. 그는 전쟁으로 아버지를 잃고, 어머니와 두 동생의 생계를 책임지며, 친구 달구(오달수)와 함께 서독의 탄광과 베트남전으로 뛰어들어야 했다. 그럼에도 불구하고 그는 사랑하는 아내 영자(김윤진)를 만나고, 자식들을 대학에 보낼 수 있었다.\n그러던 어느 날, 덕수는 크리스틴 고먼 박사의 펭귄 연구 데이터를 우연히 발견하게 된다. 이 데이터는 2007년부터 2009년까지 미국 장기 생태 연구 네트워크의 일부인 파머 스테이션에서 수집된 것이었다. 덕수는 이 데이터를 통해 펭귄들의 생태와 생활 패턴에 대해 알게 되고, 그들의 삶에 깊은 관심을 갖게 된다.\n덕수는 자신의 삶과 펭귄들의 삶을 비교하며, 그들이 겪는 어려움과 도전에 공감하게 된다. 그는 펭귄들의 삶을 이해하고 보호하려는 새로운 꿈을 갖게 되고, 그 꿈을 이루기 위해 자신의 모든 것을 바치기로 결심한다. 이제 덕수의 새로운 도전이 시작되는데…\n덕수는 펭귄들의 생태를 연구하며 그들이 겪는 환경적 위협에 대해 알게 된다. 특히, 기후 변화와 인간의 활동이 펭귄들의 서식지를 위협하고 있다는 사실에 충격을 받는다. 그는 이 문제를 해결하기 위해 자신의 모든 것을 바치기로 결심한다.\n덕수는 달구와 함께 펭귄 보호 운동을 시작한다. 그들은 펭귄들의 서식지를 보호하고, 인간의 활동이 펭귄들에게 미치는 영향을 줄이기 위한 다양한 활동을 벌인다. 이 과정에서 덕수는 자신의 삶에 새로운 의미와 목표를 찾게 된다.\n덕수의 펭귄 보호 운동은 점차 사람들의 주목을 받게 된다. 그의 노력은 많은 사람들에게 영감을 주고, 점차 많은 사람들이 펭귄 보호 운동에 참여하게 된다. 그러나 동시에, 그의 활동은 기업의 이익을 위협하며, 그에게 많은 도전과 위협을 가져다준다.\n그러나 덕수는 자신의 꿈을 포기하지 않는다. 그는 펭귄들의 삶을 보호하기 위해 끝까지 싸우기로 결심한다. 그의 노력은 결국 성공하게 되고, 펭귄들의 서식지는 보호되게 된다.\n“펭귄의 꿈”은 평범한 사람이 어떻게 자신의 꿈을 이루고, 세상을 바꿀 수 있는지를 보여주는 영화다. 이 영화는 우리에게 꿈을 이루기 위한 도전과 희생, 그리고 그 과정에서 얻는 성취와 만족감에 대해 생각하게 한다.\n영화 제목: “펭귄의 시장”\n미국 장기 생태 연구 네트워크의 일부인 파머 스테이션에서 크리스틴 고먼 박사(김윤진)는 2007년부터 2009년까지 펭귄에 대한 연구를 수행하였다. 그녀의 연구는 펭귄의 생태계와 그들의 생존 전략에 대한 깊은 이해를 제공하였다.\n한편, 부산 국제시장에서 살아가는 덕수(황정민)는 전쟁으로 아버지를 잃고, 어머니와 두 동생의 생계를 책임지게 된다. 그는 동생의 학비와 생활비를 벌기 위해 자신의 꿈을 버리고 친구 달구(오달수)와 함께 미국으로 떠나게 된다. 그의 목적지는 바로 크리스틴 박사가 연구를 수행하는 파머 스테이션이다.\n덕수는 파머 스테이션에서 일하면서 크리스틴 박사와 사랑에 빠지게 되고, 그녀의 연구에도 도움을 주게 된다. 그는 펭귄의 생존 전략을 배우며, 그것이 자신의 삶에 어떻게 적용될 수 있는지를 깨닫게 된다. 그의 인생에서 ’그’는 한번도 없었지만, 펭귄들과의 만남을 통해 그는 새로운 꿈과 희망을 찾게 된다.\n“펭귄의 시장”은 생존과 사랑, 그리고 꿈을 찾아가는 이들의 이야기를 그린다.\n영화 제목: “펭귄의 꿈”\n2007년부터 2009년까지 미국 장기 생태 연구 네트워크의 일부인 파머 스테이션에서 활동한 크리스틴 고먼 박사(김윤진)는 펭귄의 생태계에 대한 깊은 이해를 가지고 있다. 그녀의 연구는 펭귄의 생존 전략과 그들의 환경에 대한 중요한 정보를 제공한다.\n한편, 부산 국제시장에서 살아가는 덕수(황정민)는 전쟁으로 아버지를 잃고, 어머니와 두 동생의 생계를 책임지게 된다. 그는 동생들의 학비와 생활비를 벌기 위해 자신의 꿈을 포기하고, 친구 달구(오달수)와 함께 미국으로 떠나게 된다. 그의 목적지는 바로 크리스틴 박사가 연구를 수행하는 파머 스테이션이다.\n덕수는 파머 스테이션에서 일하면서 크리스틴 박사와 사랑에 빠지게 되고, 그녀의 연구에도 도움을 주게 된다. 그는 펭귄의 생존 전략을 배우며, 그것이 자신의 삶에 어떻게 적용될 수 있는지를 깨닫게 된다. 그의 인생에서 ’그’는 한번도 없었지만, 펭귄들과의 만남을 통해 그는 새로운 꿈과 희망을 찾게 된다.\n“펭귄의 꿈”은 생존과 사랑, 그리고 꿈을 찾아가는 이들의 이야기를 그린다. 이 영화는 인간의 삶과 펭귄의 생존 전략 사이의 유사성을 통해 우리 모두가 어떻게 살아가야 하는지에 대한 깊은 메시지를 전달한다.\n영화 제목: “데이터의 시장”\n덕수(황정민)는 부산 국제시장에서 가족을 부양하며 살아가는 평범한 사람이었다. 그의 가족은 흥남 철수 때 피난민으로 내려온 사람들이었다. 아버지를 잃은 후, 어머니와 두 동생의 생계를 책임지게 된 덕수는 그들의 생활비를 벌기 위해 자신의 꿈을 포기하고, 친구 달구(오달수)와 함께 미국의 데이터 연구소로 떠나게 된다.\n데이터 연구소에서 그는 크리스틴 고먼 박사와 함께 2007년부터 2009년까지 펭귄 데이터를 수집하는 일을 하게 된다. 이 과정에서 덕수는 데이터 분석의 중요성과 그것이 어떻게 세상을 바꿀 수 있는지를 깨닫게 된다.\n덕수의 노력 덕분에 사랑하는 아내 영자(김윤진)와 동생들을 대학에 보낼 수 있었다. 그러나 그의 인생에서 ’그’는 한번도 없었다. 그는 항상 가족들을 위해 자신을 희생하며 살아갔다. 그러나 그의 꿈은 언제나 그의 마음속에 살아있었다. 그의 꿈은 데이터를 통해 세상을 바꾸는 것이었다.\n“데이터의 시장”은 우리에게 희망과 용기, 그리고 사랑에 대한 진정한 의미를 가르쳐준다. 이 영화는 우리에게 자신을 희생하며 가족을 위해 살아가는 덕수의 이야기를 통해, 가족의 사랑과 헌신, 그리고 데이터의 힘에 대해 생각하게 한다.\n영화 제목: “펭귄 데이터의 미스터리”\n덕수(황정민)는 부산 국제시장에서 가족을 부양하며 살아가는 평범한 사람이었다. 그의 가족은 흥남 철수 때 피난민으로 내려온 사람들이었다. 아버지를 잃은 후, 어머니와 두 동생의 생계를 책임지게 된 덕수는 그들의 생활비를 벌기 위해 자신의 꿈을 포기하고, 친구 달구(오달수)와 함께 미국의 데이터 연구소로 떠나게 된다.\n데이터 연구소에서 그는 크리스틴 고먼 박사와 함께 2007년부터 2009년까지 펭귄 데이터를 수집하는 일을 하게 된다. 이 과정에서 덕수는 펭귄 데이터의 미스터리에 푹 빠지게 되고, 그의 일상은 갑자기 펭귄들의 세상으로 변하게 된다.\n덕수의 노력 덕분에 사랑하는 아내 영자(김윤진)와 동생들을 대학에 보낼 수 있었다. 그러나 그의 인생에서 ’그’는 한번도 없었다. 그는 항상 가족들을 위해 자신을 희생하며 살아갔다. 그러나 그의 꿈은 언제나 그의 마음속에 살아있었다. 그의 꿈은 데이터를 통해 세상을 바꾸는 것이었다.\n“펭귄 데이터의 미스터리”는 우리에게 웃음과 재미, 그리고 사랑에 대한 진정한 의미를 가르쳐준다. 이 영화는 우리에게 자신을 희생하며 가족을 위해 살아가는 덕수의 이야기를 통해, 가족의 사랑과 헌신, 그리고 데이터의 힘에 대해 생각하게 한다. 그리고 무엇보다, 펭귄 데이터의 미스터리를 풀어가는 과정에서 발생하는 유머러스한 상황들은 관객들에게 웃음을 선사할 것이다.\n\n\n\n챗GPT와 같은 거대 언어 모형(LLM)의 등장은 기존 저작과 창조적 작업에 대한 새로운 관점을 제공하며, 그 과정에서 저작자의 역할도 재평가되고 있다. 일반적으로 사람이 시놉시스나 창작물을 만들기 위해서 상당한 창의적 노력과 시간이 필요했지만 생성형 언어모형 기술에 대한 장벽이 크게 낮아짐에 따라, 빠르고 다양한 방식으로 콘텐츠를 생성할 수 있는 지평이 펼쳐지고 있다.\n이러한 변화는 단순히 작업 속도나 효율성을 높이는 것을 넘어, 기존 ‘저작자’ 개념에도 영향을 미치고 있다. 언어 모형을 활용하여 초기 아이디어나 구조를 빠르게 형성한 뒤, 이를 기반으로 사람이 더 깊고 복잡한 내용을 추가하거나 수정한다면, 새로운 형태의 공동 작업이나 협업모델이 될 가능할 것이다. 기존 저작자가 단독으로 모든 것을 창조하는 것이 아니라, 다양한 도구와 협업을 통해 더 풍부하고 다양한 저작물을 만들어낼 수 있는 새로운 길이 열리고 있다.\n\n\n\n\n\n\n영화 시놉시스 프롬프트\n\n\n\n프롬프트 제작은 프로그래밍과 유사하게, 여러 번의 반복 작업을 통해 성과를 얻을 수 있다. 챗GPT 프롬프트를 다음과 같이 작성할 때 목표한 “영화 시놉시스” 완성도가 가장 만족스럽게 생성되었다.\n\n영화 제목을 “펭귄의 꿈: ESG로 미래를 바꾸다”로 설정하고, 주인공은 한국에서 ESG 문제에 관심을 가진 젊은 연구원으로 한다. 그는 남극의 펭귄 데이터를 분석하여 지구의 미래를 예측하고, 이를 통해 사람들에게 ESG의 중요성을 알리려고 한다. 영화는 그의 여정과 성장, 그리고 마침내 세계를 바꾸는 뭉클한 결말로 끝난다.",
    "crumbs": [
      "챗GPT 활용",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>국제시장과 펭귄</span>"
    ]
  },
  {
    "objectID": "gpt_case_study.html#구조와-외양",
    "href": "gpt_case_study.html#구조와-외양",
    "title": "\n19  국제시장과 펭귄\n",
    "section": "\n19.2 구조와 외양",
    "text": "19.2 구조와 외양\n챗GPT 디지털 글쓰기에서 “구조와 외양” 단계는 문서 가독성과 효과를 극대화하는 중요한 과정이다. 이 단계에서 다음과 같은 다양한 문서요소와 기능을 활용하여 저작물의 품질을 높인다.\n\n\n마크다운 기본 글쓰기: 대중소 제목을 설정하여 문서의 구조를 명확히 한다. 굵은 글씨, 밑줄 등의 텍스트 서식과 단락 구분을 통해 내용을 강조하고 구조화한다.\n\n그림 (Figure): 복잡한 개념이나 데이터를 시각적으로 표현하여 이해를 돕는다.\n\n그래프 (Graph): 데이터 분석 결과를 시각적으로 나타내어 정보의 흐름과 패턴을 쉽게 파악할 수 있게 한다.\n\n표 (Table): 정보를 구조적으로 정리하여 한눈에 볼 수 있게 만든다.\n\n도형 (Diagrams): 프로세스나 시스템의 구조를 시각적으로 설명한다.\n\n수식 (LaTeX): 공학이나 과학 문서에서 복잡한 수학적 표현을 정확하게 나타낸다.\n\n호출 블록 (Callout Blocks): 중요한 정보나 주의사항을 강조하여 독자의 주목을 끈다.\n\n기사 레이아웃 (Article Layout): 전문적인 기사나 보고서 형식에 맞게 레이아웃을 설정한다.\n\n학술저작 (Scholarly Writing): 논문이나 학술 문서 작성에 필요한 다양한 서식과 참조 스타일을 적용한다.\n\n다단편집 (Side-by-Side Layout): 여러 내용을 병렬로 배열하여 비교와 분석을 용이하게 한다.\n\n색상과 시각적 효과: 다양한 색상과 시각적 효과를 활용하여 문서의 외관을 더욱 풍부하고 독특하게 만든다.\n\n과거에는 전문적인 인쇄출판 종사자들만이 문서의 다양한 요소와 기능을 외우고 활용해 저작물 품질을 높일 수 있었지만, 이제 챗GPT 자연어 처리 능력을 이용해 누구나 쉽고 빠르게 저작물에 적용할 수 있게 되었고, 쿼토는 복잡한 문서 처리 기술을 단순화하여 저자가 창작에만 집중할 수 있도록 지원함으로써, 문서 작업의 효율성과 품질을 대폭 향상시키는 중추적인 역할을 담당한다.\n\n\n문서 구조와 문학적 프로그래밍 (쿼토)\n\n표, 그래프는 문서 구조와 문학적 프로그래밍의 중요성을 시각적으로 전달하는 중요한 매체다. R 언어 tidyverse, palmerpenguins, gt 패키지를 활용해 펭귄 데이터를 처리하고, 펭귄 종별 암수 개체수를 표로 정리하고 ’펭귄종별 암수 개체수’라는 제목과 함께 데이터 출처를 표기하는 각주까지 표에 꼼꼼히 표기했다. 그래프 예시는 R 언어 ggplot2 패키지를 사용해 펭귄 물갈퀴 길이와 체질량 사이의 관계를 그래프로 표현하고 있다. 향후 표와 그래프는 영화 시놉시스 저작물의 중요한 문서 구성요소 중 하나로 활용될 것이다.\n\n\n표\n\n\n\n\n\n\n\n\n\n\n펭귄종별 암수 개체수1\n\n\n\n펭귄종\n암컷\n수컷\n\n\n\n\nAdelie\n73\n73\n\n\nChinstrap\n34\n34\n\n\nGentoo\n58\n61\n\n\n\n\n1 데이터 출처: palmerpenguins 패키지\n\n\n\n\n\n\n\n표 19.2: 문서 구성요소 표 사례\n\n\n\n\n\n\n\n그래프\n\n\n\n\n\n그림 19.2: 문서 구성요소 그래프 사례",
    "crumbs": [
      "챗GPT 활용",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>국제시장과 펭귄</span>"
    ]
  },
  {
    "objectID": "gpt_case_study.html#배포와-공유",
    "href": "gpt_case_study.html#배포와-공유",
    "title": "\n19  국제시장과 펭귄\n",
    "section": "\n19.3 배포와 공유",
    "text": "19.3 배포와 공유\n디지털 글쓰기 저작물을 완성한 후 다음 단계로 인쇄출판과 배포를 고려해야 한다. 과거와 달리 현재는 물론 앞으로 다양한 문서 저작물을 하나의 프로젝트로 엮어 전자출판을 할 수 있는 플랫폼이 필요하다. Quarto Pub은 이러한 목적으로 개발되어 저자가 작성한 다양한 문서저작물을 원클릭으로 전자출판할 수 있다. 물론 Quarto Pub 외에도 netlify, GitHub Pages, RStudio Connect 등 다른 출판배포 플랫폼도 존재한다. 플랫폼들은 각각의 특성과 장점을 가지고 있어, 저자의 필요와 목적에 따라 적절한 플랫폼을 선택하여 디지털 글쓰기 저작물을 더 넓은 독자에게 전달할 수 있다. \n챗GPT에서 생성된 콘텐츠는 쿼토를 통해 다양한 형태의 문서로 전환되어 각각의 목적과 대상에 맞게 효과적으로 활용될 수 있다. HTML 형식 웹페이지는 불특정 다수 블로그 광고에 적합하며, PDF 문서는 상급자에게 제출하는 보고서로 유용한 반면, PPT 형태는 발표용 슬라이드로 활용될 수 있다.\n\n\n\n\n\ngraph LR\n\n    chatGPT[\"챗GPT\"] --&gt; Document\n\n    subgraph Document[\"문서\"]\n        direction LR\n            Contents[\"콘텐츠\"] --&gt; HTML[\"HTML 웹페이지\"] -.-&gt; Ad[\"블로그&lt;br&gt;광고\"]\n            Contents --&gt; PDF[\"PDF 문서\"] -.-&gt; Report[\"보고서&lt;br&gt;상급자\"]\n            Contents --&gt; PPT[\"PPT\"] -.-&gt; Slide[\"슬라이드&lt;br&gt;발표\"]\n    end\n\n    Document --&gt; Deploy\n\n    subgraph Deploy[\"배포\"]\n        direction LR\n        Quarto[\"Quarto Pub\"]  -.-&gt; Web_Code[\"소스코드&lt;br&gt;웹페이지&lt;br&gt;공유/협업\"]\n        GitHub[\"Github Page\"] --&gt; Web_Code\n        Netlify[\"Netlify\"]    -.-&gt; Web_Code\n        Etc[\"...\"]    -.-&gt; Web_Code\n    end\n\n    style Document fill:#f5f5f5,stroke:#333,stroke-width:3px\n    style Ad fill:#059fff,stroke:#333,stroke-width:1px\n    style Report fill:#059fff,stroke:#333,stroke-width:1px\n    style Slide fill:#059fff,stroke:#333,stroke-width:1px\n\n\n\n\n그림 19.3: 챗GPT 영화 시놉시스 배포\n\n\n\n\n챗GPT 디지털 글쓰기를 통해 저작한 문서는 다양한 형태로 배포될 수 있다. “국제시장과 남극 펭귄”을 모티브로 삼아 제작한 다양한 영화 시놉시스 저작물은 다음과 같이 공개되어 있다.\n\n\nHTML 웹페이지: HTML 웹페이지 형식으로는 누구나 쉽게 접근하고 읽을 수 있으며, 웹 브라우저만 있으면 어디서든 열람이 가능하다.\n\nPDF 파일: PDF 파일 형식으로는 공식 문서나 보고서로 사용할 수 있으며, 물리적인 출력이 필요할 때도 유용하다.\n\nPPT 슬라이드: PPT 슬라이드 형식으로는 발표나 강의 자료로 활용할 수 있어, 다양한 상황에서 유연하게 사용할 수 있다.\n\n문서 저작을 넘어 다양한 형식으로 문서를 배포하면, 독자나 이용자가 자신에게 가장 편리한 방식으로 문서를 열람할 수 있다. 따라서 챗GPT 디지털 글쓰기는 단순히 텍스트를 생성하는 것을 넘어, 다양한 배포 채널과 형식을 통해 더 넓은 독자층에게 접근할 수 있는 장점도 크다.\n\n\n\n\n\n그림 19.4: 웹, 문서, PPT 슬라이드 배포\n\n\n최종 출판저작물 인쇄출판과 배포를 마친 후에는 저작물 공유도 고려할 수 있다. 저작물을 공유함으로써 저자는 자신의 저작물을 다른 사람들과 공유하고, 다른 사람들은 저작권에 맞춰 저작물을 활용할 수 있다. 저작물을 공유하는 방법은 다양하지만, 가장 쉬운 방법은 저작물을 공유할 수 있는 플랫폼에 저작물을 공유 저작권 표기를 함께 게시하는 것이다. 소스코드를 공유하면 다른 사람들이 문서 작성에 사용된 소스코드를 쉽게 이해하고, 문서 작성에 사용된 소스코드를 활용해 자신만의 향상된 저작물을 공유함으로써 새로운 형태 글쓰기 문화를 확산시킬 수 있다.",
    "crumbs": [
      "챗GPT 활용",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>국제시장과 펭귄</span>"
    ]
  },
  {
    "objectID": "gpt_case_study.html#연습문제",
    "href": "gpt_case_study.html#연습문제",
    "title": "\n19  국제시장과 펭귄\n",
    "section": "연습문제",
    "text": "연습문제\n객관식\n\n챗GPT를 사례 연구에 활용하는 이점은 무엇인가요?\n\n데이터 수집 속도 향상\n정량적 분석 용이성\n창의적인 아이디어 생성\n모두 다\n\n\n\n\n챗GPT를 사례 연구에 활용할 때 주의해야 할 점은 무엇인가요?\n\n과도한 데이터 의존\n주관적 해석의 위험\n분석의 정확도\n모두 다\n\n\n\n\n챗GPT를 활용한 사례 연구의 결과물은 어떤 형식으로 제공될 수 있나요?\n\n보고서\n프레젠테이션\n인포그래픽\n모두 다\n\n\n서술형\n\n챗GPT를 사례 연구에 통합하는 과정에서 고려해야 할 핵심 요소는 무엇인가요?\n\n\n챗GPT를 이용한 사례 연구에서 창의성을 촉진하는 방법은 무엇인가요?\n\n\n\n\n\nAbdulMajedRaja. 2020. “Penguins Dataset Overview - iris alternative in R using palmerpenguins”. Programming with R. https://www.programmingwithr.com/penguins-dataset-overview-iris-alternative-in-r/.\n\n\nEdwards, Anthony W Fisher. 2000. “The genetical theory of natural selection”. Genetics 154 (4): 1419–26.\n\n\nKB, Gorman, Williams TD, 와/과 Fraser WR. 2014. “Ecological Sexual Dimorphism and Environmental Variability within a Community of Antarctic Penguins (Genus Pygoscelis)”. PLoS ONE 9(3) (e90081): –13. https://doi.org/10.1371/journal.pone.0090081.\n\n\nLevy, Ido. 2019. “Eugenics and the Ethics of Statistical Analysis”. GEORGETOWN PUBLIC POLICY REVIEW. https://gppreview.com/2019/12/16/eugenics-ethics-statistical-analysis/.\n\n\n정환봉. 2020. “여당 의원 176명 중 누가?...차별금지법 발의할 ’의인’을 구합니다”. 한겨레 신문, 6월. http://www.hani.co.kr/arti/politics/assembly/949422.html.",
    "crumbs": [
      "챗GPT 활용",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>국제시장과 펭귄</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "참고문헌",
    "section": "",
    "text": "AbdulMajedRaja. 2020. “Penguins Dataset Overview - Iris\nAlternative in r Using palmerpenguins.” Programming with\nR. https://www.programmingwithr.com/penguins-dataset-overview-iris-alternative-in-r/.\n\n\nAlexander, Rohan. 2023. Telling Stories with Data: With Applications\nin r. CRC Press.\n\n\nBaker, Monya. 2016. “1,500 Scientists Lift the Lid on\nReproducibility.” Nature 533 (7604): 452–54. https://doi.org/10.1038/533452a.\n\n\nCurty, Renata, Torin White, Ian Lessing, Greg Janee, Julien Brun, and\nkristi Liu. 2024. “Introduction to Reproducible Publications with\nRStudio.” Carpentries. https://github.com/carpentries-incubator/reproducible-publications-quarto.\n\n\nEdwards, Anthony W Fisher. 2000. “The Genetical Theory of Natural\nSelection.” Genetics 154 (4): 1419–26.\n\n\nHyde, Adam. 2021. “Single Source Publishing - a Investigation of\nWhat Single Source Publishing Is and How This ‘Holy Grail’\nCan Be Achieved.” https://coko.foundation/articles/single-source-publishing.html.\n\n\nKB, Gorman, Williams TD, and Fraser WR. 2014. “Ecological Sexual\nDimorphism and Environmental Variability Within a Community of Antarctic\nPenguins (Genus Pygoscelis).” PLoS ONE 9(3) (e90081):\n–13. https://doi.org/10.1371/journal.pone.0090081.\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.\n\n\nKulkarni, Sagar. 2019. “Building an HR Dashboard in r Using\nFlexdashboard.” Towards Data Science, September. https://towardsdatascience.com/building-an-hr-dashboard-in-r-using-flexdashboard-76d14ed3f32.\n\n\nLevy, Ido. 2019. “Eugenics and the Ethics of Statistical\nAnalysis.” GEORGETOWN PUBLIC POLICY REVIEW. https://gppreview.com/2019/12/16/eugenics-ethics-statistical-analysis/.\n\n\nMarkowetz, Florian. 2015. “Five Selfish Reasons to Work\nReproducibly.” Genome Biology 16 (1): 274. https://doi.org/10.1186/s13059-015-0850-7.\n\n\nRogowitz, Bernice E, and Lloyd A Treinish. 1996. “Why Should\nEngineers and Scientists Be Worried about Color.” See URL\nHttp://Www. Research. Ibm. Com/People/l/Lloydt/Color/Color. HTM.\n\n\nWilkinson, Leland. 2011. Ggplot2: Elegant Graphics for Data Analysis\nby WICKHAM, h. Oxford University Press.\n\n\nWilson, Greg. 2016. “Modern Scientific Authoring.”\nCarpentries. https://swcarpentry.github.io/modern-scientific-authoring/.\n\n\nZeileis, Achim, Kurt Hornik, and Paul Murrell. 2009. “Escaping\nRGBland: Selecting Colors for Statistical Graphics.”\nComputational Statistics & Data Analysis 53 (9): 3259–70.\n\n\n이광춘. 2023. “공간정보의 역사 및 공간정보 처리기법.”\nPROPBIX, no. 13 (September).\n\n\n———. 2024. 챗gpt SQL. 한국 R 사용자회.\n\n\n정환봉. 2020. “여당 의원 176명 중 누가?...차별금지법 발의할\n’의인’을 구합니다.” 한겨레 신문, June. http://www.hani.co.kr/arti/politics/assembly/949422.html.",
    "crumbs": [
      "참고문헌"
    ]
  }
]