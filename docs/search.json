[
  {
    "objectID": "theme_fonts.html",
    "href": "theme_fonts.html",
    "title": "\n1  글꼴\n",
    "section": "",
    "text": "1.1 용어 설명\n활자와 서체, 글꼴, 타이포그래프은 비슷한 개념처럼 느껴질 수 있으나 각각 다른 의미를 가지고 있다. 활자(Type)는 글자나 기호의 물리적 형태로 본래는 글자를 만드는 데 사용된 나무 또는 금속 조각을 일컫는 말이었습니다. 서체(또는 글꼴 모음, Typeface)는 글자 및 기호가 서로 비슷한 특징을 가지도록 디자인된 문자 스타일을 의미하며, ‘나눔고딕’, ‘Times New Roman’, ‘Helvetica’ 같은 이름을 가진 것이 서체다. 글꼴(Font)은 서체의 여러 변형을 총칭하는 용어로, 특정 서체에서 굵고 진한 글꼴(Bold), 기울임(italic) 등 변형이 모두 포함된다. 타이포그래피(Typography)는 활자 서체의 배열을 의미하며, 서체의 선택, 글자 크기, 줄 간격, 단어 간격, 문장 사이 간격과 맞춤 등을 조절하여 읽기 쉽고 미적으로 효과적인 텍스트 제작을 의미한다.\n전세계적으로 글꼴의 수는 무수히 많지만, 크게과 같이 크게 분류할 수 있다. 글꼴은 기본적으로 세리프(serif)와 산세리프(sans serif)의 2가지 스타일로 구분되는데 세리프는 글자의 획 끝에 작은 삐침이 있는 글꼴이며 산스(sans)는 프랑스어로 “없다”, 또는 “없이”라는 뜻이기 때문에 삐침이 없는 글꼴을 지칭한다.\n모노스페이스(monospaced) 글꼴은 코드 작성 등에서 유용하게 사용되며, 모든 글자가 같은 폭을 차지한다. Consolas나 D2 Coding은 모노스페이스 글꼴의 대표적인 예다. 디스플레이(Display)와 스크립트(Script) 글꼴은 본문보다는 제목이나 강조할 부분에서 사용되며, 디자인적인 특성이 가미되어 있다. 디스플레이 글꼴은 대체로 크고 눈에 띄는 특성을, 스크립트 글꼴은 필기체나 서명 등을 모방한 스타일을 가진다.\n수식을 표현하는데 많이 사용되는 LaTeX에서 기본글꼴로 Computer Modern, AMS Euler, STIX 같은 수식전용 글꼴이 사용되어, 수학적 표기나 공식을 명확하고 정확하게 표현할 수 있도록 설계되었다. 데이터 과학에서 그래프 문법과 표 문법을 사용하여 그래프와 표를 제작할 경우 가독성을 높이고 이목을 끌 수 있도록 색상과 더불어 적절한 글꼴 선택이 필수적으로 자리잡아가고 있다.\n일반적으로 본문에는 세리프나 산세리프 글꼴이 사용되고, 제목에는 더 화려하거나 눈에 띄는 글꼴이 사용되고 증거기반 문서 행정문서가 늘어나고 과학기술 문서에 필수적인 수식 등에도 타이포그래피 중요성이 늘어나고 있다.",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>글꼴</span>"
    ]
  },
  {
    "objectID": "theme_fonts.html#용어-설명",
    "href": "theme_fonts.html#용어-설명",
    "title": "\n1  글꼴\n",
    "section": "",
    "text": "그림 1.2: 문서에 담긴 디지털 글쓰기 글꼴\n\n\n\n\n\n\n\n\n서체와 글꼴\n\n\n\ntypeface는 서체로 번역되고 font는 글꼴로 번역된다. 하나의 typeface에는 여러 font가 포함될 수 있으며, 이를 검증하는 데에는 팬그램이 유용하게 사용된다. 팬그램은 모든 문자를 최소 한 번 이상 사용하여 만든 문장으로, 제작된 서체와 글꼴이 모든 글자에 대해 어떻게 표현되는지 확인하는 데 필요하다.\n팬그램(Pangram)은 ’모든 글자’라는 뜻으로 주어진 모든 문자를 적어도 한 번 이상 사용하여 만든 문장을 뜻한다. 팬그램은 로렘 입숨처럼 글꼴 샘플을 보여주거나 장비를 테스트하는 데 사용된다. 영어 팬그램으로 가장 유명한 ‘The quick brown fox jumps over the lazy dog’는 19세기부터 사용되어 왔다. 유사하게 한글에서는 “다람쥐 헌 쳇바퀴에 타고파”가 사용되고 있다.",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>글꼴</span>"
    ]
  },
  {
    "objectID": "theme_fonts.html#두가지-형태-글꼴",
    "href": "theme_fonts.html#두가지-형태-글꼴",
    "title": "\n1  글꼴\n",
    "section": "\n1.2 두가지 형태 글꼴",
    "text": "1.2 두가지 형태 글꼴\n글꼴(Fonts)은 문자나 기호를 디지털화하여 표현하는 데 사용되는 그래픽 디자인으로 주로 로컬 설치형 글꼴과 웹폰트 두가지 형태로 사용된다.\n로컬 설치형 글꼴은 사용자의 컴퓨터나 기기에 직접 설치되어 있는 글꼴로, 윈도우(Windows)나 맥(macOS), 리눅스(Unix/Linux)에서 기본적으로 제공되는 글꼴이나 사용자가 따로 설치하여 사용하는 글꼴을 의미한다. 인터넷 연결 없이도 사용할 수 있으며, 로컬에서 동작하므로 빠른 렌더링 속도를 제공한다는 점이 큰 장점이지만, 사용자 컴퓨터나 기기에 설치되어 있지 않은 글꼴은 보이지 않을 수 있으며, 글꼴 업데이트나 관리는 수동으로 직접해야 한다는 점은 단점이다.\n반면 웹폰트는 웹페이지를 로드할 때 서버에서 함께 다운로드되어 사용자의 브라우저에 표시된다. 구글 폰트(Google Fonts), 눈누와 같은 웹폰트 서비스를 통해 제공되며, 웹페이지를 방문하는 모든 사용자에게 동일한 글꼴를 통해 보여준다는 점은 장점이다. 다양한 스타일과 가중치(weights) 글꼴을 쉽게 사용할 수 있으며, 글꼴 업데이트나 관리가 자동화되는 장점은 있으나, 초기 페이지 로딩 시간이 길어질 수 있으며, 서버 다운 혹은 인터넷 연결 문제로 웹폰트가 정상적으로 로드되지 않을 위험도 있고, 인터넷 통신 데이터 사용량이 증가되어 속도가 늦어지고 관련 네트워크 비용이 늘어날 수 있다.\n\n\n설치형 글꼴과 웹 글꼴",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>글꼴</span>"
    ]
  },
  {
    "objectID": "theme_fonts.html#글꼴-설치",
    "href": "theme_fonts.html#글꼴-설치",
    "title": "\n1  글꼴\n",
    "section": "\n1.3 글꼴 설치",
    "text": "1.3 글꼴 설치\n구글 폰트(Google Fonts), 눈누와 같은 웹사이트에서 .ttf, .otf 형식 글꼴파일을 다운로드 한 후에 C:\\Windows\\Fonts\\ 디렉토리에 복사하거나, 다운로드 받은 글꼴파일을 더블 클릭하여 설치 버튼을 눌러 자동으로 해당 디렉토리에 설치한다. 글꼴을 시스템에 설치하면 모든 사용자가 사용할 수 있도 있지만, 프로젝트 별로 fonts 디렉토리를 생성하여 이를 프로젝트에서 불러와서 특정 글꼴을 사용하는 것도 많이 사용된다. 두가지 접근 방법 모두 장단점이 있다.\n\n\nR 폰트/글꼴 설치\n\n\n1.3.1 글꼴 패키지\n시스템에 글꼴이 설치되었다고 바로 문서 텍스트, 그래프, 표, 수식 등에 사용할 수 있는 것은 아니다. 이를 등록하는 절치가 필요하다. 언어마다 차이는 있지만 대체로 유사한 작업방식이기 때문에 R 언어를 사례로 살펴보자.\nextrafont, sysfonts, showtext, 패키지는 글꼴을 다루기 위한 다양한 기능을 제공하기 위해 개발된 글꼴 패키지로 extrafont와 sysfonts 패키지는 로컬 설치형 글꼴을 다루는데 특화되어 있는 반면에 showtext는 웹글꼴 전용 패키지다. sysfonts가 더 낮은 수준에서 더 많은 제어기능을 제공하는 반면, extrafont는 높은 수준 작업에 더 초점을 맞추고 사용자 친화적인 방법으로 글꼴을 적용하는 데 특화되어 있다.\n먼저, 로컬 컴퓨터에 설치된 R 글꼴 패키지를 확인한다.\n\nlibrary(tidyverse)\n\nfont_packages &lt;- c(\"extrafont\", \"showtext\", \"sysfonts\")\n\nfonts_list &lt;- map(font_packages, packageDescription)\n\nfonts_list |&gt; \n  enframe() |&gt; \n  mutate(패키지명 = map_chr(value, \"Package\"),\n         버전 = map_chr(value, \"Version\"),\n         날짜 = map(value, \"Date\") |&gt; as.character(),\n         URL = map(value, \"URL\") |&gt; as.character()) |&gt; \n  select(-name, -value) |&gt; \n  gt::gt()\n\n\n\n\n\n\n패키지명\n버전\n날짜\nURL\n\n\n\nextrafont\n0.19\nNULL\nhttps://github.com/wch/extrafont\n\n\nshowtext\n0.9-6\n2023-05-03\nhttps://github.com/yixuan/showtext\n\n\nsysfonts\n0.8.8\n2022-03-13\nhttps://github.com/yixuan/sysfonts\n\n\n\n\n\n\n\n\n1.3.2 네이버 글꼴 설치\n네이버 나눔스퀘어 글꼴을 로컬 컴퓨터에 다운로드 받아 설치할 수 있다. 그림 1.3 에서 “모든 사용자용으로 설치(A)”하게 되면 글꼴이 C:\\Windows\\Fonts\\ 디렉토리에 설치된다. 운영체제에 설치작업이 완료되면 R에서 사용할 수 있으나, 몇 가지 추가 작업이 필요하다. 우선, fs 패키지 file_exists() 함수를 사용하여 ‘NanumSquare.ttf’ 파일이 정상적으로 설치되었는지 확인한다. 만약 extrafont 패키지를 사용한다면 font_import() 명령어를 사용하여 글꼴을 등록하고, path=로 글꼴 파일의 경로를 직접 지정할 수 있으며, pattern=을 사용해서 특정 패턴에 맞는 글꼴을 일괄적으로 등록할 수도 있다. 최근에 많이 사용되고 있는 sysfonts 패키지를 사용한다면 font_add() 명령어를 사용하여 글꼴을 등록한다. 선택한 방식에 따라 글꼴을 설치하면 이후 R 프로젝트에서 네이버 나눔스퀘어 글꼴을 자유롭게 사용할 수 있다.\n\n\n\n\n\n그림 1.3: 윈도우 나눔스퀘어 글꼴 설치\n\n\n\n# library(extrafont)\nlibrary(sysfonts)\n\nfs::file_exists(\"C:/Windows/Fonts/NanumSquare.ttf\")\n\n# font_import(pattern = \"NanumSquare.ttf\", prompt = FALSE)\nfont_add(\"NanumSquare\", \"C:/Windows/Fonts/NanumSquare.ttf\")\n\n네이버에서 최근에 공개한 마루부리 글꼴도 동일한 방식으로 설치한다.\n\n# MaruBuri 글꼴 설치\nfont_add(\"MaruBuri-ExtraLight\", \"C:/Windows/Fonts/MaruBuri-ExtraLight.ttf\")\nfont_add(\"MaruBuri-Regular\", \"C:/Windows/Fonts/MaruBuri-Regular.ttf\")\nfont_add(\"MaruBuri-Bold\", \"C:/Windows/Fonts/MaruBuri-Bold.ttf\")\nfont_add(\"MaruBuri-Light\", \"C:/Windows/Fonts/MaruBuri-Light.ttf\")\n\n코딩전용 글꼴은 앞서 소개한 글꼴과 차이가 있지만 설치방식은 동일하다. 동일한 방식으로 D2 Coding 글꼴도 설치하고 RStudio IDE에서 “Tools” → “Global Options…”를 클릭하면 “Options”창이 열리고, Appearance에서 Editor font:에서 설치한 코딩전용 글꼴을 선택하고 Editor theme:도 지정한다.\n\n\nD2 코딩폰트 설치\n\n글꼴 선택은 문서나 프로젝트의 특성과 목적에 따라 크게 영향을 미친다. 제목에는 삐침이 없어 깔끔한 느낌을 주기 위해 나눔스퀘어 글꼴을 설치했고, 본문에는 삐침이 있는 마루부리 글꼴을 설치하여 가독성을 높였고, 코딩 작업에 특별히 설계된 D2코딩 글꼴을 선택하여 전체적인 글쓰기 환경을 효율적이고 편안하게 준비했다.",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>글꼴</span>"
    ]
  },
  {
    "objectID": "theme_fonts.html#글꼴-적용-사례",
    "href": "theme_fonts.html#글꼴-적용-사례",
    "title": "\n1  글꼴\n",
    "section": "\n1.4 글꼴 적용 사례",
    "text": "1.4 글꼴 적용 사례\n예제로 ggplot2와 sysfonts 패키지를 사용해 다른 글꼴을 그래프 주요 요소에 반영한 데이터 시각화 R 코드를 살펴보자. 먼저 ggplot2 데이터 시각화를 위한 패키지와 sysfonts 글꼴 관리를 위한 라이브러리를 가져온다. font_add 함수를 사용해 NanumSquare, MaruBuri-Regular, MaruBuri-Bold 글꼴을 시스템에 등록한다. 이후 data.frame을 사용해 x값이 1부터 10까지, y값이 정규 분포를 따르는 데이터를 생성한다. ggplot 함수로 기본 그래프를 설정하고 geom_point를 사용해 산점도를 그린다. labs 함수로 그래프 제목과 x, y축 레이블을 설정하고, theme 함수로 큰 제목에는 NanumSquare, x축과 y축 레이블에는 MaruBuri-Regular 글꼴을 적용한다. annotate 함수로 “다른 글꼴”이라는 텍스트를 MaruBuri-Bold 글꼴로 그래프에 추가하여 다른 글꼴을 적용한 그래프를 생성한다.\n\nlibrary(ggplot2)\nlibrary(sysfonts)\n\n# 글꼴 시스템 등록\nfont_add(\"NanumSquare\", \"C:/Windows/Fonts/NanumSquare.ttf\")\nfont_add(\"MaruBuri-Regular\", \"C:/Windows/Fonts/MaruBuri-Regular.ttf\")\nfont_add(\"MaruBuri-Bold\", \"C:/Windows/Fonts/MaruBuri-Bold.ttf\")\n\n# 글꼴 캐시를 새로고침\nfont_families()\n\n# 데이터 생성\ndata &lt;- data.frame(\n  x = 1:10,\n  y = rnorm(10)\n)\n\n# ggplot 그래프 생성\nfonts_gg &lt;- ggplot(data, aes(x, y)) +\n  geom_point() +\n  labs(title = \"큰 제목\",\n       x = \"x 축\",\n       y = \"y 축\") +\n  theme(\n    plot.title = element_text(family = \"NanumSquare\", size = 37),\n    axis.title.x = element_text(family = \"MaruBuri-Regular\", size = 30),\n    axis.title.y = element_text(family = \"MaruBuri-Regular\", size = 30)\n  ) +\n  annotate(\"text\", x = 5, y = max(data$y)-0.1, label = \"다른 글꼴\", \n           size = 10, family = \"MaruBuri-Bold\")\n\nragg::agg_jpeg(\"images/fonts_example.jpeg\", width = 3, height = 2, units = \"in\", res = 600)\nfonts_gg\ndev.off()\n\n\n\n\n\n\n그림 1.4: 다양한 글꼴을 적용한 ggplot 사례",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>글꼴</span>"
    ]
  },
  {
    "objectID": "theme_colors.html",
    "href": "theme_colors.html",
    "title": "\n2  색상\n",
    "section": "",
    "text": "2.1 시각화 메커니즘\n크게 보면 기계 즉, 컴퓨터가 색을 이해하고 표현하는 RGB 체계와 사람이 색을 인지하고 이해하는 HCL 체계로 나누어 진다. 2진수로 표현된 시각적 데이터는 RGB 16진수로 변환되어 모니터에 표시되고, 물리적 광자(photon)로 사람눈에 위치한 망막에 꽂히게 되고, 사람은 뇌에서 인지한 후에 이를 처리하여 시각적인 정보를 인식하게 된다. 따라서, 사람뇌에 인식할 수 있는 시각적인 정보로 데이터를 구성해야만 다양한 종류의 모니터를 통해 효율적이고 효과적으로 정보가 전달될 수 있다. 1",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>색상</span>"
    ]
  },
  {
    "objectID": "theme_colors.html#color-mechanism",
    "href": "theme_colors.html#color-mechanism",
    "title": "\n2  색상\n",
    "section": "",
    "text": "시각적 인지 메커니즘\n\n\n2.1.1 16진수 RGB 표색법\n양수 숫자나 크레파스 명칭 대신에, 일반적이고 컴퓨터가 읽어들일 수 있는 색상 표색법이 16진수 팔레트다. Cynthia Brewer 는 펜실베니아 대학에서 교수로 색상이론과 시각화에 관련된 전문분야를 갖고 있으며 특히, ColorBrewer 으로 알려진 색생체계는 웹, 출판, 색맹을 고려하여 널리 쓰이고 있다. ColorBrewer 색상체계를 R에서 시각화를 할 때 사용될 수 있게 만든 것이 RColorBrewer 패키지다. RColorBrewer Dark2 팔레트를 통해 실제로 구현된 색상체계를 살펴보자.\n\nlibrary(RColorBrewer)\nbrewer.pal(n = 8, name = \"Dark2\")\n#&gt; [1] \"#1B9E77\" \"#D95F02\" \"#7570B3\" \"#E7298A\" \"#66A61E\" \"#E6AB02\" \"#A6761D\"\n#&gt; [8] \"#666666\"\n\n# 기호는 관례로 붙이는 것이고, 16진수 문자열을 다음과 같이 파싱한다: #rrggbb에서 rr, gg, bb 각각은 적색, 녹색, 청색 채널에 대한 생상농도를 나타낸다. 각 색상은 2를 밑으로 하는 16개 숫자를 나타내고, “16진수(hexadecimal)” 혹은 줄여서 헥스(hex)로 부른다. 다음에 밑을 10으로 하는 십진수와 16진수 비교표가 다음에 나와 있다.\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\nA\nB\nC\nD\nE\nF\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n예를 들어, 팔렛트 첫 색상이 #1B9E77으로 명세되어 있다. 따라서, 녹색 채널 색상농도는 9E가 된다.\n\\[ 9E = 9 * 16^1 + 14 * 16^0 = 9 * 16 + 14 = 158 \\]\n무슨 뜻일까? 해당 채널의 가장 낮은 값은 00=0 이 되고, 가장 높은 값은 FF=255 가 된다.\n도움이 되는 기억해야될 중요한 사례가 다음에 나타나 있다. 적색, 녹색, 청색에 대한 강렬한 RGB 색상은 다음과 같다.\n\n\n\n색상\n헥스코드\n붉은색\n녹색\n파란색\n\n\n\nblue\n#0000FF\n0\n0\n255\n\n\ngreen\n#00FF00\n0\n255\n0\n\n\nred\n#FF0000\n255\n0\n0\n\n\n\n\n다음에 흑백, 회색을 표현한 것이 나타나 있다.\n\n\n\n색상\n헥스코드\n붉은색\n녹색\n파란색\n\n\n\nwhite, gray100\n#FFFFFF\n255\n255\n255\n\n\ngray67\n#ABABAB\n171\n171\n171\n\n\ngray33\n#545454\n84\n84\n84\n\n\nblack, gray0\n#000000\n0\n0\n0\n\n\n\n\n“gray” 회색으로 치환하게 되면, “gray”를 보게되는 어느 곳에서나 동일한 결과를 얻게 됨에 주목한다. 모든 채널을 최대값으로 하면 흰색, 모든 채널을 최소값으로 하면 검정색이 된다.\n\n\nR에서 색상을 지정하는 방법\n\n\n양의 정수: palette()함수로 조작하거나 검색한 현재 색상 팔레트에 인덱스를 사용.\n\n색상 명칭: colors() 함수로 검색된 색상\n\n16진수 문자열: 16진수로 구성된 3개조에 추가해서, 알파 투명도를 나타내는 네번째 채널을 넣어 16진수 4개조로 구성된 생상표로 확장하기도 한다.\n\n\nrgb(), col2rgb(), convertColor() 함수도 유용하니, 자세한 내용은 도움말을 참조한다.\n\n2.1.2 RGB 색상모형 대안 - HCL\n\nRGB 색공간과 색상모형이 유일무이하고 가장 최고는 아니다. 컴퓨터 화면에 색상을 표현하는데는 자연스럽지만, 일부 영역에서 색상을 선택하는 작업에는 이런 모형을 적용하기 어렵다. 예를 들어, 사람이 구별하기는 쉽지만, 인지적으로 색상별로 비교되는 생각으로 구성된 정성적인 팔레트를 만들어 내는 방법은 명확하지 않다. 컴퓨터에 사용되는 색상을 기술하는데 RGB를 사용하지만, 사람이 색상체계를 구축하는 색공간에 RGB체계만 사용할 이유는 없다. 이점은 사람과 컴퓨터가 다른 것이고, 이를 인정해야만 된다.\n색상모형은 일반적으로 RGB와 마찬가지로 세가지 차원으로 구성된다. 이는 망막에 세가지 다른 수용체를 인간이 갖는 생리적 사실에 기인한다. RGB와 인간 시각 체계에 대한 자세한 정보는 블로그를 참고한다. 색상모형의 차원이 사람이 인식할 수 있는 식별가능한 정보량에 더 가까이 부합되면 될수록, 더욱 유용하다. 이런 부합성이 사려깊게 작성된 팔레트 생성을 가능하게 하고, 더불어 특정한 특성을 갖는 색공간에 대한 길을 연다. RGB 색체계는 인간의 인식체계와 일치성이 떨어진다. 적색, 녹색, 청색광을 탐지할 수 있는 광수용체를 갖기 때문에, 색을 인지하는 체험이 RGB 방식으로 분해된다는 것을 의미하지 않는다. 적색과 녹색을 섞은 것으로 황색을 인식하는 체험을 했는가? 물론 아니다. 생리학적인 현실은 그렇다. 또다른 RGB 대안 모형이 HSV(Hue-Saturation-Value, 색상-채도-명도)모형이다. 불행하게도, 색을 선택하는데 문제가 많은데, 이유는 색상이 서로 중첩되는 차원을 갖기 때문이다.\n사람이 인지하기 좋은 색모형은 무엇일까? CIELUV 와 CIELAB 이 가장 잘 알려진 사례다. CIELUV의 변종인 HCL(Hue-Chroma-Luminance, 색상-채도-휘도) 모형을 좀더 살펴보자. Zeileis와 동료들이 R 사용자를 위한 팩키지로 멋지게 작성했다. (Zeileis, Hornik, 와/과 Murrell 2009) 2 colorspace R 팩키지에 딸려있고, HCL 색상모형을 탐색하고 이용하는데 도움을 준다. 마지막으로, HCL 색모형이 ggplot2에 RColorBrewer와 마찬가지로 잘 녹여져있다.\n\n\nHCL 색상모형의 세가지 차원\n\n\n색상(Hue) : 색상은 일반적으로 “색상이 뭐지?”라고 생각할 때 생각나는 것이다. 이해가 바로되는 쉬운 것이다! 각도로 주어지고 따라서 0 에서 360 까지 값을 갖는데, 무지개 도넛을 상상하면 된다.\n\n채도(Chroma) : 채도는 색상이 얼마나 순수한지 혹은 생생한지 나타낸다. 특정 색상이 회색과 섞일 수록, 채도는 떨어진다. 가장 낮은 값은 0 으로 회색 그자체에 대응되고, 최대값은 휘도에 따라 변한다.\n\n휘도(Lumiance) : 휘도는 명도(brightness), 명도(Lightness), 광도(intensity), 명도(value)와 관련된다. 낮은 휘도는 어두움을 의미하고, 진짜 검정색은 휘도가 0 이다. 높은 휘도는 밝음을 의미하고, 진짜 흰색은 휘도가 1 이다.\n\n\n저자는 채도와 휘도를 이해하고 구별하는데 힘든 시간을 보냈다. 위에서 살펴봤듯이, 색체계는 서로 독립된 것이 아니고, 3차원 HCL 공간에 기이한 모형으로 정보를 제공하고 있다. 위컴의 ggplot2 책(Wilkinson 2011)에 나온 그림 2.1 이 HCL 색공간을 이해하는데 도움이 된다.\n\n\n\n\n\n그림 2.1: ggplot2 HCL 색공간\n\n\n위컴 책에 언급된 내용을 다시 적으면 다음과 같다: 각 측면, 창은 휘도에 따라 가장 낮은 값에서 높은 값 순으로 HCL 공간을 슬라이스로 나누어 도식화한 것을 보여주고 있다. 0 과 100 극단 휘도값은 생략되었는데, 이유는 각각 검은 점과 흰점으로 나타나기 때문이다. 슬라이스 내부에, 중심은 채도가 0 으로, 회색에 대응된다. 슬라이스 끝쪽으로 이동하면, 채도가 증가하고, 색상이 더 순색에 가까워지고 농도가 짖어진다. 색상은 각도로 매핑된다.\ncolorspace 팩키지에 가치있는 기여는 아마도 함수를 사용해서 색상공간을 합리적 방식으로 색공간을 이리저리 돌아다닐 수 있게 만든 것이다. 이와는 대조적으로 RColorBrewer 팩키지가 제공하는 팔레트는 정교하게 제작되었지만, 불행히도 고정이다. 인지기반 색상체계를 사용하는 것에 대한 옹호 사례와 더불어 색공간에 0 이 자리하는 것을 알려주는 중요성을 시연하고 있다.(Zeileis, Hornik, 와/과 Murrell 2009)\n\n2.1.3 프린터 색상모형: CMYK 3 4\n\nCMYK 색상표는 시안(Cyan), 마젠타(Magenta), 옐로(Yellow), 블랙(Black = Key)를 원색으로 하여 명도가 낮아지는 감산혼합으로 주로 출력물 인쇄 혹은 사진 필림 현상에 사용되며 쿼크익스프레스, 일러스트레이터, 포토샵 등에서 CMYK 감산혼합을 지원한다. 현실적인 문제 때문에 RGB나 HSB(HSV)보다 표현 가능한 색이 적은 것으로 알려져 있다.\n학창시절 감산혼합의 색의 3원색은 빨강, 노랑, 파랑인데, CMYK는 생뚱맞게도 시안(Cyan), 마젠타(Magenta), 옐로(Yellow), 블랙(Black = Key)을 원색으로 하는데 이유는 빨강은 사실 자홍색(마젠타), 파랑은 청록색(시안)이라 정확한 색상이 후자가 맞다. 우리가 잘못 배운 탓이 크다. RGB 생상과 CMYK 생상을 PDF 파일로 찍어 상호 비교해보자. 5\n\n\nRGB 색상 출력\n\n\npdf(\"data/color_rgb.pdf\")\nRColorBrewer::display.brewer.all(type=\"qual\")\ndev.off()\n\n\n\nCMYK 색상 출력\n\npdf(\"data/color_cmyk.pdf\", colormodel = \"cmyk\")\nRColorBrewer::display.brewer.all(type=\"qual\")\ndev.off()",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>색상</span>"
    ]
  },
  {
    "objectID": "theme_colors.html#dataviz-mechanism-hcl",
    "href": "theme_colors.html#dataviz-mechanism-hcl",
    "title": "\n1  색상\n",
    "section": "\n1.2 RGB 색상모형 대안 - HCL\n",
    "text": "1.2 RGB 색상모형 대안 - HCL\n\nRGB 색공간과 색상모형이 유일무이하고 가장 최고는 아니다. 컴퓨터 화면에 색상을 표현하는데는 자연스럽지만, 일부 영역에서 색상을 선택하는 작업에는 이런 모형을 적용하기 어렵다. 예를 들어, 사람이 구별하기는 쉽지만, 인지적으로 색상별로 비교되는 생각으로 구성된 정성적인 팔레트를 만들어 내는 방법은 명확하지 않다. 컴퓨터에 사용되는 색상을 기술하는데 RGB를 사용하지만, 사람이 색상체계를 구축하는 색공간에 RGB체계를 사용할 이유는 없다. 이점은 사람과 컴퓨터가 다른 것이고, 이를 인정해야만 된다.\n색상모형은 일반적으로 RGB와 마찬가지로 세가지 차원으로 구성된다. 이는 망막에 세가지 다른 수용체를 인간이 갖는 생리적 사실에 기인한다. RGB와 인간 시각 체계에 대한 자세한 정보는 블로그를 참고한다. 색상모형의 차원이 사람이 인식할 수 있는 식별가능한 정보량에 더 가까이 부합되면 될수록, 더욱 유용하다. 이런 부합성이 사려깊게 작성된 팔레트 생성을 가능하게 하고, 더불어 특정한 특성을 갖는 색공간에 대한 길을 연다. RGB 색체계는 인간의 인식체계와 일치성이 떨어진다. 적색, 녹색, 청색광을 탐지할 수 있는 광수용체를 갖기 때문에, 색을 인지하는 체험이 RGB 방식으로 분해된다는 것을 의미하지 않는다. 적색과 녹색을 섞은 것으로 황색을 인식하는 체험을 했는가? 물론 아니다. 생리학적인 현실은 그렇다. 또다른 RGB 대안 모형이 HSV(Hue-Saturation-Value, 색상-채도-명도)모형이다. 불행하게도, 색을 선택하는데 문제가 많은데, 이유는 색상이 서로 중첩되는 차원을 갖기 때문이다.\n사람이 인지하기 좋은 색모형은 무엇일까? CIELUV 와 CIELAB 이 가장 잘 알려진 사례다. CIELUV의 변종인 HCL(Hue-Chroma-Luminance, 색상-채도-휘도) 모형을 좀더 살펴보자. Zeileis와 동료들이 R 사용자를 위한 팩키지로 멋지게 작성했다.2 colorspace R 팩키지에 딸려있고, HCL 색상모형을 탐색하고 이용하는데 도움을 준다. 마지막으로, HCL 색모형이 ggplot2에 RColorBrewer와 마찬가지로 잘 녹여져있다.\n\n\nHCL 색상모형의 세가지 차원\n\n\n색상(Hue) : 색상은 일반적으로 “색상이 뭐지?”라고 생각할 때 생각나는 것이다. 이해가 바로되는 쉬운 것이다! 각도로 주어지고 따라서 0 에서 360 까지 값을 갖는데, 무지개 도넛을 상상하면 된다.\n\n채도(Chroma) : 채도는 색상이 얼마나 순수한지 혹은 생생한지 나타낸다. 특정 색상이 회색과 섞일 수록, 채도는 떨어진다. 가장 낮은 값은 0 으로 회색 그자체에 대응되고, 최대값은 휘도에 따라 변한다.\n\n휘도(Lumiance) : 휘도는 명도(brightness), 명도(Lightness), 광도(intensity), 명도(value)와 관련된다. 낮은 휘도는 어두움을 의미하고, 진짜 검정색은 휘도가 0 이다. 높은 휘도는 밝음을 의미하고, 진짜 흰색은 휘도가 1 이다.\n\n\n저자는 채도와 휘도를 이해하고 구별하는데 힘든 시간을 보냈다. 위에서 살펴봤듯이, 색체계는 서로 독립된 것이 아니고, 3차원 HCL 공간에 기이한 모형으로 정보를 제공하고 있다.\n위캠의 ggplot2 책에 나온 6.6 그림이 HCL 색공간을 이해하는데 도움이 된다.\n\n\nggplot2 HCL 색공간\n\n위캠 책에 언급된 내용을 다시 적으면 다음과 같다: 각 측면, 창은 휘도에 따라 가장 낮은 값에서 높은 값 순으로 HCL 공간을 슬라이스로 나누어 도식화한 것을 보여주고 있다. 0 과 100 극단 휘도값은 생략되었는데, 이유는 각각 검은 점과 흰점으로 나타나기 때문이다. 슬라이스 내부에, 중심은 채도가 0 으로, 회색에 대응된다. 슬라이스 끝쪽으로 이동하면, 채도가 증가하고, 색상이 더 순색에 가까워지고 농도가 짖어진다. 색상은 각도로 매핑된다.\ncolorspace 팩키지에 가치있는 기여는 아마도 함수를 사용해서 색상공간을 합리적 방식으로 색공간을 이리저리 돌아다닐 수 있게 만든 것이다. 이와는 대조적으로 RColorBrewer 팩키지가 제공하는 팔레트는 정교하게 제작되었지만, 불행히도 고정이다.\n인지기반 색상체계를 사용하는 것에 대한 옹호 사례와 더불어 색공간에 0 이 자리하는 것을 알려주는 중요성을 시연하고 있다.\n\n“Why Should Engineers and Scientists Be Worried About Color?”",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>색상</span>"
    ]
  },
  {
    "objectID": "theme_colors.html#viz-printer-cmyk",
    "href": "theme_colors.html#viz-printer-cmyk",
    "title": "\n1  색상\n",
    "section": "\n1.3 프린터 색상모형: CMYK 3 4\n",
    "text": "1.3 프린터 색상모형: CMYK 3 4\n\nCMYK 색상표는 시안(Cyan), 마젠타(Magenta), 옐로(Yellow), 블랙(Black = Key)를 원색으로 하여 명도가 낮아지는 감산혼합으로 주로 출력물 인쇄 혹은 사진 필림 현상에 사용되며 쿼크익스프레스, 일러스트레이터, 포토샵 등에서 CMYK 감산혼합을 지원한다. 현실적인 문제 때문에 RGB나 HSB(HSV)보다 표현 가능한 색이 적은 것으로 알려져 있다.\n학창시절 감산혼합의 색의 3원색은 빨강, 노랑, 파랑인데, CMYK는 생뚱맞게도 시안(Cyan), 마젠타(Magenta), 옐로(Yellow), 블랙(Black = Key)을 원색으로 하는데 이유는 빨강은 사실 자홍색(마젠타), 파랑은 청록색(시안)이라 정확한 색상이 후자가 맞다. 우리가 잘못 배운 탓이 크다.\nRGB 생상과 CMYK 생상을 PDF 파일로 찍어 상호 비교해보자. 5\n\n\nRGB 색상 출력\n\n\npdf(\"data/color_rgb.pdf\")\nRColorBrewer::display.brewer.all(type=\"qual\")\ndev.off()\n\n\n\nCMYK 색상 출력\n\npdf(\"data/color_cmyk.pdf\", colormodel = \"cmyk\")\nRColorBrewer::display.brewer.all(type=\"qual\")\ndev.off()",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>색상</span>"
    ]
  },
  {
    "objectID": "theme_colors.html#dataviz-color-brewer-viridis",
    "href": "theme_colors.html#dataviz-color-brewer-viridis",
    "title": "\n2  색상\n",
    "section": "\n2.2 RColorBrewer 와 viridis\n",
    "text": "2.2 RColorBrewer 와 viridis\n\n\n2.2.1 RColorBrewer\n색상선택이 가장 논란이 많고, 이리저리 만지작 거리면서 정말 많은 시간을 보내는 분야다. 지리학자이며 색상 전문가 Cynthia Brewer 교수가 출판과 웹에서 사용되는 색상표를 제작했고, 이는 RColorBrewer 팩키지에 반영되어 있다. 팩키지를 설치하고 사용하면 된다. 연관된 전체 팔레트를 살펴보는 명령어는 display.brewer.all() 이다.\n\nlibrary(RColorBrewer) # install.packages(\"RColorBrewer\")\ndisplay.brewer.all()\n\n\n\n\n\n\n그림 2.2: RColorBrewer 전체 색상표\n\n\n팔레트는 종류가 많지만 다음 세가지 범주에 속한다. 위에서 아래부터 다음과 같다.\n\n\n순차적(sequential) : 낮은 것에서 높은 것으로 한쪽 극단이 흥미롭고 반대쪽 극단이 재미없는 것을 시각화하는데 매우 좋다. 예를 들어 p-값, 상관계수 (주의: 상관계수 1 이 흥미로운 것은 양수를 가정했다)\n\n정량적(quantitative) : 순서가 없는 범주형 자료를 시각화할 때 유용하다. 예를 들어, 국가나 대륙. 특수한 “쌍을 이룬” 팔레트가 있다; 예를 들어, 곡물 밀 유형같이 실험이 아닌 요인, 실험군과 대조군 같은 이진 실험 요인.\n\n발산하는(diverging) : 극단의 음수에서 극단의 양수까지 범위를 같는 것을 시각화하는데 유용한다. 이런 데이터는 극단의 값이 중간에 위치한 덜 흥미로운 지점을 지난다. 예를 들어, t-통계량, z-점수, 상관계수가 이에 속한다.\n\n명칭을 명세해서 RColorBrewer 팔렛트 하나만 볼 수 있다.\n\ndisplay.brewer.pal(n = 8, name = 'Dark2')\n\n\n\n\n\n\n그림 2.3: RColorBrewer 중 Dark2 팔렛트\n\n\n\n\n\n2.2.2 viridis\n2015년 Stéfan van der Walt 와 Nathaniel Smith는 파이썬 matplotlib 팩키지에 사용될 새로운 색상 지도를 설계했고, SciPy 2015에서 발표했다. viridis 팩키지로 인해 R에 4가지 신규 팔레트가 추가되었다. CRAN과, GitHub에서 팩키지를 만날 수 있다. 아직 나온지 얼마되지 않아서, 자세한 사항은 viridis 팩키지를 설치하고 소품문을 읽고 직접 경험하기 바란다.\n\n\n\n\n\n\nviridis 색상표는 완벽하게 균등하게 지각되도록 설계되었고, 정규형식에서나 흑백으로 전환되었을 때도 마찬가지다. 또한 색망을 갖는 독자도 올바르게 지각될 수 있도록 설계되었다.\n\n\n\n\n2.2.3 색각 이상\n색각 이상은 비색각 이상자와 원추세포의 차이로 인해 색상을 잘 구분하지 못하는 증상으로 색맹과 색약으로 구분된다. 색맹은 삼원색 중 특정 색상을 완전히 감지하지 못하는 것이며, 색약은 수용체에 문제로 감지는 할 수 있지만 다르게 보이게 된다. dichromat 팩키지(CRAN)는 2색시자에 대한 효과적인 색상조합을 선택하는데 도움이 된다. colorschems 목록에는 17 가지 색상조합이 담겨있는데, 적색과 녹색을 구별하는 능력이 없거나 예외적인 시력을 갖는 2색시자에게 적합하다.\n\nlibrary(dichromat) # install.packages(\"dichromat\")\nlibrary(ggplot2)\n\nx_boundaries &lt;-\n  lapply(colorschemes,\n         function(x) seq(from = 0, to = 1, length = length(x) + 1))\n\ndf &lt;- data.frame(\n  xmin = unlist(lapply(x_boundaries, function(x) rev(rev(x)[-1]))),\n  xmax = unlist(lapply(x_boundaries, function(x) x[-1])),\n  ymax = rep(seq_along(colorschemes), sapply(colorschemes, length)))\nanno_df &lt;- data.frame(\n  scheme = names(colorschemes),\n  num = seq_along(colorschemes))\nggplot(df, aes(xmin = xmin, xmax = xmax, ymin = ymax - 0.85, ymax = ymax)) +\n  geom_rect(fill = unlist(colorschemes)) + xlim(c(-0.6, 1)) + \n  annotate(\"text\", x = -0.05, y = anno_df$num - 0.5, label = anno_df$scheme,\n           hjust = 1) + \n  theme_bw() +\n  theme(panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        panel.border = element_blank(),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        axis.title = element_blank())\n\n\n\n\n\n\n그림 2.4: 색각 이상 dichromat 색상표\n\n\n\n\ndichmat() 함수는 색상을 변환해서 다른 형태의 색맹에 근사적인 효과를 구현할 수 있어서, 후보 색상조합에 대한 효과를 평가할 수 있게 한다. data(\"dalton\") 명령어는 256 색상 팔레트를 표현하는 객체를 생성하는데, 정상 시야로 표현되는 것과, 적록(red-green) 색맹과 청녹(green-blue) 생맹으로 표현되는 것이다.(Rogowitz 와/과 Treinish 1996)\nRColorBrewer는 ColorBrewer 2.0에서 제공하는 색상 팔레트에 기반한 R 색상 패키지다. 데이터 시각화를 위한 다양한 색상 조합을 제공하며, 데이터 시각화 가독성과 해석력을 향상을 위한 발산(diverging), 연속(sequential), 범주형(qualitive) 데이터 유형에 대한 적합한 색상 팔레트가 포함되어 있다.\n\nlibrary(RColorBrewer)\n\npar(mfrow=c(1 ,3))\ndisplay.brewer.all(type=\"div\")  # 양쪽발산(diverging)\ndisplay.brewer.all(type=\"seq\")  # 연속형(sequential)\ndisplay.brewer.all(type=\"qual\") # 범주형(qualitive)\ndev.off()\n#&gt; null device \n#&gt;           1\n\n\n\n\n\n\n그림 2.5: 유형별 색상 팔레트\n\n\n\n\npenguins 데이터셋을 활용하여 각 섬별로 펭귄의 수를 집계한 다음, Torgersen 섬의 이름을 NA(결측값)으로 변경한다. 변경된 데이터를 바탕으로 ggplot2 패키지를 사용해 막대 그래프를 생성하며, 섬의 이름을 x축에, 각 섬의 펭귄 수를 y축에 배치하고, 각 막대는 해당 섬의 이름에 따라 다른 색상으로 채워운다. 결측값(여기서는 Torgersen 섬)은 회색으로 표시되며, 나머지 색상은 RColorBrewer의 “Accent” 팔레트를 사용하여 색을 채워넣는다.\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n\npenguins |&gt; \n  count(island) |&gt; \n  mutate(island = if_else(island ==  \"Torgersen\", NA_character_, island)) |&gt; \n  ggplot(aes( x = island, y = n, fill = island)) +\n    geom_col() +\n    scale_fill_brewer(palette=\"Accent\", na.value=\"grey50\")\n\n\n\n\n\n\n그림 2.6: 팔머 펭귄 데이터 RColorBrewer Accent 팔렛트 적용트",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>색상</span>"
    ]
  },
  {
    "objectID": "theme_colors.html#정당-색상",
    "href": "theme_colors.html#정당-색상",
    "title": "\n1  색상\n",
    "section": "\n1.3 정당 색상",
    "text": "1.3 정당 색상\n더블어민주당, 국민의힘, 정의당 웹사이트에서 각 정당 로고 및 주된 로고 색상을 확인할 수 있다. 이를 바탕으로 정당별 시각화 제작에 사용될 색상으로 팔레트를 생성하여 활용한다.\n\n# 각 정당별 색상\n민주당_2색상 &lt;- c(\"#00A0E2\", \"#004EA1\")\n민주당_4색상 &lt;- c(\"#8AC452\", \"#00AA7D\", \"#008CCD\", \"#004EA1\")\n\n국힘_3색상 &lt;- c(\"#FFFFFF\", \"#E61E2B\", \"#00B5E2\")\n국힘_6색상 &lt;- c(\"#EDB19D\", \"#F18070\", \"#BDE4F8\", \"#004C7E\", \"#112C56\")\n\n정의당_3색상 &lt;- c(\"#ffed00\", \"#e8306d\", \"#00a366\", \"#623e91\")\n\n무소속_색상 &lt;- \"#999999\"\n\n# 정당, 색상코드, 시각화\nparty_palette &lt;- c(\"민주당\" = 민주당_2색상[2], \n                   \"국민의힘\" = 국힘_3색상[2], \n                   \"정의당\" = 정의당_3색상[1], \n                   \"무소속\" = 무소속_색상)\n\ndf_colors &lt;- data.frame(\n  party = names(party_palette),\n  color = party_palette\n)\n\nggplot(df_colors, aes(x = 1, y = party, fill = color)) +\n  geom_tile() +\n  scale_fill_identity() +\n  theme_void() +\n  coord_fixed(ratio = 0.1) +\n  geom_text(aes(label = str_glue(\"{party} - {color}\")))\n\n\n\n\n\n\n\n정당별 색상을 반영한 데이터 시각화 그래프 제작을 위해서 난수를 생성한 정당별 지지율 데이터를 만든 후에 정당색상을 반영한 그래프를 제작한다.\n\nparty_name &lt;- c(\"민주당\", \"국민의힘\", \"정의당\", \"무소속\")\n\nvotes &lt;- c(runif(1, min=.4, max=.5),\n           runif(1, min=.4, max=.5),\n           runif(1, min=.0, max=.05),\n           runif(1, min=.0, max=.05))\n\ntibble(party_name, votes) |&gt; \n  mutate(party_name = factor(party_name, levels = c(\"민주당\", \"국민의힘\", \"정의당\", \"무소속\"))) |&gt; \n  ggplot(aes(x = party_name, y = votes, fill = party_name)) +\n    geom_col() +\n    scale_fill_manual(values = party_palette) +\n    scale_y_continuous(labels = scales::percent) +\n    labs(x = \"\",\n         y = \"지지율\",\n         fill = \"정당명\",\n         title = \"정당별 지지율\")",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>색상</span>"
    ]
  },
  {
    "objectID": "theme_colors.html#이미지-색상",
    "href": "theme_colors.html#이미지-색상",
    "title": "\n1  색상\n",
    "section": "\n1.4 이미지 → 색상",
    "text": "1.4 이미지 → 색상\n이미지에서 색상을 출력한 후에 이를 팔레트로 만들어서 시각화한 사례를 만들어보자. 태극기에서 가장 많은 색상을 선택하여 16진수 색상코드를 추출한다. magick 패키지와 생상에서 데이터프레임 변환을 위해 imager 패키지를 사용해서 변환한다. 6\n\nlibrary(scales)\nlibrary(imager)\nlibrary(magick)\n\nflag_svg &lt;- image_read_svg(\"images/korean_flag.svg\")\n\nflag_palette &lt;- flag_svg |&gt; \n  image_resize(\"500\") |&gt; \n  image_quantize(max = 4, colorspace=\"RGB\") |&gt; \n  magick2cimg() |&gt; \n  RGBtoHSV() |&gt; \n  as.data.frame(wide=\"c\") %&gt;%  #3 making it wide makes it easier to output hex colour\n  mutate(hex=hsv(rescale(c.1, from=c(0,360)),c.2,c.3),\n         hue = c.1,\n         sat = c.2,\n         value = c.3) %&gt;%\n  count(hex, hue, sat,value, sort=T) %&gt;% \n  mutate(colorspace = \"RGB\") |&gt; \n  pull(hex)\n\nflag_colors_gg &lt;- tibble(colors = flag_palette) |&gt; \n  ggplot(aes(x = 1, y = 1:length(flag_palette), fill = colors)) + \n    geom_tile() +\n    scale_fill_identity() +\n    theme_void() + \n    coord_fixed(ratio = 0.2) +\n    geom_text(aes(label = str_glue(\"{colors}\")))  \n\n태극기 이미지를 ggplot으로 시각화한다.\n\nlibrary(ggimage)\n\nflag_image_gg &lt;- ggplot() +\n  geom_image(aes(x=0, y=0, image=\"images/korean_flag.svg\"), size=1) +\n  coord_cartesian(xlim=c(-1, 1), ylim=c(-1, 1)) +\n  theme_void()  \n\n태극기에서 추출한 색상을 바탕으로 막대그래프에 색상을 입혀 시각화한다.\n\nflag_penguin_gg &lt;- penguins |&gt; \n  count(island) |&gt; \n  mutate(island = if_else(island ==  \"Torgersen\", NA_character_, island)) |&gt; \n  ggplot(aes( x = island, y = n, fill = island)) +\n    geom_col() +\n    scale_fill_manual(values = flag_palette[2:4], na.value=\"grey50\") +\n    theme(legend.position = \"top\")\n\n태극기, 태극기 색상, 막대그래프 시각화를 한번에 요약하여 시각화한다.\n\nlibrary(patchwork)\n\nprint((flag_image_gg + flag_colors_gg) / flag_penguin_gg)",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>색상</span>"
    ]
  },
  {
    "objectID": "theme_colors.html#footnotes",
    "href": "theme_colors.html#footnotes",
    "title": "\n2  색상\n",
    "section": "",
    "text": "A Better Default Colormap for Matplotlib, SciPy 2015, Nathaniel Smith and Stéfan van der Walt↩︎\n알아봅시다 - 디스플레이 화질 구성 요소↩︎\n위키백과, “CMYK color model”↩︎\n블로그 아이디어, “CMYK 색상표”↩︎\nOne Tipe Per Day, “draw figures in CMYK mode in R”↩︎\nextracting colours from your images with image quantization↩︎",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>색상</span>"
    ]
  },
  {
    "objectID": "theme_colors.html#색상적용-사례",
    "href": "theme_colors.html#색상적용-사례",
    "title": "\n2  색상\n",
    "section": "\n2.3 색상적용 사례",
    "text": "2.3 색상적용 사례\n색상을 지정하여 그래프를 제작하는 방법과 이미지에서 색상을 추출하여 그래프에 적용하는 기법을 살펴보면, 데이터 시각화에 깊이와 매력을 더한다. 정당 로고에서 추출한 색상으로 정당별 지지율 그래프를 만드는 것과 태극기 이미지에서 추출한 색상을 사용하여 데이터 시각화를 수행하는 사례는 색상의 선택과 적용이 시각적 표현에 어떻게 영향을 미칠 수 있는지를 가늠할 수 있다.\n\n2.3.1 정당 색상\n더블어민주당, 국민의힘, 정의당 웹사이트에서 각 정당 로고 및 주된 로고 색상을 확인할 수 있다. 이를 바탕으로 정당별 시각화 제작에 사용될 색상으로 팔레트를 생성하여 활용한다.\n\n# 각 정당별 색상\n민주당_2색상 &lt;- c(\"#00A0E2\", \"#004EA1\")\n민주당_4색상 &lt;- c(\"#8AC452\", \"#00AA7D\", \"#008CCD\", \"#004EA1\")\n\n국힘_3색상 &lt;- c(\"#FFFFFF\", \"#E61E2B\", \"#00B5E2\")\n국힘_6색상 &lt;- c(\"#EDB19D\", \"#F18070\", \"#BDE4F8\", \"#004C7E\", \"#112C56\")\n\n정의당_3색상 &lt;- c(\"#ffed00\", \"#e8306d\", \"#00a366\", \"#623e91\")\n\n무소속_색상 &lt;- \"#999999\"\n\n# 정당, 색상코드, 시각화\nparty_palette &lt;- c(\"민주당\" = 민주당_2색상[2], \n                   \"국민의힘\" = 국힘_3색상[2], \n                   \"정의당\" = 정의당_3색상[1], \n                   \"무소속\" = 무소속_색상)\n\ndf_colors &lt;- data.frame(\n  party = names(party_palette),\n  color = party_palette\n)\n\nggplot(df_colors, aes(x = 1, y = party, fill = color)) +\n  geom_tile() +\n  scale_fill_identity() +\n  theme_void() +\n  coord_fixed(ratio = 0.1) +\n  geom_text(aes(label = str_glue(\"{party} - {color}\")))\n\n\n\n\n\n\n그림 2.7: 정당별 색상 팔레트\n\n\n\n\n정당별 색상을 반영한 데이터 시각화 그래프 제작을 위해서 난수를 생성한 정당별 지지율 데이터를 만든 후에 정당색상을 반영한 그래프를 제작한다.\n\nparty_name &lt;- c(\"민주당\", \"국민의힘\", \"정의당\", \"무소속\")\n\nvotes &lt;- c(runif(1, min=.4, max=.5),\n           runif(1, min=.4, max=.5),\n           runif(1, min=.0, max=.05),\n           runif(1, min=.0, max=.05))\n\ntibble(party_name, votes) |&gt; \n  mutate(party_name = factor(party_name, levels = c(\"민주당\", \"국민의힘\", \"정의당\", \"무소속\"))) |&gt; \n  ggplot(aes(x = party_name, y = votes, fill = party_name)) +\n    geom_col() +\n    scale_fill_manual(values = party_palette) +\n    scale_y_continuous(labels = scales::percent) +\n    labs(x = \"\",\n         y = \"지지율\",\n         fill = \"정당명\",\n         title = \"정당별 지지율\") \n\n\n\n\n\n\n그림 2.8: 정당별 색상 팔레트를 적용한 막대 그래프\n\n\n\n\n\n2.3.2 이미지 → 색상\n이미지에서 색상을 출력한 후에 이를 팔레트로 만들어서 시각화한 사례를 만들어보자. 태극기에서 가장 많은 색상을 선택하여 16진수 색상코드를 추출한다. magick 패키지와 생상에서 데이터프레임 변환을 위해 imager 패키지를 사용해서 변환한다. 6\n\nlibrary(scales)\nlibrary(imager)\nlibrary(magick)\n\nflag_svg &lt;- image_read_svg(\"images/korean_flag.svg\")\n\nflag_palette &lt;- flag_svg |&gt; \n  image_resize(\"500\") |&gt; \n  image_quantize(max = 4, colorspace=\"RGB\") |&gt; \n  magick2cimg() |&gt; \n  RGBtoHSV() |&gt; \n  as.data.frame(wide=\"c\") %&gt;%  #3 making it wide makes it easier to output hex colour\n  mutate(hex=hsv(rescale(c.1, from=c(0,360)),c.2,c.3),\n         hue = c.1,\n         sat = c.2,\n         value = c.3) %&gt;%\n  count(hex, hue, sat,value, sort=T) %&gt;% \n  mutate(colorspace = \"RGB\") |&gt; \n  pull(hex)\n\nflag_colors_gg &lt;- tibble(colors = flag_palette) |&gt; \n  ggplot(aes(x = 1, y = 1:length(flag_palette), fill = colors)) + \n    geom_tile() +\n    scale_fill_identity() +\n    theme_void() + \n    coord_fixed(ratio = 0.2) +\n    geom_text(aes(label = str_glue(\"{colors}\")))  \n\n태극기 이미지를 ggplot으로 시각화한다.\n\nlibrary(ggimage)\n\nflag_image_gg &lt;- ggplot() +\n  geom_image(aes(x=0, y=0, image=\"images/korean_flag.svg\"), size=1) +\n  coord_cartesian(xlim=c(-1, 1), ylim=c(-1, 1)) +\n  theme_void()  \n\n태극기에서 추출한 색상을 바탕으로 막대그래프에 색상을 입혀 시각화한다.\n\nflag_penguin_gg &lt;- penguins |&gt; \n  count(island) |&gt; \n  mutate(island = if_else(island ==  \"Torgersen\", NA_character_, island)) |&gt; \n  ggplot(aes( x = island, y = n, fill = island)) +\n    geom_col() +\n    scale_fill_manual(values = flag_palette[2:4], na.value=\"grey50\") +\n    theme(legend.position = \"top\")\n\n태극기, 태극기 색상, 막대그래프 시각화를 한번에 요약하여 시각화한다.\n\nlibrary(patchwork)\n\nprint((flag_image_gg + flag_colors_gg) / flag_penguin_gg)\n\n\n\n\n\n\n그림 2.9: 태극기 이미지에서 추출한 색상을 활용한 시각화 그래프\n\n\n\n\n\n\n\n\nRogowitz, Bernice E, 와/과 Lloyd A Treinish. 1996. “Why should engineers and scientists be worried about color”. See URL http://www. research. ibm. com/people/l/lloydt/color/color. HTM.\n\n\nWilkinson, Leland. 2011. ggplot2: elegant graphics for data analysis by WICKHAM, H. Oxford University Press.\n\n\nZeileis, Achim, Kurt Hornik, 와/과 Paul Murrell. 2009. “Escaping RGBland: Selecting colors for statistical graphics”. Computational Statistics & Data Analysis 53 (9): 3259–70.",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>색상</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "참고문헌",
    "section": "",
    "text": "Rogowitz, Bernice E, and Lloyd A Treinish. 1996. “Why Should\nEngineers and Scientists Be Worried about Color.” See URL\nHttp://Www. Research. Ibm. Com/People/l/Lloydt/Color/Color. HTM.\n\n\nWilkinson, Leland. 2011. Ggplot2: Elegant Graphics for Data Analysis\nby WICKHAM, h. Oxford University Press.\n\n\nZeileis, Achim, Kurt Hornik, and Paul Murrell. 2009. “Escaping\nRGBland: Selecting Colors for Statistical Graphics.”\nComputational Statistics & Data Analysis 53 (9): 3259–70.",
    "crumbs": [
      "참고문헌"
    ]
  },
  {
    "objectID": "theme_ggplot.html",
    "href": "theme_ggplot.html",
    "title": "\n3  그래프 테마\n",
    "section": "",
    "text": "3.0.1 hrbrthemes\n밥 루디스가 제작한 hrbrthemes 테마 패키지는 특히 텍스트가 많은 비즈니스 유형의 프레젠테이션에 적합한 테마와 테마 구성 요소를 제공한다.\nlibrary(hrbrthemes)\n\nhrbr_themes_name &lt;- c(\"theme_ipsum\", \"theme_ipsum_ps\", \"theme_ipsum_es\", \"theme_ipsum_rc\", \"theme_ipsum_ps\", \"theme_ipsum_pub\", \"theme_ipsum_tw\", \"theme_modern_rc\", \"theme_ft_rc\")\n\nhrbr_themes_vector &lt;- c(theme_ipsum, theme_ipsum_ps, theme_ipsum_es, theme_ipsum_rc, theme_ipsum_ps, theme_ipsum_pub, theme_ipsum_tw, theme_modern_rc, theme_ft_rc)\n\nhrbr_theme_output &lt;- map2(hrbr_themes_name, hrbr_themes_vector, draw_themes)\n\nhrbrtheme_gg &lt;- patchwork::wrap_plots(hrbr_theme_output)\n\nhrbrtheme_gg\n\nragg::agg_jpeg(\"images/hrbrtheme_gg.jpeg\",\n               width = 10, height = 7, units = \"in\", res = 600)\nhrbrtheme_gg\ndev.off()",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>그래프 테마</span>"
    ]
  },
  {
    "objectID": "theme_ggplot.html#사용자-테마",
    "href": "theme_ggplot.html#사용자-테마",
    "title": "\n3  그래프 테마\n",
    "section": "\n3.1 사용자 테마",
    "text": "3.1 사용자 테마\n설치한 한글 글꼴과 색상을 매칭하여 사용자 맞춤 테마(theme_penguin)을 생성하고 색상은 wesanderson 패키지에서 Darjeeling1 5가지 색상을 사용하여 시각화한다.\n\nextrafont::loadfonts(\"win\")\n\ntheme_penguin &lt;- function() {\n  \n  # ggthemes::theme_tufte() +\n  theme_minimal() +\n    \n  theme(\n      plot.title     = element_text(family = \"NanumSquare\", size = 18, face = \"bold\"),\n      plot.subtitle  = element_text(family = \"MaruBuri\", size = 13),\n      axis.title.x   = element_text(family = \"MaruBuri\"),\n      axis.title.y   = element_text(family = \"MaruBuri\"),\n      axis.text.x    = element_text(family = \"MaruBuri\", size = 11),\n      axis.text.y    = element_text(family = \"MaruBuri\", size = 11),\n      legend.title   = element_text(family = \"MaruBuri\", size=13),\n      plot.caption   = element_text(family = \"NanumSquare\", color = \"gray20\")\n  )\n}\n\ndarjeeling1_palette &lt;- wes_palette(\"Darjeeling1\", n = 5)\n\nggplot_penguins_gg &lt;- penguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n    geom_point(aes(color = species, shape = species), size = 3) +\n    geom_smooth(method = \"lm\", se = FALSE, color = \"black\")  +\n    labs(\n      title = \"물갈퀴 길이와 체중 회귀분석\",\n      subtitle = \"남극 파머 펭귄 데이터셋\",\n      x = \"물갈퀴 길이 (mm)\",\n      y = \"체중 (g)\",\n      color = \"펭귄종\",\n      caption = \"자료출처: palmerpenguins 패키지\"\n    ) +\n  guides(shape = \"none\") +\n  scale_color_manual(values =  darjeeling1_palette) +\n  theme_penguin()\n\nggplot_penguins_gg\n\nggsave(\"images/ggplot_penguins_gg.png\")",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>그래프 테마</span>"
    ]
  },
  {
    "objectID": "theme_ggplot.html#그래프-자동-설정",
    "href": "theme_ggplot.html#그래프-자동-설정",
    "title": "\n3  그래프 테마\n",
    "section": "\n3.2 그래프 자동 설정",
    "text": "3.2 그래프 자동 설정\n작성한 테마를 매번 코드를 “복사하여 붙여넣기” 하여 사용하는 대신 .Rprofile 파일에 반영하여 매번 ggplot 시각화를 할 때 사용하는 방법을 살펴보자. usethis 패키지 edit_r_profile() 함수를 호출하여 앞서 작성한 테마를 반영한다.\n\nusethis::edit_r_profile()\n\ntheme_penguin() 테마를 ggplot2 패키지 theme_set()으로 설정하고 기본 색상을 정의하면 시각화 그래프에 반영하여 사용할 수 있다.\n\nsuppressWarnings(suppressMessages({\n\n  extrafont::loadfonts(\"win\")\n\n\n  ## 테마 (글꼴) -----------------------------\n  theme_penguin &lt;- function() {\n\n    # ggthemes::theme_tufte() +\n    ggplot2::theme_minimal() +\n\n      ggplot2::theme(\n        plot.title     = ggplot2::element_text(family = \"NanumSquare\", size = 18, face = \"bold\"),\n        plot.subtitle  = ggplot2::element_text(family = \"MaruBuri\", size = 13),\n        axis.title.x   = ggplot2::element_text(family = \"MaruBuri\"),\n        axis.title.y   = ggplot2::element_text(family = \"MaruBuri\"),\n        axis.text.x    = ggplot2::element_text(family = \"MaruBuri\", size = 11),\n        axis.text.y    = ggplot2::element_text(family = \"MaruBuri\", size = 11),\n        legend.title   = ggplot2::element_text(family = \"MaruBuri\", size=13),\n        plot.caption   = ggplot2::element_text(family = \"NanumSquare\", color = \"gray20\")\n      )\n  }\n\n  ## 색상\n  ### 웨스 앤더슨\n  color_palette &lt;- wesanderson::wes_palette(\"Darjeeling1\", n = 5)\n\n  ggplot2::theme_set(theme_penguin())\n\n}))\n\n.Rprofile 파일에 ggplot() 사용자 정의 테마가 지정되어 있기 때문에 새로 R 세션을 시작하면 theme_penguin() 테마 및 웨스 앤더스 color_palette 색상 팔레트도 사용할 수 있다.\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\npenguins_theme_gg &lt;- penguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n    geom_point(aes(color = species, shape = species), size = 3) +\n    geom_smooth(method = \"lm\", se = FALSE, color = \"black\")  +\n    labs(\n      title = \"물갈퀴 길이와 체중 회귀분석\",\n      subtitle = \"남극 파머 펭귄 데이터셋\",\n      x = \"물갈퀴 길이 (mm)\",\n      y = \"체중 (g)\",\n      color = \"펭귄종\",\n      caption = \"자료출처: palmerpenguins 패키지\"\n    ) +\n  guides(shape = \"none\") +\n  scale_color_manual(values =  color_palette) +\n  theme_penguin()\n\nragg::agg_jpeg(\"images/penguins_theme_gg.jpg\",\n              width = 10, height = 7, units = \"in\", res = 600)\npenguins_theme_gg\ndev.off()\n\n\n\n펭귄 데이터 사용자 테마 적용 그래프",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>그래프 테마</span>"
    ]
  },
  {
    "objectID": "theme_gt.html",
    "href": "theme_gt.html",
    "title": "\n4  표 테마\n",
    "section": "",
    "text": "4.1 gt 표 작성하기\ngt 패키지는 R Tidyverse 생태계에 속한 표 제작 목적으로 특별히 제작된 패키지로 그래프 문법에 기반한 ggplot2 패키지에 친숙하신 저자는 쉽게 표도 gt 패키지를 사용해서 다양한 표 제작이 가능하다. 다음 예시에서는 palmerpenguins 데이터 패키지 penguins 데이터셋을 활용하여 “남극 펭귄 서식섬과 종 빈도표”를 제작한다.\npenguins_gt 변수에 저장된 gt 표를 저장한다. gt 패키지의 다양한 기능을 활용하여 복잡한 표도 손쉽게 작성할 수 있다는 것을 다시 확인할 수 있다.\nlibrary(tidyverse)\nlibrary(palmerpenguins)\nlibrary(gt)\nlibrary(gtExtras)\nlibrary(magick)\n\npenguins_gt &lt;- penguins |&gt; \n  count(species, island) |&gt; \n  pivot_wider(names_from = island, values_from = n, values_fill = 0) |&gt; \n  as_tibble() |&gt; \n  gt(rowname_col = \"species\") |&gt; \n    tab_header(\n      title = md(\"남극 펭귄 **서식섬과 종** 빈도표\"),\n      subtitle = md(\"`palmerpenguins` 데이터 패키지\")\n    ) |&gt; \n    grand_summary_rows(\n      columns = c(Biscoe, Dream, Torgersen),\n      fns = list(\n        '합계' = ~sum(.) \n      ),\n      fmt = ~ fmt_number(., use_seps = FALSE, decimals = 0),\n      missing_text = '-'\n    )  |&gt; \n    cols_align(\"center\") |&gt; \n    opt_row_striping() |&gt; \n    tab_source_note(\n      source_note = md(\"자료출처: `penguins` 데이터셋\")\n  )\n\npenguins_gt\n\n\n\n\n\n\n\n남극 펭귄 서식섬과 종 빈도표\n\n\n\npalmerpenguins 데이터 패키지\n\n\n\nBiscoe\nDream\nTorgersen\n\n\n\n\nAdelie\n44\n56\n52\n\n\nChinstrap\n0\n68\n0\n\n\nGentoo\n124\n0\n0\n\n\n합계\n168\n124\n52\n\n\n\n자료출처: penguins 데이터셋",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>표 테마</span>"
    ]
  },
  {
    "objectID": "theme_gt.html#gt-표-작성하기",
    "href": "theme_gt.html#gt-표-작성하기",
    "title": "\n4  표 테마\n",
    "section": "",
    "text": "라이브러리 가져오기: tidyverse, palmerpenguins, gt, gtExtras, magick.\n\npenguins 데이터를 사용하여 종(species)과 서식섬(island)에 따른 빈도를 집계하고 표제작에 맞춰 피벗 테이블을 생성한다.\n\ngt() 함수를 이용하여 gt 표를 초기화하고, rowname_col 인자로 “species”를 지정하여 행 이름을 설정한다.\n\ntab_header() 함수로 표 제목과 부제목을 지정한다.\n\ngrand_summary_rows() 함수를 사용하여 각 서식섬(Biscoe, Dream, Torgersen) 합계를 계산한다.\n\ncols_align(\"center\")을 통해 텍스트를 가운데 정렬한다.\n\nopt_row_striping() 함수로 행에 스트라이핑을 추가하여 가독성을 높인다.\n\ntab_source_note() 함수로 표 출처를 표기한다.\n\n\n\n\n4.1.1 기본 색상과 스타일\n웹 프로그램을 제작할 때 HTML로 콘텐츠를 제작하고 CSS/SCSS 파일로 스타일을 적용하는 것처럼 유지보수성이 뛰어나고 가독성이 좋은 표를 제작하기 위해 저자가 익혀야 되는 필수적인 기본기 중 하나다. penguins_gt 표는 핵심 정보가 잘 요약되어 있지만, 색상이나 다른 외양 관련 설정은 기본설정값만 따르고 있다.\ngt 패키지 opt_stylize() 함수는 표 스타일링에 다양한 선택지를 제공한다. 미리 정의된 배경색, 선 색상, 선 스타일 등을 다르게 적용할 수 있어 스타일은 총 36개에 이른다. 표 테두리, 표 요약 부분과 스텁(stub)에 더 어두운 색상을 적용, 수직선 반영여부가 포함된다.\nR 코드 opt_colors 벡터에 총 6가지 색상(파란색, 청록색, 분홍색, 녹색, 붉은색, 회색) 중 5개 색상을 지정하고, draw_color_gt 함수를 이용하여 이 색상들을 penguins_gt 표에 opt_stylize 함수를 호출하여 표 색상을 적용한다.\n\nopt_colors &lt;- c(\"blue\", \"cyan\", \"green\", \"red\", \"gray\")\n\ndraw_color_gt &lt;- function(gt_color = \"blue\") {\n  penguins_gt |&gt; \n    opt_stylize(style = 1, color = gt_color)\n}                \n\ngt_colors_list &lt;- map(opt_colors, draw_color_gt)\n\n\nfor(i in 1:length(opt_colors)) {\n  gtsave(gt_colors_list[[i]], str_glue(\"images/gt_theme_{opt_colors[i]}.png\"))\n}\n\n\n\n\n\n\n\n\n\n\n4.1.2 스타일\ngt 패키지는 opt_stylize() 함수를 통해서 색상뿐만 아니라 스타일도 달리해서 표를 제작할 수 있다. gt 패키지 1 ~ 6까지 번호 총6가지 스타일 선택이 가능하고, 기본값은 1 로 설정되어 있고, 저자가 복잡한 설정 없이 번호를 지정함으로써 표 디자인을 빠르게 변경할 수 있다. 번호로 스타일을 선택하게 되면, 데이터 분석과정에서 다양한 표 스타일을 빠르게 시험하고 가장 적절한 표를 신속히 제작하는데 도움이 된다.\n\nopt_styles &lt;- 1:5\n\ndraw_style_gt &lt;- function(opt_sytle, gt_color = \"blue\") {\n  penguins_gt |&gt; \n    opt_stylize(style = opt_sytle, color = gt_color)\n}                \n\ngt_styles_list &lt;- map(opt_sytles, draw_style_gt)\n\n\nfor(i in 1:length(opt_styles)) {\n  gtsave(gt_styles_list[[i]], str_glue(\"images/gt_theme_style_{opt_styles[i]}.png\"))\n}",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>표 테마</span>"
    ]
  },
  {
    "objectID": "theme_gt.html#gtextra",
    "href": "theme_gt.html#gtextra",
    "title": "\n4  표 테마\n",
    "section": "\n4.2 gtExtra\n",
    "text": "4.2 gtExtra\n\ngtExtras 패키지는 gt 패키지를 보완하여 더 아름다운 표를 생성할 수 있도록 도와주는 목적으로 개발되었다. gt 패키지에서 구현되지 않은 기능을 추가하거나, 반복되는 코드를 줄이기 위한 래퍼(wrapper) 함수로 작성되었다. gt 패키지를 확장한 다양한 기능이 있지만 테마와 관련된 사항을 집중적으로 살펴보자.\nggplot2 패키지를 활용하여 그래프 문법에 맞춰 그래프를 제작한 경험이 있다면, 자주 theme_*() 함수를 사용했을 것이다. 마찬가지로 ggplot2 그래프 테마 theme_minimal(), theme_grey()에 대응되는 테마가 gtExtras 패키지에 gt_theme_538(), gt_theme_espn(), gt_theme_nytimes(), gt_theme_guardian(), gt_theme_dot_matrix(), gt_theme_dark(), gt_theme_excel(), gt_theme_pff() 포함되어 있다. 주목할 점은 언론사와 단체에서 사용되는 스타일이 대거 포함되어 있다는 점이다.\ngt_theme_espn() 함수는 gt 패키지로 생성된 표에 ESPN 테마를 적용한다. 이 함수는 gt 테이블 객체(gt_tbl 클래스)를 인자로 받으며, 선택적으로 gt::table_options()에 전달할 추가 인자를 받을 수 있다. 반환 값은 gt_tbl 클래스의 객체이다.\n다음은 다른 테마 함수들에 대한 간략한 설명이다:\n\n\n\n\n\n\n테마명\n테마 설명\n\n\n\ngt_theme_538()\nFiveThirtyEight 스타일 테마 적용\n\n\ngt_theme_espn()\nESPN 스타일 테마 적용\n\n\ngt_theme_nytimes()\nNew York Times 스타일 테마 적용\n\n\ngt_theme_guardian()\n가디언진(The Guardian) 스타일 테마 적용\n\n\ngt_theme_dot_matrix()\n도트 매트릭스 스타일 테마 적용\n\n\ngt_theme_dark()\n어두운 배경 테마 적용\n\n\ngt_theme_excel()\n마이크로소프트 엑셀 스타일 테마 적용\n\n\ngt_theme_pff()\nPFF(Pro Football Focus, 스포츠 분석회사) 스타일 테마 적용\n\n\n\n언론사와 미국 풋볼 리그 스포츠 분석에 특화된 PFF 스타일을 표에 적용해보자.\n\ngtExtra_themes &lt;- c(gt_theme_538, gt_theme_espn, gt_theme_nytimes, gt_theme_guardian, gt_theme_pff)\n\ngtExtra_themes_names &lt;- c(\"gt_theme_538\", \"gt_theme_espn\", \"gt_theme_nytimes\",\n                          \"gt_theme_guardian\",\"gt_theme_pff\")\n\ndraw_gtExtras_theme &lt;- function(gt_theme, gtExtra_themes_names) {\n  penguins_gt |&gt; \n    gt_theme() |&gt; \n    tab_header(\n      title = md(\"남극 펭귄 **서식섬과 종** 빈도표\"),\n      subtitle = gtExtra_themes_names)\n}\n\n# draw_gtExtras_theme(gtExtra_themes[5][[1]])\n## gtExtras 테마적용 표 -------------------\n\ngtExtra_styles_list &lt;- vector(mode =\"list\", length = length(gtExtra_themes))\n\nfor(i in 1:length(gtExtra_themes)) {\n  gtExtra_styles_list[[i]] &lt;-  draw_gtExtras_theme(gtExtra_themes[i][[1]], gtExtra_themes_names[i])\n}\n\n## 테마 표 png 파일 저장 -------------------\n\ngtExtras_path_filenames &lt;- vector(mode = \"character\", length = length(gtExtra_themes))\n\nfor(i in 1:length(gtExtra_themes)) {\n  gtExtras_path_filenames[i] &lt;-  str_glue(\"images/gtExtras_theme_{gtExtra_themes_names[i]}.png\")\n}\n\nfor(i in 1:length(gtExtra_themes)) {\n  gtsave(gtExtra_styles_list[[i]],\n         str_glue(\"images/gtExtras_theme_{gtExtra_themes_names[i]}.png\"))\n}",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>표 테마</span>"
    ]
  },
  {
    "objectID": "theme_gt.html#사용자-정의-테마",
    "href": "theme_gt.html#사용자-정의-테마",
    "title": "\n4  표 테마\n",
    "section": "\n4.3 사용자 정의 테마",
    "text": "4.3 사용자 정의 테마\n사용자 정의 테마가 필요한 이유는 다양하지만, 보고서나 PPT 발표에서 동일한 스타일과 구성을 가진 표를 사용하면 데이터를 더 쉽고 빠르게 이해할 수 있고 동일한 일관성은 수작없이 반영할 수 있고 독자에게는 전문성을 각인시킬 수 있는 점이 크다.\ngtExtras와 같은 패키지에서 제공되는 테마는 코드 한 줄로 빠르고 깔끔한 표를 만들 수 있어 시간을 절약할 수 있다는 큰 장점이 있지만, 특정 요구사항이나 브랜딩 지침을 완전히 맞춤화하기 쉽지 않고, 복잡한 데이터 구조나 특별한 시각화 요구사항을 충족시키는 데에도 한계가 있다.\n사용자 정의 테마를 개발함으로써 gtExtras에서 제공하는 테마처럼 표 제작을 빠르고 편하게 지원할 수 있으면서도, 저자가 필요로 하는 브랜드나 스타일을 반영할 수 있다. 이렇게 하면 표가 더 전문적이면서도 개성있게 작성할 수 있다.\n\n4.3.1 gtExtras 확장\npenguins_gt라는 기존 gt 표 객체에 gt_theme_538() 테마를 선택하고 글꼴, 색상, 정렬 등 세부적인 작업을 진행하고 그 결과를 .png 파일로 저장한다. gt 패키지는 tidyverse 생태계 일원으로 파이프 연산자를 통해 세부적인 기능을 긴밀히 조합하여 단순한 코드로 제작되지만 최종 결과물로 상당히 높은 난이도를 갖는 표를 제작할 수 있다.\n\ngt_theme_538(): FiveThirtyEight 스타일 테마 적용\ntab_options(): 테이블의 글꼴, 제목 크기, 배경색 등 다양한 표 선택옵션 설정\ncols_align(): 숫자형 열은 가운데 정렬하고, 문자형 열은 자동 정렬\ntab_style(): “MaruBuri” 글꼴과 굵은 글씨체를 제목, 본문, 열에 적용\ngtsave(): 최종적으로 작업한 표를 PNG 이미지로 저장\n\n\npenguins_theme_gt &lt;- penguins_gt |&gt; \n  gt_theme_538() |&gt; \n  tab_options(\n    # column_labels.background.color = '#1E61B0', # R logo 파란색\n    table.font.names =\"NanumSquare\",    \n    heading.title.font.size = px(26),\n    heading.subtitle.font.size = px(16),    \n    heading.background.color = \"transparent\", \n    column_labels.font.weight = 'bold',\n    table_body.hlines.width = px(0),\n    data_row.padding = px(6),\n    heading.align = 'center',\n    stub.background.color = \"#ffffff\",\n    stub.font.weight = \"bold\",\n    source_notes.font.size = px(10),\n    row.striping.include_table_body = TRUE\n  ) |&gt; \n  cols_align( align = \"center\", columns = where(is.numeric)) |&gt; \n  cols_align( align = \"auto\", columns = where(is.character)) |&gt; \n  ## 글꼴 달리 적용\n  tab_style(\n    style = cell_text(\n      font = \"MaruBuri\",      \n      weight = 'bold' \n    ),\n    locations = cells_title(groups = 'subtitle')\n  ) |&gt; \n  tab_style(\n    style = cell_text(\n      font = \"MaruBuri\",      \n      weight = 'bold' \n    ),\n    locations = cells_body()\n  ) |&gt; \n  tab_style(\n    style = cell_text(\n      font = \"MaruBuri\",      \n      weight = 'bold' \n    ),\n    locations = cells_column_labels()\n  ) |&gt; \n  tab_style(\n    style = cell_text(\n      font = \"MaruBuri\",      \n    ),\n    locations = cells_source_notes()\n  )\n\npenguins_theme_gt |&gt; \n  gtsave(filename = \"images/penguins_theme_gt.png\")\n\n\n\ngt 사용자 정의 테마 적용 표\n\n\n4.3.2 gt_theme_hangul() 테마\ngt_theme_538() 함수처럼 사용자 정의 함수를 gt_theme_hangul() 테마명을 지정해 두면 모든 표에 통일성을 유지한 테마를 간편하게 적용시킬 수 있다.\ngt_tbl 데이터프레임을 입력받아 gt_theme_538()을 기본표 테마로 지정하고, tab_options() 함수를 통해 글꼴, 제목 크기, 배경색 등을 설정하고, 나눔스퀘어(NanumSquare), 마루부리(MaruBuri) 글꼴을 사용하여 한글 표에 더 적합한 스타일을 적용하고, cols_align()과 tab_style() 함수를 사용해서 숫자형 열(칼럼)은 가운데 정렬시키고, 문자형 열은 자동 정렬토록 하고, 특정 셀에 굵은 글씨체와 각기 다른 글꼴을 적용하여 좀더 독특하고 전문적인 느낌을 심는다. tab_style() 기능을 이용해 표 홀수 번째 행에만 회색 배경(‘grey90’)을 적용하여 가독성을 높게 한다. 마지막으로 사용자 정의 테마 함수도 예를 들어 기억하기 좋게 gt_theme_hangul()으로 작명하여 문서에서 표가 필요한 부분에 별도 검색작업 없이 적용시킬 수 있도록 한다.\n\ngt_theme_hangul &lt;- function(gt_tbl) {\n  \n  # Grab number of rows of data from gt object\n  n_rows &lt;- nrow(gt_tbl$`_data`)\n  \n  gt_tbl |&gt; \n    gt_theme_538() |&gt; \n    tab_options(\n      # column_labels.background.color = '#1E61B0', # R logo 파란색\n      table.font.names =\"NanumSquare\",    \n      heading.title.font.size = px(26),\n      heading.subtitle.font.size = px(16),    \n      heading.background.color = \"transparent\", \n      column_labels.font.weight = 'bold',\n      table_body.hlines.width = px(0),\n      data_row.padding = px(6),\n      heading.align = 'center',\n      stub.background.color = \"#ffffff\",\n      stub.font.weight = \"bold\",\n      source_notes.font.size = px(10),\n      row.striping.include_table_body = FALSE\n    ) |&gt; \n    cols_align( align = \"center\", columns = where(is.numeric)) |&gt; \n    cols_align( align = \"auto\", columns = where(is.character)) |&gt; \n    ## 글꼴 달리 적용\n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",      \n        weight = 'bold' \n      ),\n      locations = cells_title(groups = 'subtitle')\n    ) |&gt; \n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",      \n        weight = 'bold' \n      ),\n      locations = cells_body()\n    ) |&gt; \n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",      \n        weight = 'bold' \n      ),\n      locations = cells_column_labels()\n    ) |&gt; \n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",      \n      ),\n      locations = cells_source_notes()\n    ) |&gt; \n    tab_style(\n      style = cell_fill(color = 'grey90'),\n      locations = cells_body(rows = seq(1, n_rows, 2))\n    )    \n}\n\npenguins_gt |&gt; \n  gt_theme_hangul()\n\n\n\n\n\n\n\n남극 펭귄 서식섬과 종 빈도표\n\n\n\npalmerpenguins 데이터 패키지\n\n\n\nBiscoe\nDream\nTorgersen\n\n\n\n\nAdelie\n44\n56\n52\n\n\nChinstrap\n0\n68\n0\n\n\nGentoo\n124\n0\n0\n\n\n합계\n168\n124\n52\n\n\n\n자료출처: penguins 데이터셋",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>표 테마</span>"
    ]
  },
  {
    "objectID": "theme_gt.html#rprofile-설정작업",
    "href": "theme_gt.html#rprofile-설정작업",
    "title": "\n4  표 테마\n",
    "section": "\n4.4 .Rprofile 설정작업",
    "text": "4.4 .Rprofile 설정작업\n.Rprofile 파일에 테마 함수를 반영시키면 R 세션을 시작할 때마다 테마가 자동으로 로드되어 일일이 코드를 실행할 필요가 없어 작업 효율성을 크게 높여줌은 물론, 프로젝트 간 일관된 스타일과 브랜딩을 유지할 수 있다. 코드 작성 측면에서 테마 함수를 .Rprofile에 추가하여 코드 재사용성을 높이고, 테마 관련 설정을 한 곳에서 관리할 수 있게 함으로써 작업 일관성과 전문성이 높아져 시간과 노력을 크게 절약할 수 있다.\n\n\n\n\n\n\n\n\n\n\n\n\n\ngt 표 테마 적용 작업흐름\n\n작성한 테마를 매번 코드를 “복사하여 붙여넣기” 하여 사용하는 대신 .Rprofile 파일에 반영하여 매번 gt 표를 제작할 때마다 gt_theme_hangul() 테마를 적용하는 방법은 다음과 같다. 먼저, usethis 패키지 edit_r_profile() 함수를 호출하여 앞서 작성한 테마를 반영한다.\n\nusethis::edit_r_profile()\n\ngt_theme_hangul() 테마를 gt 표 객체에 반영한다. 스크립트에서부터 시작하여 작성한 함수를 .Rprofile 파일에 복사하여 붙여넣는 것으로 작업은 완료된다.\n\nlibrary(gt)\nlibrary(gtExtras)\n\ngt_theme_hangul &lt;- function(gt_tbl) {\n\n  # Grab number of rows of data from gt object\n  n_rows &lt;- nrow(gt_tbl$`_data`)\n\n  gt_tbl |&gt;\n    gt_theme_538() |&gt;\n    tab_options(\n      # column_labels.background.color = '#1E61B0', # R logo 파란색\n      table.font.names =\"NanumSquare\",\n      heading.title.font.size = px(26),\n      heading.subtitle.font.size = px(16),\n      heading.background.color = \"transparent\",\n      column_labels.font.weight = 'bold',\n      table_body.hlines.width = px(0),\n      data_row.padding = px(6),\n      heading.align = 'center',\n      stub.background.color = \"#ffffff\",\n      stub.font.weight = \"bold\",\n      source_notes.font.size = px(10),\n      row.striping.include_table_body = FALSE\n    ) |&gt;\n    cols_align( align = \"center\", columns = where(is.numeric)) |&gt;\n    cols_align( align = \"auto\", columns = where(is.character)) |&gt;\n    ## 글꼴 달리 적용\n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",\n        weight = 'bold'\n      ),\n      locations = cells_title(groups = 'subtitle')\n    ) |&gt;\n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",\n        weight = 'bold'\n      ),\n      locations = cells_body()\n    ) |&gt;\n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",\n        weight = 'bold'\n      ),\n      locations = cells_column_labels()\n    ) |&gt;\n    tab_style(\n      style = cell_text(\n        font = \"MaruBuri\",\n      ),\n      locations = cells_source_notes()\n    ) |&gt;\n    tab_style(\n      style = cell_fill(color = 'grey90'),\n      locations = cells_body(rows = seq(1, n_rows, 2))\n    )\n}\n\n.Rprofile 파일에 gt 사용자 정의 테마가 지정되어 있기 때문에 새로 R 세션을 시작하면 gt_theme_hangul() 테마를 프로젝트 어디에서든지 사용할 수 있다.\n\noriginal_penguins_gt &lt;- penguins |&gt; \n  drop_na() |&gt; \n  count(species, sex) |&gt; \n  pivot_wider(names_from = sex, values_from = n, values_fill = 0) |&gt; \n  janitor::adorn_totals(where = \"col\", name = \"합계\") |&gt; \n  rename(펭귄종 = species, 암컷 = female, 수컷 = male) |&gt; \n  as_tibble() |&gt; \n  gt(rowname_col = \"펭귄종\") |&gt; \n    tab_header(\n      title = md(\"남극 펭귄 **암수와 종** 빈도표\"),\n      subtitle = md(\"`palmerpenguins` 데이터 패키지\")\n    ) |&gt; \n    grand_summary_rows(\n      columns = c(펭귄종, 암컷, 수컷),\n      fns = list(\n        '합계' = ~sum(.) \n      ),\n      fmt = ~ fmt_number(., use_seps = FALSE, decimals = 0),\n      missing_text = '-'\n    )  |&gt; \n    cols_align(\"center\") |&gt; \n    opt_row_striping() |&gt; \n    tab_source_note(\n      source_note = md(\"자료출처: `penguins` 데이터셋\")\n  )\n\noriginal_penguins_gt |&gt; \n  gtsave(\"images/rprofile_original.png\")\n\ntheme_penguins_gt &lt;- original_penguins_gt |&gt; \n  gt_theme_hangul()\n\ntheme_penguins_gt |&gt; \n  gtsave(\"images/rprofile_hangul_theme.png\")\n\n\n\n\n\n\n\n\n\ngt_theme_hangul() 테마 적용 전\n\n\n\n \n\n\n\n\ngt_theme_hangul() 테마 적용 후",
    "crumbs": [
      "템플릿과 테마",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>표 테마</span>"
    ]
  }
]